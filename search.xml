<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>springboot如何将控制台的输出保存到文件中</title>
    <url>/2023/06/28/springboot%E5%A6%82%E4%BD%95%E5%B0%86%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BF%9D%E5%AD%98%E5%88%B0%E6%96%87%E4%BB%B6%E4%B8%AD/</url>
    <content><![CDATA[<h1 id="springboot如何将控制台的输出保存到文件中"><a href="#springboot如何将控制台的输出保存到文件中" class="headerlink" title="springboot如何将控制台的输出保存到文件中"></a>springboot如何将控制台的输出保存到文件中</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306281727933.jpeg" alt="a painting of a blue and yellow flower"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制台日志写入文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr peng</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsoleLogWrite</span> <span class="keyword">extends</span> <span class="title class_">OutputStream</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//window输出文件路径</span></span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;consoleLogWrite.windowsUrl&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String consoleLogWriteWindowsUrl;</span><br><span class="line">	<span class="comment">//linux输出文件路径</span></span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;consoleLogWrite.linuxUrl&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String consoleLogWriteLinuxUrl;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> OutputStream oldOutputStream, newOutputStream;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ConsoleLogWrite</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ConsoleLogWrite</span><span class="params">(OutputStream oldOutputStream, OutputStream newOutputStream)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.oldOutputStream = oldOutputStream;</span><br><span class="line">        <span class="built_in">this</span>.newOutputStream = newOutputStream;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//重写输出流的方式，改为两种，一种控制台输出，一种写入指定文件</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> b)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		oldOutputStream.write(b);</span><br><span class="line">		newOutputStream.write(b);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//当前bean初始化前调用</span></span><br><span class="line">	<span class="meta">@PostConstruct</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeLogToFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="type">File</span> <span class="variable">tmplLogFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(getUploadPath(consoleLogWriteLinuxUrl, consoleLogWriteWindowsUrl));</span><br><span class="line">		<span class="comment">//启一个定时线程延迟15分钟后每过30分钟检查文件大小是否超过100M，如果超过则删除重新创建</span></span><br><span class="line">		<span class="type">ScheduledExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">		executorService.scheduleWithFixedDelay(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="comment">//文件不存在就创建</span></span><br><span class="line">			        <span class="keyword">if</span> (!tmplLogFile.exists()) &#123;</span><br><span class="line">			            <span class="keyword">try</span> &#123;</span><br><span class="line">							tmplLogFile.createNewFile();</span><br><span class="line">						&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">							e.printStackTrace();</span><br><span class="line">						&#125;</span><br><span class="line">			        &#125;</span><br><span class="line">					<span class="comment">//文件大于100M就删除，重新创建</span></span><br><span class="line">			        <span class="type">double</span> <span class="variable">KB</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">			        <span class="type">double</span> <span class="variable">MB</span> <span class="operator">=</span> KB * <span class="number">1024</span>;</span><br><span class="line">			        <span class="keyword">if</span>(tmplLogFile.length() &gt; MB * <span class="number">100</span>)&#123;</span><br><span class="line">			            tmplLogFile.delete();</span><br><span class="line">			        &#125;</span><br><span class="line">				&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, <span class="number">15</span>, <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">		<span class="comment">//设置输出模式</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">oldOutputStream</span> <span class="operator">=</span> System.out;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">newOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(tmplLogFile);</span><br><span class="line">        <span class="type">ConsoleLogWrite</span> <span class="variable">multiOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConsoleLogWrite</span>(oldOutputStream, <span class="keyword">new</span> <span class="title class_">PrintStream</span>(newOutputStream));</span><br><span class="line">        System.setOut(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(multiOutputStream));</span><br><span class="line">        System.setErr(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(multiOutputStream));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据当前系统返回对应的路径 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> linuxPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> windowsPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUploadPath</span><span class="params">(String linuxPath, String windowsPath)</span> &#123;</span><br><span class="line">    	<span class="keyword">if</span>(System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().indexOf(<span class="string">&quot;linux&quot;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    		<span class="keyword">return</span> linuxPath;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> windowsPath;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>开发问题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将JavaFX的java项目打包成exe格式</title>
    <url>/2023/06/16/%E5%A6%82%E4%BD%95%E5%B0%86java%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="如何将JavaFX的java项目打包成exe格式"><a href="#如何将JavaFX的java项目打包成exe格式" class="headerlink" title="如何将JavaFX的java项目打包成exe格式"></a>如何将JavaFX的java项目打包成exe格式</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306261746693.jpeg" alt="a dark tunnel with a light at the end"></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在博客的时候，因为用到了hexo，所以必须按照hexo的格式上传文章，这样网站在显示的时候才会完整的显示出来：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306152048160.png" alt="image-20230615204813105"></p>
<p>但是，每次写一篇，就得手动在文章的头部添加一些这些信息，而且添加完了之后，还要重新执行hexo三剑客才能部署到github的page上，所以就想着能不能按照，写一个客户端，用java写一个能运行在windows平台上的代码。</p>
<p>以下都是基于代码写好了之后，详情请看这篇文章-&gt;&gt;&gt;&gt;&gt;&gt;&gt;</p>
<h2 id="maven打包"><a href="#maven打包" class="headerlink" title="maven打包"></a>maven打包</h2><p>打包方式的话，可以参考文章末尾的第一篇文章。</p>
<p>本文使用方法一会报错。所以使用方法二。</p>
<p>使用的插件为maven-assembly-plugin，只需要在pom文件里面添加这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">               &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">               &lt;configuration&gt;</span><br><span class="line">                   &lt;descriptorRefs&gt;</span><br><span class="line">                       &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;</span><br><span class="line">                   &lt;/descriptorRefs&gt;</span><br><span class="line">                   &lt;archive&gt;</span><br><span class="line">                       &lt;manifest&gt;</span><br><span class="line">                           &lt;mainClass&gt;com.yamon.convert/com.yamon.convert.HelloApplication&lt;/mainClass&gt;</span><br><span class="line">                       &lt;/manifest&gt;</span><br><span class="line">                   &lt;/archive&gt;</span><br><span class="line">               &lt;/configuration&gt;</span><br><span class="line">               &lt;executions&gt;</span><br><span class="line">                   &lt;execution&gt;</span><br><span class="line">                       &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class="line">                       &lt;phase&gt;<span class="keyword">package</span>&lt;/phase&gt;</span><br><span class="line">                       &lt;goals&gt;</span><br><span class="line">                           &lt;goal&gt;single&lt;/goal&gt;</span><br><span class="line">                       &lt;/goals&gt;</span><br><span class="line">                   &lt;/execution&gt;</span><br><span class="line">               &lt;/executions&gt;</span><br><span class="line">           &lt;/plugin&gt;</span><br></pre></td></tr></table></figure>

<p>参考文章中有说的需要查看META-INF文件夹下的MAINIFEST.MF,需要查看里面的引用是否完整，我的内容比较少，也没有手动加。但是如果你要是有别的依赖包的话，需要手动添加一下，具体参考这篇文章：<a href="https://blog.csdn.net/qq_29428909/article/details/122103131">将idea中的JavaFX项目打包成可执行的exe应用</a></p>
<p>重新导一下maven包，然后打开maven，点击：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306161036716.png" alt="image-20230616103621652"></p>
<p>完成打包：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306161036953.png" alt="image-20230616103635913"></p>
<h2 id="exe4j将jar包导出成exe格式"><a href="#exe4j将jar包导出成exe格式" class="headerlink" title="exe4j将jar包导出成exe格式"></a>exe4j将jar包导出成exe格式</h2><blockquote>
<p>前记：</p>
<p>之前也用过的别的，强烈不推荐使用jsmooth，感觉都是上古时期的工具了。按照教程一步一步操作，始终打不开。后来切换成exe4j之后，才成功完成打包动作。另外，打包方式的不同也有可能导致包的失效（毕竟不是springboot项目，怎么打都可以）</p>
</blockquote>
<p>先下载exe4j文件，比较快。下载好了之后，完成安装。</p>
<ol>
<li>欢迎页面不用看，直接点下一步：</li>
</ol>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306161040185.png" alt="image-20230616104018147"></p>
<ol start="2">
<li>项目类型选择jar包 in exe模式：<img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306161041330.png" alt="image-20230616104119283"></li>
<li>应用配置，这个应该是导出的文件名称，然后导出的目录位置：<img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306161042024.png" alt="image-20230616104201987"></li>
<li>配置执行文件，需要将高级选项点开，选择32&#x2F;64&#x2F;arm<img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306161042379.png" alt="image-20230616104240329"></li>
<li><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306161043712.png" alt="image-20230616104318653"></li>
<li><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306161043997.png" alt="image-20230616104331961"></li>
<li>Java invocation：如果有额外的vm参数，需要调参的话，在上面填写；下面点击右侧绿色的加号，将刚才导出的包添加进来：<img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306161044962.png" alt="image-20230616104446922">主类选择项目中的主类即可。</li>
<li>配置JRE，尽量和当前系统环境一致：<img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306161045352.png" alt="image-20230616104543316"></li>
<li>坑点：这里需要在环境变量里面添加变量EXE4J_JAVA_HOME，然后地址写jre的地址。要不会报参考中的第三个错误；如果你的jdk版本没有jre的话，可以参考这篇文章：[待补充]。<img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306161048283.png"></li>
<li>然后一路下一步就行了。</li>
<li>最后试一下，看是否能启动应用：<img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306161048396.png" alt="image-20230616104849351"></li>
<li>如果能启动的话，表示成功，点击save as，将这个配置保存到本地。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_29428909/article/details/122103131">将idea中的JavaFX项目打包成可执行的exe应用</a></p>
<p><a href="https://www.cnblogs.com/ococo/p/15875003.html">JDK11，JDK12 使用EXE4J 无JRE解决办法</a></p>
<p><a href="https://blog.csdn.net/jiong9412/article/details/126481322">No JVM could be found on your system. Please define EXE4J_JAVA_HOME to point to an installed 64-bit</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>exe</tag>
      </tags>
  </entry>
  <entry>
    <title>62.不同路径</title>
    <url>/2024/06/14/00.%E7%AE%97%E6%B3%95/62.%20%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h1 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62. 不同路径"></a>62. 不同路径</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/image-20240614204134296.png" alt="image-20240614204134296"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * @lc app=leetcode.cn id=62 lang=java</span><br><span class="line"> *</span><br><span class="line"> * [62] 不同路径</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// @lc code=start</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int uniquePaths(int m, int n) &#123;</span><br><span class="line">        // 1. 确定动规dp函数及含义：dp[i][j]:从0,0开始，到i，j共有dp[i][j]不同的路径</span><br><span class="line">        // 2. 确定动规递推公式：dp[i][j] 只有两个方向，向下和向右</span><br><span class="line">        // 所以 dp[i][j] = dp[i-1][j] + dp[i][j-1]</span><br><span class="line">        // 3. dp数组的初始化：</span><br><span class="line">        // dp[i][0] = 1,dp[0][j] = 1</span><br><span class="line">        // 4. 确定遍历顺序：从左向右</span><br><span class="line">        // 5. 举例推导</span><br><span class="line">        int[][] dp = new int[m][n];</span><br><span class="line">        // 初始化</span><br><span class="line">        for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">            dp[i][0] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">            dp[0][j] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        // 递推,注意这里要从1开始。</span><br><span class="line">        for (int i = 1; i &lt; m; i++) &#123;</span><br><span class="line">            for (int j = 1; j &lt; n; j++) &#123;</span><br><span class="line">                dp[i][j] = dp[i-1][j] + dp[i][j-1];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[m-1][n-1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// @lc code=end</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>单链表的倒数第k个节点</title>
    <url>/2023/06/16/00.%E7%AE%97%E6%B3%95/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h1 id="单链表的倒数第k个节点"><a href="#单链表的倒数第k个节点" class="headerlink" title="单链表的倒数第k个节点"></a>单链表的倒数第k个节点</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306261740849.jpeg" alt="a bird is perched on the side of a building"></p>
<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p>
<p>例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。</p>
<p>示例：</p>
<p>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k &#x3D; 2.</p>
<p>返回链表 4-&gt;5.</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>双指针。</p>
<p>声明两个指针，分别是p1 和 p2；</p>
<p>先走p1，让p1先走k步</p>
<p>然后p1和p2同时走，直到p1为null的时候，停止，这时候，p2的就是待返回的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getKthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">          <span class="comment">// 先将p1指向head</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">// 先让p1走k步</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p2</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">// 再让p1和p2同时走n-k步</span></span><br><span class="line">        <span class="keyword">while</span> (p1 != <span class="literal">null</span>)&#123;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// p2 现在指向第 n - k + 1 个节点，即倒数第 k 个节点</span></span><br><span class="line">        <span class="keyword">return</span> p2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>双指针之链表总结</title>
    <url>/2023/06/26/00.%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88%E4%B9%8B%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="双指针之链表总结"><a href="#双指针之链表总结" class="headerlink" title="双指针之链表总结"></a>双指针之链表总结</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306262043405.jpeg" alt="mason jar of paintbrush lot"></p>
<p>一共七个题，且只涉及到单链表的操作。</p>
<ol>
<li><p>合并两个有序链表  <a href="https://leetcode.cn/problems/merge-two-sorted-lists/">合并两个有序链表</a></p>
</li>
<li><p>链表的分解 <a href="https://leetcode.cn/problems/partition-list/">分隔链表</a></p>
</li>
<li><p>合并 <code>k</code> 个有序链表 <a href="https://leetcode.cn/problems/merge-k-sorted-lists/">合并K个升序链表</a>：</p>
</li>
<li><p>寻找单链表的倒数第 <code>k</code> 个节点 <a href="https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">剑指 Offer 22. 链表中倒数第k个节点</a></p>
</li>
<li><p>寻找单链表的中点 <a href="https://leetcode.cn/problems/middle-of-the-linked-list/">链表的中间结点</a></p>
</li>
<li><p>判断单链表是否包含环并找出环起点 <a href="https://leetcode.cn/problems/linked-list-cycle-ii/">环形链表 II</a></p>
</li>
<li><p>判断两个单链表是否相交并找出交点 <a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">相交链表</a></p>
</li>
</ol>
<h2 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h2><p>将两个升序链表合并成为一个新的升序链表。新链表通过拼接给定的两个链表所有节点组成。</p>
<p>方法签名：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span>;</span><br></pre></td></tr></table></figure>

<p>思路：</p>
<p>善用<strong>虚拟头节点</strong>，使用dummy生成一个虚拟节点p，同时为了不破坏l1和l2的链表结构，（因为要遍历这两个链）所以，重新赋值l1给p1，l2给p2；</p>
<p>在while循环里面，每次比较p1和p2的大小，将较小的节点给p，同时p指针不断后移。</p>
<p>关键代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (p1 != <span class="literal">null</span> &amp;&amp; p2 != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 比较 p1 和 p2 两个指针</span></span><br><span class="line">       <span class="comment">// 将值较小的的节点接到 p 指针</span></span><br><span class="line">       <span class="keyword">if</span> (p1.val &gt; p2.val) &#123;</span><br><span class="line">           p.next = p2;</span><br><span class="line">           p2 = p2.next;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           p.next = p1;</span><br><span class="line">           p1 = p1.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// p 指针不断前进</span></span><br><span class="line">       p = p.next;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>什么时候使用虚拟头节点？</p>
<p>需要创建一个新的链表的时候，可以使用虚拟头节点简化边界情况的处理。</p>
</blockquote>
<h2 id="分割链表"><a href="#分割链表" class="headerlink" title="分割链表"></a>分割链表</h2><p>题意：给你一个链表的头结点head和一个特定值x，对链表进行分割，使得所有小于x的节点都出现在大于或等于x的节点之前。</p>
<p>你应该保留两个分区的每个节点初试相对位置。</p>
<p>在合并两个有序链表时，让你合二为一，而这里需要分解，使得原链表一分为二。具体来说，我们可以将原链表分成两个小链表，一个链表中的元素都小于x，另外一个链表中的元素都大于等于x，最后将这两条链表连在一起，就得到了最终答案：</p>
<p>题解：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ListNode partition(ListNode head, int x) &#123;</span><br><span class="line">    // 存放小于 x 的链表的虚拟头结点</span><br><span class="line">    ListNode dummy1 = new ListNode(-1);</span><br><span class="line">    // 存放大于等于 x 的链表的虚拟头结点</span><br><span class="line">    ListNode dummy2 = new ListNode(-1);</span><br><span class="line">    // p1, p2 指针负责生成结果链表</span><br><span class="line">    ListNode p1 = dummy1, p2 = dummy2;</span><br><span class="line">    // p 负责遍历原链表，类似合并两个有序链表的逻辑</span><br><span class="line">    // 这里是将一个链表分解成两个链表</span><br><span class="line">    ListNode p = head;</span><br><span class="line">    while (p != null) &#123;</span><br><span class="line">        if (p.val &gt;= x) &#123;</span><br><span class="line">            p2.next = p;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            p1.next = p;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        // 断开原链表中的每个节点的 next 指针</span><br><span class="line">        ListNode temp = p.next;</span><br><span class="line">        p.next = null;</span><br><span class="line">        p = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    // 连接两个链表</span><br><span class="line">    p1.next = dummy2.next;</span><br><span class="line"></span><br><span class="line">    return dummy1.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="合并K个有序链表"><a href="#合并K个有序链表" class="headerlink" title="合并K个有序链表"></a>合并K个有序链表</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>给你一个链表数组，每个链表都已经按升序排列。</p>
<p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：lists = [[1,4,5],[1,3,4],[2,6]]</span><br><span class="line">输出：[1,1,2,3,4,4,5,6]</span><br><span class="line">解释：链表数组如下：</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">将它们合并到一个有序链表中得到。</span><br><span class="line">1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：lists = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：lists = [[]]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>合并k个有序链表类似于合并两个有序链表，难点在于如何获取k个节点中最小的节点，并接到结果链上。</p>
<p>使用<strong>优先队列</strong>，遍历每个链表，将链表中的每个节点都添加到最小堆中，就可以获取k个节点中的最小节点了。</p>
<p>先入队列，然后出队列，最后的条件是队列是否为空！</p>
<p>核心代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 优先级队列，最小堆</span></span><br><span class="line">   PriorityQueue&lt;ListNode&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(</span><br><span class="line">       lists.length, (a, b)-&gt;(a.val - b.val));</span><br><span class="line">   <span class="comment">// 将 k 个链表的头结点加入最小堆</span></span><br><span class="line">   <span class="keyword">for</span> (ListNode head : lists) &#123;</span><br><span class="line">       <span class="keyword">if</span> (head != <span class="literal">null</span>)</span><br><span class="line">           pq.add(head);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">       <span class="comment">// 获取最小节点，接到结果链表中</span></span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> pq.poll();</span><br><span class="line">       p.next = node;</span><br><span class="line">       <span class="keyword">if</span> (node.next != <span class="literal">null</span>) &#123;</span><br><span class="line">           pq.add(node.next);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// p 指针不断前进</span></span><br><span class="line">       p = p.next;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="单链表的倒数第K个节点"><a href="#单链表的倒数第K个节点" class="headerlink" title="单链表的倒数第K个节点"></a>单链表的倒数第K个节点</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p>
<p>例如，一个链表有 <code>6</code> 个节点，从头节点开始，它们的值依次是 <code>1、2、3、4、5、6</code>。这个链表的倒数第 <code>3</code> 个节点是值为 <code>4</code> 的节点。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k = 2.</span><br><span class="line"></span><br><span class="line">返回链表 4-&gt;5.</span><br></pre></td></tr></table></figure>

<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>是否可以用栈来实现？目前存疑。</p>
<p>给出的思路：用双指针，也叫快慢指针吧，快指针先走k步，然后快、慢指针再一起走，当快指针走到头的时候，慢指针就是倒数第k个节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回链表的倒数第 k 个节点</span></span><br><span class="line">ListNode <span class="title function_">findFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">// p1 先走 k 步</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p2</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">// p1 和 p2 同时走 n - k 步</span></span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="literal">null</span>) &#123;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// p2 现在指向第 n - k + 1 个节点，即倒数第 k 个节点</span></span><br><span class="line">    <span class="keyword">return</span> p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除链表的倒数第N个节点"><a href="#删除链表的倒数第N个节点" class="headerlink" title="删除链表的倒数第N个节点"></a>删除链表的倒数第N个节点</h2><p>和单链表的倒数第K个节点一样，只不过需要找到节点后删除。</p>
<p>2023年6月30日更新：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">       dummy.next = head;</span><br><span class="line">       <span class="comment">// 先利用双指针找到倒数第N个节点</span></span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> dummy;</span><br><span class="line">       <span class="comment">// p1 先走n步</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">           p1 = p1.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">p2</span> <span class="operator">=</span> dummy;</span><br><span class="line">       <span class="comment">// 再一起走</span></span><br><span class="line">       <span class="keyword">while</span> (p1 != <span class="literal">null</span>)&#123;</span><br><span class="line">           p2 = p2.next;</span><br><span class="line">           p1 = p1.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 现在p2指的节点就是倒数第N个节点</span></span><br><span class="line">       <span class="comment">// 开始删除p2节点</span></span><br><span class="line">       p2.next = p2.next.next;</span><br><span class="line">       <span class="keyword">return</span> dummy.next;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="单链表的中点"><a href="#单链表的中点" class="headerlink" title="单链表的中点"></a>单链表的中点</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你单链表的头结点 <code>head</code> ，请你找出并返回链表的中间结点。</p>
<p>如果有两个中间结点，则返回第二个中间结点。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306262029464.jpeg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[3,4,5]</span><br><span class="line">解释：链表只有一个中间结点，值为 3 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306262029458.jpeg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5,6]</span><br><span class="line">输出：[4,5,6]</span><br><span class="line">解释：该链表有两个中间结点，值分别为 3 和 4 ，返回第二个结点。</span><br></pre></td></tr></table></figure>

<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>同样，利用快慢指针的方法，快指针每次走两步，慢指针走一步，这样，让快指针走到头的时候，慢指针正好指在中点。</p>
<p>核心代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 慢指针走一步，快指针走两步</span></span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>注意，需要判断fast.next是否为null，原因是，有可能是偶数的节点。</p>
<h2 id="判断链表是否包含环"><a href="#判断链表是否包含环" class="headerlink" title="判断链表是否包含环"></a>判断链表是否包含环</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。</p>
<p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p>
<h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>也是利用快慢指针，每当慢指针走一步，快指针走两步，如果快指针最终遇到了空指针，则说明链表中没有环；</p>
<p>如果快指针和慢指针相遇，证明快指针超过了慢指针一圈，说明有环。</p>
<p>核心代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">       <span class="comment">// 慢指针走一步，快指针走两步</span></span><br><span class="line">       slow = slow.next;</span><br><span class="line">       fast = fast.next.next;</span><br><span class="line">       <span class="comment">// 快慢指针相遇，说明含有环</span></span><br><span class="line">       <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="环形链表II"><a href="#环形链表II" class="headerlink" title="环形链表II"></a>环形链表II</h2><p>找到这个环的起点。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306262035848.png" alt="img"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>当快慢指针相遇的时候，证明快慢指针相遇，让其中任意一个指向头结点，然后让快慢指针以相同的速度前行，再次相遇的节点位置就是环开始的位置。</p>
<p>核心代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重新指向头结点</span></span><br><span class="line">       slow = head;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 快慢指针同步前进，相交点就是环起点</span></span><br><span class="line">       <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">           fast = fast.next;</span><br><span class="line">           slow = slow.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> slow;</span><br></pre></td></tr></table></figure>

<h2 id="两个链表是否相交"><a href="#两个链表是否相交" class="headerlink" title="两个链表是否相交"></a>两个链表是否相交</h2><p>给你输入两个链表的头结点 <code>headA</code> 和 <code>headB</code>，这两个链表可能存在相交。</p>
<p>如果相交，你的算法应该返回相交的那个节点；如果没相交，则返回 null。</p>
<p>比如题目给我们举的例子，如果输入的两个链表如下图：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306262039252.png" alt="img"></p>
<h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>难点：如何让p1和p2两个链表同时到达相交节点</p>
<p>所以，我们可以让 <code>p1</code> 遍历完链表 <code>A</code> 之后开始遍历链表 <code>B</code>，让 <code>p2</code> 遍历完链表 <code>B</code> 之后开始遍历链表 <code>A</code>，这样相当于「逻辑上」两条链表接在了一起。</p>
<p>如果这样进行拼接，就可以让 <code>p1</code> 和 <code>p2</code> 同时进入公共部分，也就是同时到达相交节点 <code>c1</code></p>
<p>核心代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (p1 != p2) &#123;</span><br><span class="line">        <span class="comment">// p1 走一步，如果走到 A 链表末尾，转到 B 链表</span></span><br><span class="line">        <span class="keyword">if</span> (p1 == <span class="literal">null</span>) p1 = headB;</span><br><span class="line">        <span class="keyword">else</span>            p1 = p1.next;</span><br><span class="line">        <span class="comment">// p2 走一步，如果走到 B 链表末尾，转到 A 链表</span></span><br><span class="line">        <span class="keyword">if</span> (p2 == <span class="literal">null</span>) p2 = headA;</span><br><span class="line">        <span class="keyword">else</span>            p2 = p2.next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://labuladong.gitee.io/algo/di-yi-zhan-da78c/shou-ba-sh-8f30d/shuang-zhi-0f7cc/#%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%86%E8%A7%A3">双指针技巧秒杀七道链表题目</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>反转链表I</title>
    <url>/2023/07/07/00.%E7%AE%97%E6%B3%95/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8I/</url>
    <content><![CDATA[<hr>
<h2 id="title-反转链表Idate-2023-07-07-10-48-21tags-递归-链表-leetcode-categories-算法-recommend-truelocate-天津-cover-https-markdown-image-bed-oss-cn-beijing-aliyuncs-com-202307071047886-jpegcomment-是keywords"><a href="#title-反转链表Idate-2023-07-07-10-48-21tags-递归-链表-leetcode-categories-算法-recommend-truelocate-天津-cover-https-markdown-image-bed-oss-cn-beijing-aliyuncs-com-202307071047886-jpegcomment-是keywords" class="headerlink" title="title: 反转链表Idate: 2023-07-07 10:48:21tags: [递归, 链表, leetcode]categories: [算法]recommend: truelocate: [天津]cover: https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307071047886.jpegcomment: 是keywords: "></a>title: 反转链表I<br>date: 2023-07-07 10:48:21<br>tags: [递归, 链表, leetcode]<br>categories: [算法]<br>recommend: true<br>locate: [天津]<br>cover: <a href="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307071047886.jpeg">https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307071047886.jpeg</a><br>comment: 是<br>keywords: </h2><h1 id="反转链表I"><a href="#反转链表I" class="headerlink" title="反转链表I"></a>反转链表I</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307071047886.jpeg" alt="a view of a mountain range at sunset"></p>
<p>给定单链表的头节点 head ，请反转链表，并返回反转后的链表的头节点。</p>
<p> <img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="img"></p>
<p>示例 1：</p>
<p>输入：head &#x3D; [1,2,3,4,5]<br>输出：[5,4,3,2,1]<br>示例 2：</p>
<p>输入：head &#x3D; [1,2]<br>输出：[2,1]<br>示例 3：</p>
<p>输入：head &#x3D; []<br>输出：[]</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307071037561.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head, pre = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> cur.next; <span class="comment">// 暂存后继节点 cur.next</span></span><br><span class="line">            cur.next = pre;          <span class="comment">// 修改 next 引用指向</span></span><br><span class="line">            pre = cur;               <span class="comment">// pre 暂存 cur</span></span><br><span class="line">            cur = tmp;               <span class="comment">// cur 访问下一节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>不太懂递归：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ListNode <span class="title function_">reverse</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> reverse(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第二种回溯方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> recur(head, <span class="literal">null</span>);    <span class="comment">// 调用递归并返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">recur</span><span class="params">(ListNode cur, ListNode pre)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span> pre; <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">res</span> <span class="operator">=</span> recur(cur.next, cur);  <span class="comment">// 递归后继节点</span></span><br><span class="line">        cur.next = pre;              <span class="comment">// 修改节点引用指向</span></span><br><span class="line">        <span class="keyword">return</span> res;                  <span class="comment">// 返回反转链表的头节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>递归</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>删除链表的倒数第N个节点</title>
    <url>/2023/07/07/00.%E7%AE%97%E6%B3%95/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h1 id="删除链表的倒数第N个节点"><a href="#删除链表的倒数第N个节点" class="headerlink" title="删除链表的倒数第N个节点"></a>删除链表的倒数第N个节点</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307071106271.jpeg" alt="an aerial view of a sandy beach and ocean"></p>
<p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>

<p>与链表的倒数第K个节点类似，只不过在得到倒数第K个节点之后，将该节点删除。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">       dummy.next = head;</span><br><span class="line">       <span class="comment">// 先利用双指针找到倒数第N个节点</span></span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> dummy;</span><br><span class="line">       <span class="comment">// p1 先走n步</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">           p1 = p1.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">p2</span> <span class="operator">=</span> dummy;</span><br><span class="line">       <span class="comment">// 再一起走</span></span><br><span class="line">       <span class="keyword">while</span> (p1 != <span class="literal">null</span>)&#123;</span><br><span class="line">           p2 = p2.next;</span><br><span class="line">           p1 = p1.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 现在p2指的节点就是倒数第N个节点</span></span><br><span class="line">       <span class="comment">// 开始删除p2节点</span></span><br><span class="line">       p2.next = p2.next.next;</span><br><span class="line">       <span class="keyword">return</span> dummy.next;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>环形链表</title>
    <url>/2023/06/19/00.%E7%AE%97%E6%B3%95/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306261740749.jpeg" alt="a large body of water surrounded by rocks"></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表的头节点 head ，判断链表中是否有环。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。</p>
<p>如果链表中存在环 ，则返回 true 。 否则，返回 false 。</p>
<p>示例 1：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306191021477.png" alt="img"></p>
<p>输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1<br>输出：true<br>解释：链表中有一个环，其尾部连接到第二个节点。<br>示例 2：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306191021584.png" alt="img"></p>
<p>输入：head &#x3D; [1,2], pos &#x3D; 0<br>输出：true<br>解释：链表中有一个环，其尾部连接到第一个节点。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>跟[链表的中间结点]类似，使用快慢指针：</p>
<p>slow前进一步，fast前进两步，如果fast最终遇到了空指针，则说明链表中没有环；</p>
<p>如果fast和slow最终相遇了，证明fast超过了slow一圈，说明链表有环。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>leetcode</tag>
        <tag>双指针</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>环形链表</title>
    <url>/2023/06/19/00.%E7%AE%97%E6%B3%95/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E7%9A%84%E8%B5%B7%E7%82%B9/</url>
    <content><![CDATA[<h1 id="环形链表的起点"><a href="#环形链表的起点" class="headerlink" title="环形链表的起点"></a>环形链表的起点</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306261740864.jpeg" alt="a view of a mountain range with clouds in the sky"></p>
<p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p>
<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>
<p><strong>不允许修改</strong> 链表。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306201021677.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306201021030.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：返回索引为 0 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">         <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">       <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">           fast = fast.next.next;</span><br><span class="line">           slow = slow.next;</span><br><span class="line">           <span class="keyword">if</span> (fast == slow)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// fast 遇到空指针说明没有环</span></span><br><span class="line">       <span class="keyword">if</span> (fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 将慢指针指向head节点，重新开始单步走，当相交的时候，就是环的起点。</span></span><br><span class="line">       slow = head;</span><br><span class="line">       <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">           fast = fast.next;</span><br><span class="line">           slow = slow.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> slow;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>我们假设快慢指针相遇时，慢指针 <code>slow</code> 走了 <code>k</code> 步，那么快指针 <code>fast</code> 一定走了 <code>2k</code> 步：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306201021286.jpeg" alt="img"></p>
<p><code>fast</code> 一定比 <code>slow</code> 多走了 <code>k</code> 步，这多走的 <code>k</code> 步其实就是 <code>fast</code> 指针在环里转圈圈，所以 <code>k</code> 的值就是环长度的「整数倍」。</p>
<p>假设相遇点距环的起点的距离为 <code>m</code>，那么结合上图的 <code>slow</code> 指针，环的起点距头结点 <code>head</code> 的距离为 <code>k - m</code>，也就是说如果从 <code>head</code> 前进 <code>k - m</code> 步就能到达环起点。</p>
<p>巧的是，如果从相遇点继续前进 <code>k - m</code> 步，也恰好到达环起点。因为结合上图的 <code>fast</code> 指针，从相遇点开始走k步可以转回到相遇点，那走 <code>k - m</code> 步肯定就走到环起点了：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306201021309.jpeg" alt="img"></p>
<p>所以，只要我们把快慢指针中的任一个重新指向 <code>head</code>，然后两个指针同速前进，<code>k - m</code> 步后一定会相遇，相遇之处就是环的起点了</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>leetcode</tag>
        <tag>双指针</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>装满杯子需要的最短总时长</title>
    <url>/2023/06/28/00.%E7%AE%97%E6%B3%95/%E8%A3%85%E6%BB%A1%E6%9D%AF%E5%AD%90%E9%9C%80%E8%A6%81%E7%9A%84%E6%9C%80%E7%9F%AD%E6%80%BB%E6%97%B6%E9%95%BF/</url>
    <content><![CDATA[<h1 id="装满杯子需要的最短总时长"><a href="#装满杯子需要的最短总时长" class="headerlink" title="装满杯子需要的最短总时长"></a>装满杯子需要的最短总时长</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306281551762.jpeg" alt="a person standing at the entrance to a cave"></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>现有一台饮水机，可以制备冷水、温水和热水。每秒钟，可以装满 <code>2</code> 杯 <strong>不同</strong> 类型的水或者 <code>1</code> 杯任意类型的水。</p>
<p>给你一个下标从 <strong>0</strong> 开始、长度为 <code>3</code> 的整数数组 <code>amount</code> ，其中 <code>amount[0]</code>、<code>amount[1]</code> 和 <code>amount[2]</code> 分别表示需要装满冷水、温水和热水的杯子数量。返回装满所有杯子所需的 <strong>最少</strong> 秒数。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：amount = [1,4,2]</span><br><span class="line">输出：4</span><br><span class="line">解释：下面给出一种方案：</span><br><span class="line">第 1 秒：装满一杯冷水和一杯温水。</span><br><span class="line">第 2 秒：装满一杯温水和一杯热水。</span><br><span class="line">第 3 秒：装满一杯温水和一杯热水。</span><br><span class="line">第 4 秒：装满一杯温水。</span><br><span class="line">可以证明最少需要 4 秒才能装满所有杯子。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：amount = [5,4,4]</span><br><span class="line">输出：7</span><br><span class="line">解释：下面给出一种方案：</span><br><span class="line">第 1 秒：装满一杯冷水和一杯热水。</span><br><span class="line">第 2 秒：装满一杯冷水和一杯温水。</span><br><span class="line">第 3 秒：装满一杯冷水和一杯温水。</span><br><span class="line">第 4 秒：装满一杯温水和一杯热水。</span><br><span class="line">第 5 秒：装满一杯冷水和一杯热水。</span><br><span class="line">第 6 秒：装满一杯冷水和一杯温水。</span><br><span class="line">第 7 秒：装满一杯热水。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：amount = [5,0,0]</span><br><span class="line">输出：5</span><br><span class="line">解释：每秒装满一杯冷水。</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>排序+递归；</p>
<p>考虑到水种类只有3，且每种水数据范围只有100，可以使用递归；</p>
<p>为了尽可能的凑成多的对数，我们可以每次取剩余数量最多且不为 <code>0</code> 的两类水进行成组（因此每次处理前需要先对当前 <code>amount</code> 进行排序），直到没有水剩余，或只有一类水的剩余数据量不为 <code>0</code>（剩下的水只能独自生成）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fillCups</span><span class="params">(<span class="type">int</span>[] amount)</span> &#123;</span><br><span class="line">      Arrays.sort(amount);</span><br><span class="line">      <span class="keyword">if</span> (amount[<span class="number">1</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> amount[<span class="number">2</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      amount[<span class="number">1</span>] --;</span><br><span class="line">      amount[<span class="number">2</span>] --;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span> + fillCups(amount);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>链表的中间结点</title>
    <url>/2023/06/19/00.%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9/</url>
    <content><![CDATA[<h1 id="链表的中间结点"><a href="#链表的中间结点" class="headerlink" title="链表的中间结点"></a>链表的中间结点</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306260929210.jpeg" alt="img"></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给你单链表的头结点 <code>head</code> ，请你找出并返回链表的中间结点。</p>
<p>如果有两个中间结点，则返回第二个中间结点。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306191007092.jpeg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[3,4,5]</span><br><span class="line">解释：链表只有一个中间结点，值为 3 。</span><br></pre></td></tr></table></figure>

<p>如果中间两个结点，返回第二个。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>用快慢指针，慢指针走一步，快指针走两步。当快指针走到终点的时候，慢指针正好指在了链表的中点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ListNode <span class="title function_">middleNode</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 慢指针走一步，快指针走两步</span></span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>leetcode</tag>
        <tag>双指针</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>链表相交</title>
    <url>/2023/06/25/00.%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4/</url>
    <content><![CDATA[<h1 id="链表相交"><a href="#链表相交" class="headerlink" title="链表相交"></a>链表相交</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p>
<p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p>
<p><a href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306250944935.png" alt="img"></a></p>
<p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p>
<p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p>
<p><strong>自定义评测：</strong></p>
<p><strong>评测系统</strong> 的输入如下（你设计的程序 <strong>不适用</strong> 此输入）：</p>
<ul>
<li><code>intersectVal</code> - 相交的起始节点的值。如果不存在相交节点，这一值为 <code>0</code></li>
<li><code>listA</code> - 第一个链表</li>
<li><code>listB</code> - 第二个链表</li>
<li><code>skipA</code> - 在 <code>listA</code> 中（从头节点开始）跳到交叉节点的节点数</li>
<li><code>skipB</code> - 在 <code>listB</code> 中（从头节点开始）跳到交叉节点的节点数</li>
</ul>
<p>评测系统将根据这些输入创建链式数据结构，并将两个头节点 <code>headA</code> 和 <code>headB</code> 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 <strong>视作正确答案</strong> 。</p>
<p><strong>示例 1：</strong></p>
<p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png"><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306250944565.png" alt="img"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">输出：Intersected at &#x27;8&#x27;</span><br><span class="line">解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。</span><br><span class="line">在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br><span class="line">— 请注意相交节点的值不为 1，因为在链表 A 和链表 B 之中值为 1 的节点 (A 中第二个节点和 B 中第三个节点) 是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 A 和链表 B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点) 在内存中指向相同的位置。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png"><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306250944586.png" alt="img"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</span><br><span class="line">输出：Intersected at &#x27;2&#x27;</span><br><span class="line">解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [1,9,1,2,4]，链表 B 为 [3,2,4]。</span><br><span class="line">在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</span><br></pre></td></tr></table></figure>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可以使用HashSet，记录一个链表的所有节点，然后和另外一个链表对比，如果有一样的话，就返回该节点。但是需要额外的空间。</p>
<p>使用双指针：</p>
<p>但是两个链表的长度可能不同，两个链表之间的节点无法对应，那么如果使用两个指针，p1和p2分别在两个链表上前进的话，并不能同时走到公共节点上，也就是无法获取相交节点c1.</p>
<p>所以，可以让p1遍历完链表A之后，再遍历链表B，p2遍历完链表B之后开始遍历链表A，这样相当于两个链表连接在了一起：<img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306250947411.jpeg" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> headA, p2 = headB;</span><br><span class="line">        <span class="keyword">while</span> (p1 != p2)&#123;</span><br><span class="line">            <span class="comment">// p1 走一步，如果走到A的末尾，转到B链表</span></span><br><span class="line">            <span class="keyword">if</span> (p1 == <span class="literal">null</span>)&#123;</span><br><span class="line">                p1 = headB;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 如果不为空的话，一直走</span></span><br><span class="line">                p1 = p1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p2 == <span class="literal">null</span>)&#123;</span><br><span class="line">                p2 = headA;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p2 = p2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>leetcode</tag>
        <tag>双指针</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录模式</title>
    <url>/2023/08/04/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308041726286.jpeg" alt="a person standing on top of a cliff"></p>
<h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>备忘录模式</strong>是一种行为设计模式， 允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308041714084.png" alt="备忘录设计模式"></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假如你正在开发一款文字编辑器应用程序。 除了简单的文字编辑功能外， 编辑器中还要有设置文本格式和插入内嵌图片等功能。</p>
<p>后来， 你决定让用户能撤销施加在文本上的任何操作。 这项功能在过去几年里变得十分普遍， 因此用户期待任何程序都有这项功能。 你选择采用直接的方式来实现该功能： 程序在执行任何操作前会记录所有的对象状态， 并将其保存下来。 当用户此后需要撤销某个操作时， 程序将从历史记录中获取最近的快照， 然后使用它来恢复所有对象的状态。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308041714637.png" alt="在编辑器中撤销操作"></p>
<p>程序在执行操作前保存所有对象的状态快照， 稍后可通过快照将对象恢复到之前的状态。</p>
<p>让我们来思考一下这些状态快照。 首先， 到底该如何生成一个快照呢？ 很可能你会需要遍历对象的所有成员变量并将其数值复制保存。 但只有当对象对其内容没有严格访问权限限制的情况下， 你才能使用该方式。 不过很遗憾， 绝大部分对象会使用私有成员变量来存储重要数据， 这样别人就无法轻易查看其中的内容。</p>
<p>现在我们暂时忽略这个问题， 假设对象都像嬉皮士一样： 喜欢开放式的关系并会公开其所有状态。 尽管这种方式能够解决当前问题， 让你可随时生成对象的状态快照， 但这种方式仍存在一些严重问题。 未来你可能会添加或删除一些成员变量。 这听上去很简单， 但需要对负责复制受影响对象状态的类进行更改。</p>
<p><img src="https://refactoringguru.cn/images/patterns/diagrams/memento/problem2-zh.png" alt="如何复制对象的私有状态？"></p>
<p>还有更多问题。 让我们来考虑编辑器 （Editor） 状态的实际 “快照”， 它需要包含哪些数据？ 至少必须包含实际的文本、 光标坐标和当前滚动条位置等。 你需要收集这些数据并将其放入特定容器中， 才能生成快照。</p>
<p>你很可能会将大量的容器对象存储在历史记录列表中。 这样一来， 容器最终大概率会成为同一个类的对象。 这个类中几乎没有任何方法， 但有许多与编辑器状态一一对应的成员变量。 为了让其他对象能保存或读取快照， 你很可能需要将快照的成员变量设为公有。 无论这些状态是否私有， 其都将暴露一切编辑器状态。 其他类会对快照类的每个小改动产生依赖， 除非这些改动仅存在于私有成员变量或方法中， 而不会影响外部类。</p>
<p>我们似乎走进了一条死胡同： 要么会暴露类的所有内部细节而使其过于脆弱； 要么会限制对其状态的访问权限而无法生成快照。 那么， 我们还有其他方式来实现 “撤销” 功能吗？</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我们刚才遇到的所有问题都是封装 “破损” 造成的。 一些对象试图超出其职责范围的工作。 由于在执行某些行为时需要获取数据， 所以它们侵入了其他对象的私有空间， 而不是让这些对象来完成实际的工作。</p>
<p>备忘录模式将创建状态快照 （Snapshot） 的工作委派给实际状态的拥有者<em>原发器</em> （Originator） 对象。 这样其他对象就不再需要从 “外部” 复制编辑器状态了， 编辑器类拥有其状态的完全访问权， 因此可以自行生成快照。</p>
<p>模式建议将对象状态的副本存储在一个名为<em>备忘录</em> （Memento） 的特殊对象中。 除了创建备忘录的对象外， 任何对象都不能访问备忘录的内容。 其他对象必须使用受限接口与备忘录进行交互， 它们可以获取快照的元数据 （创建时间和操作名称等）， 但不能获取快照中原始对象的状态。</p>
<p><img src="https://refactoringguru.cn/images/patterns/diagrams/memento/solution-zh.png" alt="原发器拥有对备忘录的完全权限，负责人则只能访问元数据"></p>
<p>原发器拥有对备忘录的完全访问权限， 负责人则只能访问元数据。</p>
<p>这种限制策略允许你将备忘录保存在通常被称为<em>负责人</em> （Caretakers） 的对象中。 由于负责人仅通过受限接口与备忘录互动， 故其无法修改存储在备忘录内部的状态。 同时， 原发器拥有对备忘录所有成员的访问权限， 从而能随时恢复其以前的状态。</p>
<p>在文字编辑器的示例中， 我们可以创建一个独立的历史 （History） 类作为负责人。 编辑器每次执行操作前， 存储在负责人中的备忘录栈都会生长。 你甚至可以在应用的 UI 中渲染该栈， 为用户显示之前的操作历史。</p>
<p>当用户触发撤销操作时， 历史类将从栈中取回最近的备忘录， 并将其传递给编辑器以请求进行回滚。 由于编辑器拥有对备忘录的完全访问权限， 因此它可以使用从备忘录中获取的数值来替换自身的状态。</p>
<h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p><img src="https://refactoringguru.cn/images/patterns/diagrams/memento/structure1.png" alt="基于嵌套类的备忘录"></p>
<ol>
<li><strong>原发器</strong> （Originator） 类可以生成自身状态的快照， 也可以在需要时通过快照恢复自身状态。</li>
<li><strong>备忘录</strong> （Memento） 是原发器状态快照的值对象 （value object）。 通常做法是将备忘录设为不可变的， 并通过构造函数一次性传递数据。</li>
<li><strong>负责人</strong> （Caretaker） 仅知道 “何时” 和 “为何” 捕捉原发器的状态， 以及何时恢复状态。负责人通过保存备忘录栈来记录原发器的历史状态。 当原发器需要回溯历史状态时， 负责人将从栈中获取最顶部的备忘录， 并将其传递给原发器的恢复 （restoration） 方法。</li>
<li>在该实现方法中， 备忘录类将被嵌套在原发器中。 这样原发器就可访问备忘录的成员变量和方法， 即使这些方法被声明为私有。 另一方面， 负责人对于备忘录的成员变量和方法的访问权限非常有限： 它们只能在栈中保存备忘录， 而不能修改其状态。</li>
</ol>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><p>以合同状态为例：</p>
<ul>
<li>草稿</li>
<li>执行</li>
<li>到期</li>
</ul>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308041717579.png"></p>
<h3 id="备忘录-一个对象"><a href="#备忘录-一个对象" class="headerlink" title="备忘录-一个对象"></a>备忘录-一个对象</h3><p>1.备忘录对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Memento</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态（可以是一个对象，也可以是一个属性）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>记录者</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:记录者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Originator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存状态到备忘录对象中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">createMemento</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Memento</span>(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 恢复备忘录中保存的状态</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> memento</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restoreMemento</span><span class="params">(Memento memento)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = memento.getState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>备忘录管理者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:备忘录管理者(负责人)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Caretaker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存备忘录对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> memento</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemento</span><span class="params">(Memento memento)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取备忘录对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">getMemento</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>4.测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Originator</span> <span class="variable">originator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Originator</span>();</span><br><span class="line">        <span class="type">Caretaker</span> <span class="variable">caretaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Caretaker</span>();</span><br><span class="line">        <span class="comment">// 设置初始状态</span></span><br><span class="line">        originator.setState(<span class="string">&quot;草稿&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;初始状态: &quot;</span> + originator.getState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存状态</span></span><br><span class="line">        caretaker.setMemento(originator.createMemento());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改状态</span></span><br><span class="line">        originator.setState(<span class="string">&quot;执行&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改后的状态: &quot;</span> + originator.getState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 恢复状态</span></span><br><span class="line">        originator.restoreMemento(caretaker.getMemento());</span><br><span class="line">        System.out.println(<span class="string">&quot;恢复后的状态: &quot;</span> + originator.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始状态: 草稿</span><br><span class="line">修改后的状态: 执行</span><br><span class="line">恢复后的状态: 草稿</span><br></pre></td></tr></table></figure>

<h3 id="备忘录：多个对象"><a href="#备忘录：多个对象" class="headerlink" title="备忘录：多个对象"></a>备忘录：多个对象</h3><p>修改备忘录管理器代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:备忘录管理者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Caretaker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备忘录可以存多个状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Memento&gt; mementoList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存备忘录对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> memento</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemento</span><span class="params">(Memento memento)</span> &#123;</span><br><span class="line">        mementoList.add(memento);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 索取备忘录对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">getMemento</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Memento</span> <span class="variable">memento</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (mementoList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            memento = mementoList.get(mementoList.size() - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//恢复后移除这个状态</span></span><br><span class="line">            mementoList.remove(mementoList.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>.测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        com.cong.yanmo.behaviormodel.memo.manyState.<span class="type">Caretaker</span> <span class="variable">caretaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Caretaker</span>();</span><br><span class="line">        <span class="comment">//创建原发器，设置状态</span></span><br><span class="line">        <span class="type">Originator</span> <span class="variable">originator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Originator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//管理者使用备忘录记录状态</span></span><br><span class="line">        originator.setState(<span class="string">&quot;草稿&quot;</span>);</span><br><span class="line">        caretaker.setMemento(originator.createMemento());</span><br><span class="line"></span><br><span class="line">        originator.setState(<span class="string">&quot;执行&quot;</span>);</span><br><span class="line">        caretaker.setMemento(originator.createMemento());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改原发器的状态</span></span><br><span class="line">        originator.setState(<span class="string">&quot;到期&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前合同状态：&quot;</span> + originator.getState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//恢复备忘录中存的状态</span></span><br><span class="line">        originator.restoreMemento(caretaker.getMemento());</span><br><span class="line">        System.out.println(<span class="string">&quot;回退上一合同状态：&quot;</span> + originator.getState());</span><br><span class="line"></span><br><span class="line">        originator.restoreMemento(caretaker.getMemento());</span><br><span class="line">        System.out.println(<span class="string">&quot;回退上一合同状态：&quot;</span> + originator.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当前合同状态：到期</span><br><span class="line">回退上一合同状态：执行</span><br><span class="line">回退上一合同状态：草稿</span><br></pre></td></tr></table></figure>

<h2 id="适合的应用场景"><a href="#适合的应用场景" class="headerlink" title="适合的应用场景"></a>适合的应用场景</h2><p> <strong>当你需要创建对象状态快照来恢复其之前的状态时****，</strong> <strong>可以使用备忘录模式****。</strong></p>
<p>备忘录模式允许你复制对象中的全部状态 （包括私有成员变量）， 并将其独立于对象进行保存。 尽管大部分人因为 “撤销” 这个用例才记得该模式， 但其实它在处理事务 （比如需要在出现错误时回滚一个操作） 的过程中也必不可少。</p>
<p><strong>当直接访问对象的成员变量****、</strong> <strong>获取器或设置器将导致封装被突破时****，</strong> <strong>可以使用该模式****。</strong></p>
<p> 备忘录让对象自行负责创建其状态的快照。 任何其他对象都不能读取快照， 这有效地保障了数据的安全性。</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol>
<li><p>确定担任原发器角色的类。 重要的是明确程序使用的一个原发器中心对象， 还是多个较小的对象。</p>
</li>
<li><p>创建备忘录类。 逐一声明对应每个原发器成员变量的备忘录成员变量。</p>
</li>
<li><p>将备忘录类设为不可变。 备忘录只能通过构造函数一次性接收数据。 该类中不能包含设置器。</p>
</li>
<li><p>如果你所使用的编程语言支持嵌套类， 则可将备忘录嵌套在原发器中； 如果不支持， 那么你可从备忘录类中抽取一个空接口， 然后让其他所有对象通过接口来引用备忘录。 你可在该接口中添加一些元数据操作， 但不能暴露原发器的状态。</p>
</li>
<li><p>在原发器中添加一个创建备忘录的方法。 原发器必须通过备忘录构造函数的一个或多个实际参数来将自身状态传递给备忘录。</p>
<p>该方法返回结果的类型必须是你在上一步中抽取的接口 （如果你已经抽取了）。 实际上， 创建备忘录的方法必须直接与备忘录类进行交互。</p>
</li>
<li><p>在原发器类中添加一个用于恢复自身状态的方法。 该方法接受备忘录对象作为参数。 如果你在之前的步骤中抽取了接口， 那么可将接口作为参数的类型。 在这种情况下， 你需要将输入对象强制转换为备忘录， 因为原发器需要拥有对该对象的完全访问权限。</p>
</li>
<li><p>无论负责人是命令对象、 历史记录或其他完全不同的东西， 它都必须要知道何时向原发器请求新的备忘录、 如何存储备忘录以及何时使用特定备忘录来对原发器进行恢复。</p>
</li>
<li><p>负责人与原发器之间的连接可以移动到备忘录类中。 在本例中， 每个备忘录都必须与创建自己的原发器相连接。 恢复方法也可以移动到备忘录类中， 但只有当备忘录类嵌套在原发器中， 或者原发器类提供了足够多的设置器并可对其状态进行重写时， 这种方式才能实现。</p>
</li>
</ol>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：</p>
<ul>
<li>你可以在不破坏对象封装情况的前提下创建对象状态快照。</li>
<li>你可以通过让负责人维护原发器状态历史记录来简化原发器代码。</li>
</ul>
<p>缺点：</p>
<ul>
<li>如果客户端过于频繁地创建备忘录， 程序将消耗大量内存。</li>
<li>负责人必须完整跟踪原发器的生命周期， 这样才能销毁弃用的备忘录。</li>
<li>绝大部分动态编程语言 （例如 PHP、 Python 和 JavaScript） 不能确保备忘录中的状态不被修改。</li>
</ul>
<h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul>
<li>你可以同时使用<a href="https://refactoringguru.cn/design-patterns/command">命令模式</a>和<a href="https://refactoringguru.cn/design-patterns/memento">备忘录模式</a>来实现 “撤销”。 在这种情况下， 命令用于对目标对象执行各种不同的操作， 备忘录用来保存一条命令执行前该对象的状态。</li>
<li>你可以同时使用<a href="https://refactoringguru.cn/design-patterns/memento">备忘录</a>和<a href="https://refactoringguru.cn/design-patterns/iterator">迭代器模式</a>来获取当前迭代器的状态， 并且在需要的时候进行回滚。</li>
<li>有时候<a href="https://refactoringguru.cn/design-patterns/prototype">原型模式</a>可以作为<a href="https://refactoringguru.cn/design-patterns/memento">备忘录</a>的一个简化版本， 其条件是你需要在历史记录中存储的对象的状态比较简单， 不需要链接其他外部资源， 或者链接可以方便地重建。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://refactoringguru.cn/design-patterns/memento">备忘录模式</a></p>
<p><a href="https://blog.csdn.net/qq_42665745/article/details/128312654">备忘录模式</a></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>备忘录模式</tag>
      </tags>
  </entry>
  <entry>
    <title>责任链模式</title>
    <url>/2023/08/04/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308041725988.jpeg" alt="a view of a valley with mountains in the background"></p>
<h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>责任链模式</strong>是一种行为设计模式， 允许你将请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308041623684.png" alt="责任链设计模式"></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假如你现在正在开发一个在线订购系统。你希望对系统访问进行限制，只允许认证用户创建订单。此外，拥有管理权限的用户也拥有所有订单的完全访问权限。</p>
<p>简单规划后， 你会意识到这些检查必须依次进行。 只要接收到包含用户凭据的请求， 应用程序就可尝试对进入系统的用户进行认证。 但如果由于用户凭据不正确而导致认证失败， 那就没有必要进行后续检查了。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308041625400.png" alt="责任链解决的问题"></p>
<p>请求必须经过一系列检查后才能由订购系统来处理。</p>
<p>在接下来的几个月里， 你实现了后续的几个检查步骤。</p>
<ul>
<li>一位同事认为直接将原始数据传递给订购系统存在安全隐患。 因此你新增了额外的验证步骤来清理请求中的数据。</li>
<li>过了一段时间， 有人注意到系统无法抵御暴力密码破解方式的攻击。 为了防范这种情况， 你立刻添加了一个检查步骤来过滤来自同一 IP 地址的重复错误请求。</li>
<li>又有人提议你可以对包含同样数据的重复请求返回缓存中的结果， 从而提高系统响应速度。 因此， 你新增了一个检查步骤， 确保只有没有满足条件的缓存结果时请求才能通过并被发送给系统。</li>
</ul>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308041626151.png" alt="每增加一个检查步骤，程序都变得更加臃肿、混乱和丑陋"></p>
<p>代码变得越来越多， 也越来越混乱。</p>
<p>检查代码本来就已经混乱不堪， 而每次新增功能都会使其更加臃肿。 修改某个检查步骤有时会影响其他的检查步骤。 最糟糕的是， 当你希望复用这些检查步骤来保护其他系统组件时， 你只能复制部分代码， 因为这些组件只需部分而非全部的检查步骤。</p>
<p>系统会变得让人非常费解， 而且其维护成本也会激增。 你在艰难地和这些代码共处一段时间后， 有一天终于决定对整个系统进行重构。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>与许多其他行为设计模式一样， <strong>责任链</strong>会将特定行为转换为被称作<em>处理者</em>的独立对象。 在上述示例中， 每个检查步骤都可被抽取为仅有单个方法的类， 并执行检查操作。 请求及其数据则会被作为参数传递给该方法。</p>
<p>模式建议你将这些处理者连成一条链。 链上的每个处理者都有一个成员变量来保存对于下一处理者的引用。 除了处理请求外， 处理者还负责沿着链传递请求。 请求会在链上移动， 直至所有处理者都有机会对其进行处理。</p>
<p>最重要的是： 处理者可以决定不再沿着链传递请求， 这可高效地取消所有后续处理步骤。</p>
<p>在我们的订购系统示例中， 处理者会在进行请求处理工作后决定是否继续沿着链传递请求。 如果请求中包含正确的数据， 所有处理者都将执行自己的主要行为， 无论该行为是身份验证还是数据缓存。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308041627987.png" alt="处理者依次排列，组成一条链"></p>
<p>处理者依次排列， 组成一条链。</p>
<p>不过还有一种稍微不同的方式 （也是更经典一种）， 那就是处理者接收到请求后自行决定是否能够对其进行处理。 如果自己能够处理， 处理者就不再继续传递请求。 因此在这种情况下， 每个请求要么最多有一个处理者对其进行处理， 要么没有任何处理者对其进行处理。 在处理图形用户界面元素栈中的事件时， 这种方式非常常见。</p>
<p>例如， 当用户点击按钮时， 按钮产生的事件将沿着 GUI 元素链进行传递， 最开始是按钮的容器 （如窗体或面板）， 直至应用程序主窗口。 链上第一个能处理该事件的元素会对其进行处理。 此外， 该例还有另一个值得我们关注的地方： 它表明我们总能从对象树中抽取出链来。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308041628818.png" alt="对象树的枝干可以组成一条链"></p>
<p>所有处理者类均实现同一接口是关键所在。 每个具体处理者仅关心下一个包含 <code>execute</code>执行方法的处理者。 这样一来， 你就可以在运行时使用不同的处理者来创建链， 而无需将相关代码与处理者的具体类进行耦合。</p>
<h2 id="真实世界对比"><a href="#真实世界对比" class="headerlink" title="真实世界对比"></a>真实世界对比</h2><p>最近， 你刚为自己的电脑购买并安装了一个新的硬件设备。 身为一名极客， 你显然在电脑上安装了多个操作系统， 所以你会试着启动所有操作系统来确认其是否支持新的硬件设备。 Windows 检测到了该硬件设备并对其进行了自动启用。 但是你喜爱的 Linux 系统并不支持新硬件设备。 抱着最后一点希望， 你决定拨打包装盒上的技术支持电话。</p>
<p>首先你会听到自动回复器的机器合成语音， 它提供了针对各种问题的九个常用解决方案， 但其中没有一个与你遇到的问题相关。 过了一会儿， 机器人将你转接到人工接听人员处。</p>
<p>这位接听人员同样无法提供任何具体的解决方案。 他不断地引用手册中冗长的内容， 并不会仔细聆听你的回应。 在第 10 次听到 “你是否关闭计算机后重新启动呢？” 这句话后， 你要求与一位真正的工程师通话。</p>
<p>最后， 接听人员将你的电话转接给了工程师， 他或许正缩在某幢办公大楼的阴暗地下室中， 坐在他所深爱的服务器机房里， 焦躁不安地期待着同一名真人交流。 工程师告诉了你新硬件设备驱动程序的下载网址， 以及如何在 Linux 系统上进行安装。 问题终于解决了！ 你挂断了电话， 满心欢喜。</p>
<h2 id="责任链模式结构"><a href="#责任链模式结构" class="headerlink" title="责任链模式结构"></a>责任链模式结构</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308041630382.png" alt="责任链设计模式的结构"></p>
<ol>
<li><p><strong>处理者</strong> （Handler） 声明了所有具体处理者的通用接口。 该接口通常仅包含单个方法用于请求处理， 但有时其还会包含一个设置链上下个处理者的方法。</p>
</li>
<li><p><strong>基础处理者</strong> （Base Handler） 是一个可选的类， 你可以将所有处理者共用的样本代码放置在其中。</p>
<p>通常情况下， 该类中定义了一个保存对于下个处理者引用的成员变量。 客户端可通过将处理者传递给上个处理者的构造函数或设定方法来创建链。 该类还可以实现默认的处理行为： 确定下个处理者存在后再将请求传递给它。</p>
</li>
<li><p><strong>具体处理者</strong> （Concrete Handlers） 包含处理请求的实际代码。 每个处理者接收到请求后， 都必须决定是否进行处理， 以及是否沿着链传递请求。</p>
<p>处理者通常是独立且不可变的， 需要通过构造函数一次性地获得所有必要地数据。</p>
</li>
<li><p><strong>客户端</strong> （Client） 可根据程序逻辑一次性或者动态地生成链。 值得注意的是， 请求可发送给链上的任意一个处理者， 而非必须是第一个处理者。</p>
</li>
</ol>
<h2 id="责任链模式适用应用场景"><a href="#责任链模式适用应用场景" class="headerlink" title="责任链模式适用应用场景"></a>责任链模式适用应用场景</h2><p><strong>当程序需要使用不同方式处理不同种类请求****，</strong> <strong>而且请求类型和顺序预先未知时****，</strong> <strong>可以使用责任链模式****。</strong></p>
<p>该模式能将多个处理者连接成一条链。 接收到请求后， 它会 “询问” 每个处理者是否能够对其进行处理。 这样所有处理者都有机会来处理请求。</p>
<p><strong>当必须按顺序执行多个处理者时****，</strong> <strong>可以使用该模式****。</strong></p>
<p>无论你以何种顺序将处理者连接成一条链， 所有请求都会严格按照顺序通过链上的处理者。</p>
<p> <strong>如果所需处理者及其顺序必须在运行时进行改变****，</strong> <strong>可以使用责任链模式****。</strong></p>
<p>如果在处理者类中有对引用成员变量的设定方法， 你将能动态地插入和移除处理者， 或者改变其顺序。</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol>
<li><p>声明处理者接口并描述请求处理方法的签名。</p>
<p>确定客户端如何将请求数据传递给方法。 最灵活的方式是将请求转换为对象， 然后将其以参数的形式传递给处理函数。</p>
</li>
<li><p>为了在具体处理者中消除重复的样本代码， 你可以根据处理者接口创建抽象处理者基类。</p>
<p>该类需要有一个成员变量来存储指向链上下个处理者的引用。 你可以将其设置为不可变类。 但如果你打算在运行时对链进行改变， 则需要定义一个设定方法来修改引用成员变量的值。</p>
<p>为了使用方便， 你还可以实现处理方法的默认行为。 如果还有剩余对象， 该方法会将请求传递给下个对象。 具体处理者还能够通过调用父对象的方法来使用这一行为。</p>
</li>
<li><p>依次创建具体处理者子类并实现其处理方法。 每个处理者在接收到请求后都必须做出两个决定：</p>
<ul>
<li>是否自行处理这个请求。</li>
<li>是否将该请求沿着链进行传递。</li>
</ul>
</li>
<li><p>客户端可以自行组装链， 或者从其他对象处获得预先组装好的链。 在后一种情况下， 你必须实现工厂类以根据配置或环境设置来创建链。</p>
</li>
<li><p>客户端可以触发链中的任意处理者， 而不仅仅是第一个。 请求将通过链进行传递， 直至某个处理者拒绝继续传递， 或者请求到达链尾。</p>
</li>
<li><p>由于链的动态性， 客户端需要准备好处理以下情况：</p>
<ul>
<li>链中可能只有单个链接。</li>
<li>部分请求可能无法到达链尾。</li>
<li>其他请求可能直到链尾都未被处理。</li>
</ul>
</li>
</ol>
<h2 id="责任链模式优缺点"><a href="#责任链模式优缺点" class="headerlink" title="责任链模式优缺点"></a>责任链模式优缺点</h2><p>优点：</p>
<ul>
<li>可以控制请求处理的顺序。</li>
<li><em>单一职责原则</em>。 你可对发起操作和执行操作的类进行解耦。</li>
<li><em>开闭原则</em>。 你可以在不更改现有代码的情况下在程序中新增处理者。</li>
</ul>
<p>缺点：部分请求可能未被处理。</p>
<h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul>
<li><p><a href="https://refactoringguru.cn/design-patterns/chain-of-responsibility">责任链模式</a>、 <a href="https://refactoringguru.cn/design-patterns/command">命令模式</a>、 <a href="https://refactoringguru.cn/design-patterns/mediator">中介者模式</a>和<a href="https://refactoringguru.cn/design-patterns/observer">观察者模式</a>用于处理请求发送者和接收者之间的不同连接方式：</p>
<ul>
<li><em>责任链</em>按照顺序将请求动态传递给一系列的潜在接收者， 直至其中一名接收者对请求进行处理。</li>
<li><em>命令</em>在发送者和请求者之间建立单向连接。</li>
<li><em>中介者</em>清除了发送者和请求者之间的直接连接， 强制它们通过一个中介对象进行间接沟通。</li>
<li><em>观察者</em>允许接收者动态地订阅或取消接收请求。</li>
</ul>
</li>
<li><p><a href="https://refactoringguru.cn/design-patterns/chain-of-responsibility">责任链</a>通常和<a href="https://refactoringguru.cn/design-patterns/composite">组合模式</a>结合使用。 在这种情况下， 叶组件接收到请求后， 可以将请求沿包含全体父组件的链一直传递至对象树的底部。</p>
</li>
<li><p><a href="https://refactoringguru.cn/design-patterns/chain-of-responsibility">责任链</a>的管理者可使用<a href="https://refactoringguru.cn/design-patterns/command">命令模式</a>实现。 在这种情况下， 你可以对由请求代表的同一个上下文对象执行许多不同的操作。</p>
<p>还有另外一种实现方式， 那就是请求自身就是一个<em>命令</em>对象。 在这种情况下， 你可以对由一系列不同上下文连接而成的链执行相同的操作。</p>
</li>
<li><p><a href="https://refactoringguru.cn/design-patterns/chain-of-responsibility">责任链</a>和<a href="https://refactoringguru.cn/design-patterns/decorator">装饰模式</a>的类结构非常相似。 两者都依赖递归组合将需要执行的操作传递给一系列对象。 但是， 两者有几点重要的不同之处。</p>
<p><a href="https://refactoringguru.cn/design-patterns/chain-of-responsibility">责任链</a>的管理者可以相互独立地执行一切操作， 还可以随时停止传递请求。 另一方面， 各种<em>装饰</em>可以在遵循基本接口的情况下扩展对象的行为。 此外， 装饰无法中断请求的传递。</p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://refactoringguru.cn/design-patterns/chain-of-responsibility">责任链模式</a></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>责任链模式</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/2024/06/12/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/image-20240612163504378.png" alt="image-20240612163504378"></p>
<blockquote>
<p>转载：<a href="https://refactoringguru.cn/design-patterns/adapter">https://refactoringguru.cn/design-patterns/adapter</a></p>
</blockquote>
<p>亦称：封装器模式、Wrapper、Adapter</p>
<h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>适配器模式</strong>是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。</p>
<p><img src="https://refactoringguru.cn/images/patterns/content/adapter/adapter-zh.png?id=14fe558f1044c85e92ace3bc91a8c59f" alt="适配器设计模式"></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假如你正在开发一款股票市场监测程序， 它会从不同来源下载 XML 格式的股票数据， 然后向用户呈现出美观的图表。</p>
<p>在开发过程中， 你决定在程序中整合一个第三方智能分析函数库。 但是遇到了一个问题， 那就是分析函数库只兼容 JSON 格式的数据。</p>
<p><img src="https://refactoringguru.cn/images/patterns/diagrams/adapter/problem-zh.png?id=05b4229167bc0d74a095e38e419dd1ed" alt="整合分析函数库之前的程序结构"></p>
<p>你无法 “直接” 使用分析函数库， 因为它所需的输入数据格式与你的程序不兼容。</p>
<p>你可以修改程序库来支持 XML。 但是， 这可能需要修改部分依赖该程序库的现有代码。 甚至还有更糟糕的情况， 你可能根本没有程序库的源代码， 从而无法对其进行修改。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>你可以创建一个<em>适配器</em>。 这是一个特殊的对象， 能够转换对象接口， 使其能与其他对象进行交互。</p>
<p>适配器模式通过封装对象将复杂的转换过程隐藏于幕后。 被封装的对象甚至察觉不到适配器的存在。 例如， 你可以使用一个将所有数据转换为英制单位 （如英尺和英里） 的适配器封装运行于米和千米单位制中的对象。</p>
<p>适配器不仅可以转换不同格式的数据， 其还有助于采用不同接口的对象之间的合作。 它的运作方式如下：</p>
<ol>
<li>适配器实现与其中一个现有对象兼容的接口。</li>
<li>现有对象可以使用该接口安全地调用适配器方法。</li>
<li>适配器方法被调用后将以另一个对象兼容的格式和顺序将请求传递给该对象。</li>
</ol>
<p>有时你甚至可以创建一个双向适配器来实现双向转换调用。</p>
<p><img src="https://refactoringguru.cn/images/patterns/diagrams/adapter/solution-zh.png?id=52af7bf3841ac7f393ffb254675c4da2" alt="适配器解决方案"></p>
<p>让我们回到股票市场程序。 为了解决数据格式不兼容的问题， 你可以为分析函数库中的每个类创建将 XML 转换为 JSON 格式的适配器， 然后让客户端仅通过这些适配器来与函数库进行交流。 当某个适配器被调用时， 它会将传入的 XML 数据转换为 JSON 结构， 并将其传递给被封装分析对象的相应方法。</p>
<h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><p><img src="https://refactoringguru.cn/images/patterns/content/adapter/adapter-comic-1-zh.png?id=efe0a788204ad09ef2bbd40fe861b0ee" alt="适配器模式的示例"></p>
<p>出国旅行前后的旅行箱。</p>
<p>如果你是第一次从美国到欧洲旅行， 那么在给笔记本充电时可能会大吃一惊。 不同国家的电源插头和插座标准不同。 美国插头和德国插座不匹配。 同时提供美国标准插座和欧洲标准插头的电源适配器可以解决你的难题。</p>
<h2 id="适配器模式结构"><a href="#适配器模式结构" class="headerlink" title="适配器模式结构"></a>适配器模式结构</h2><h4 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h4><p>实现时使用了构成原则： 适配器实现了其中一个对象的接口， 并对另一个对象进行封装。 所有流行的编程语言都可以实现适配器。</p>
<p><img src="https://refactoringguru.cn/images/patterns/diagrams/adapter/structure-object-adapter.png?id=33dffbe3aece294162440c7ddd3d5d4f" alt="适配器设计模式的结构（对象适配器）"></p>
<ol>
<li><strong>客户端</strong> （Client） 是包含当前程序业务逻辑的类。</li>
<li><strong>客户端接口</strong> （Client Interface） 描述了其他类与客户端代码合作时必须遵循的协议。</li>
<li><strong>服务</strong> （Service） 中有一些功能类 （通常来自第三方或遗留系统）。 客户端与其接口不兼容， 因此无法直接调用其功能。</li>
<li><strong>适配器</strong> （Adapter） 是一个可以同时与客户端和服务交互的类： 它在实现客户端接口的同时封装了服务对象。 适配器接受客户端通过适配器接口发起的调用， 并将其转换为适用于被封装服务对象的调用。</li>
<li>客户端代码只需通过接口与适配器交互即可， 无需与具体的适配器类耦合。 因此， 你可以向程序中添加新类型的适配器而无需修改已有代码。 这在服务类的接口被更改或替换时很有用： 你无需修改客户端代码就可以创建新的适配器类。</li>
</ol>
<h4 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h4><p>这一实现使用了继承机制： 适配器同时继承两个对象的接口。 请注意， 这种方式仅能在支持多重继承的编程语言中实现， 例如 C++。</p>
<p><img src="https://refactoringguru.cn/images/patterns/diagrams/adapter/structure-class-adapter.png?id=e1c60240508146ed3b98ac562cc8e510" alt="适配器设计模式（类适配器）"></p>
<ol>
<li><strong>类适配器</strong>不需要封装任何对象， 因为它同时继承了客户端和服务的行为。 适配功能在重写的方法中完成。 最后生成的适配器可替代已有的客户端类进行使用。</li>
</ol>
<h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>下列<strong>适配器</strong>模式演示基于经典的 “方钉和圆孔” 问题。</p>
<p><img src="https://refactoringguru.cn/images/patterns/diagrams/adapter/example.png?id=9d2b6857ce256f2c669383ce4df3d0aa" alt="适配器模式结构的示例"></p>
<p>让方钉适配圆孔。</p>
<p>适配器假扮成一个圆钉 （Round­Peg）， 其半径等于方钉 （Square­Peg） 横截面对角线的一半 （即能够容纳方钉的最小外接圆的半径）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="适配器模式适合应用场景"><a href="#适配器模式适合应用场景" class="headerlink" title="适配器模式适合应用场景"></a>适配器模式适合应用场景</h2><p> 当你希望使用某个类， 但是其接口与其他代码不兼容时， 可以使用适配器类。</p>
<p> 适配器模式允许你创建一个中间层类， 其可作为代码与遗留类、 第三方类或提供怪异接口的类之间的转换器。</p>
<p> 如果您需要复用这样一些类， 他们处于同一个继承体系， 并且他们又有了额外的一些共同的方法， 但是这些共同的方法不是所有在这一继承体系中的子类所具有的共性。</p>
<p> 你可以扩展每个子类， 将缺少的功能添加到新的子类中。 但是， 你必须在所有新子类中重复添加这些代码， 这样会使得代码有<a href="https://refactoringguru.cn/smells/duplicate-code">坏味道</a>。</p>
<p>将缺失功能添加到一个适配器类中是一种优雅得多的解决方案。 然后你可以将缺少功能的对象封装在适配器中， 从而动态地获取所需功能。 如要这一点正常运作， 目标类必须要有通用接口， 适配器的成员变量应当遵循该通用接口。 这种方式同<a href="https://refactoringguru.cn/design-patterns/decorator">装饰</a>模式非常相似。</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol>
<li>确保至少有两个类的接口不兼容：<ul>
<li>一个无法修改 （通常是第三方、 遗留系统或者存在众多已有依赖的类） 的功能性<em>服务</em>类。</li>
<li>一个或多个将受益于使用服务类的<em>客户端</em>类。</li>
</ul>
</li>
<li>声明客户端接口， 描述客户端如何与服务交互。</li>
<li>创建遵循客户端接口的适配器类。 所有方法暂时都为空。</li>
<li>在适配器类中添加一个成员变量用于保存对于服务对象的引用。 通常情况下会通过构造函数对该成员变量进行初始化， 但有时在调用其方法时将该变量传递给适配器会更方便。</li>
<li>依次实现适配器类客户端接口的所有方法。 适配器会将实际工作委派给服务对象， 自身只负责接口或数据格式的转换。</li>
<li>客户端必须通过客户端接口使用适配器。 这样一来， 你就可以在不影响客户端代码的情况下修改或扩展适配器。</li>
</ol>
<h2 id="适配器模式优缺点"><a href="#适配器模式优缺点" class="headerlink" title="适配器模式优缺点"></a>适配器模式优缺点</h2><ul>
<li><p><em>单一职责原则</em>你可以将接口或数据转换代码从程序主要业务逻辑中分离。</p>
</li>
<li><p><em>开闭原则</em>。 只要客户端代码通过客户端接口与适配器进行交互， 你就能在不修改现有客户端代码的情况下在程序中添加新类型的适配器。</p>
</li>
<li><p>代码整体复杂度增加， 因为你需要新增一系列接口和类。 有时直接更改服务类使其与其他代码兼容会更简单。</p>
</li>
</ul>
<h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul>
<li><a href="https://refactoringguru.cn/design-patterns/bridge">桥接模式</a>通常会于开发前期进行设计， 使你能够将程序的各个部分独立开来以便开发。 另一方面， <a href="https://refactoringguru.cn/design-patterns/adapter">适配器模式</a>通常在已有程序中使用， 让相互不兼容的类能很好地合作。</li>
<li><a href="https://refactoringguru.cn/design-patterns/adapter">适配器</a>可以对已有对象的接口进行修改， <a href="https://refactoringguru.cn/design-patterns/decorator">装饰模式</a>则能在不改变对象接口的前提下强化对象功能。 此外， <em>装饰</em>还支持递归组合， <em>适配器</em>则无法实现。</li>
<li><a href="https://refactoringguru.cn/design-patterns/adapter">适配器</a>能为被封装对象提供不同的接口， <a href="https://refactoringguru.cn/design-patterns/proxy">代理模式</a>能为对象提供相同的接口， <a href="https://refactoringguru.cn/design-patterns/decorator">装饰</a>则能为对象提供加强的接口。</li>
<li><a href="https://refactoringguru.cn/design-patterns/facade">外观模式</a>为现有对象定义了一个新接口， <a href="https://refactoringguru.cn/design-patterns/adapter">适配器</a>则会试图运用已有的接口。 <em>适配器</em>通常只封装一个对象， <em>外观</em>通常会作用于整个对象子系统上。</li>
<li><a href="https://refactoringguru.cn/design-patterns/bridge">桥接</a>、 <a href="https://refactoringguru.cn/design-patterns/state">状态模式</a>和<a href="https://refactoringguru.cn/design-patterns/strategy">策略模式</a> （在某种程度上包括<a href="https://refactoringguru.cn/design-patterns/adapter">适配器</a>） 模式的接口非常相似。 实际上， 它们都基于<a href="https://refactoringguru.cn/design-patterns/composite">组合模式</a>——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>适配器模式</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo文章转换器</title>
    <url>/2023/06/19/02.%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/Hexo%E6%96%87%E7%AB%A0%E8%BD%AC%E6%8D%A2%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Hexo文章转换器"><a href="#Hexo文章转换器" class="headerlink" title="Hexo文章转换器"></a>Hexo文章转换器</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306261747053.jpeg" alt="a close up of a cell phone with a blurry background"></p>
<blockquote>
<p>Hexo系列文章：</p>
<ol>
<li><a href="https://yamonc.github.io/2023/06/13/%E4%BB%8E0%E5%88%B01%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%88%B0Github-Page/">从0到1部署博客系统到GitHub Page（0成本）</a></li>
<li><a href="https://yamonc.github.io/2023/06/13/hexo%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98/">hexo如何修改主题？</a></li>
<li><a href="https://yamonc.github.io/2023/06/13/hexo-Acrylic%E4%B8%BB%E9%A2%98%E9%9B%86%E6%88%90twikoo%E8%AF%84%E8%AE%BA/">hexo-Acrylic主题集成twikoo评论</a></li>
<li><a href="https://yamonc.github.io/2023/06/16/%E5%A6%82%E4%BD%95%E5%B0%86java%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe%E6%A0%BC%E5%BC%8F/">如何将JavaFX的java项目打包成exe格式</a></li>
</ol>
</blockquote>
<hr>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近将博客平台使用Hexo搭建在Github上，但是如果每次发布文章的话，都需要设置一下front-matter的内容：</p>
<p><a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a></p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306191043672.png" alt="image-20230619104358612"></p>
<p>感觉不太方便，所以想通过界面化的方式，将过程进行简化（要不，每次都手动在文章的开头写上—xxx—,太麻烦）。</p>
<p>基于此，本文通过界面化的方式，将文章进行格式化，通过代码的方式自动在文章开头插入markdown可识别的字符串。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306191046466.png" alt="image-20230619104639429"></p>
<p>使用该工具可以避免手动输入这些信息，而是通过界面化的方式进行配置：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306191047100.png" alt="image-20230619104743062"></p>
<h2 id="技术说明"><a href="#技术说明" class="headerlink" title="技术说明"></a>技术说明</h2><p>Java17（开发语言）、Java FX（Java界面工具，类似于java8的swing，现已不支持java8）、SceneBuilder（拖拽式界面工具）、exe4j（jar转exe工具）。</p>
<p>踩坑无数，尤其是将java转为exe的过程中，踩了一晚上吧。</p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>下载地址：</p>
<p><a href="https://gh.api.99988866.xyz/https://github.com/yamonc/hexoHelper/releases/download/V0.0.1/hexoHelper.exe">HexoHelper下载地址</a></p>
<p>下载好之后，无需安装过程，直接点击exe文件即可运行。</p>
<p>运行好之后，会出现[示例]中的界面。</p>
<h3 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h3><p>现在界面主要分为四个区域，从上到下以此为使用说明、选中文件区域、front-matter信息区域、功能区域。</p>
<p>这里主要讲解功能区域：</p>
<p>【上传文件】：点击上传文件按钮之后，选中待转换的markdown文件（没有front-matter信息的markdown文件）</p>
<p>【转换格式】：对已上传的文件进行格式转换，在文章头添加已经输入的front-matter信息。</p>
<p>【部署】：执行hexo clean、hexo g、hexo d一系列指令。</p>
<p>【一键部署】：对已上传的文件进行格式转换并执行hexo clean、hexo g、hexo d指令部署到对应平台上。</p>
<h3 id="使用流程说明"><a href="#使用流程说明" class="headerlink" title="使用流程说明"></a>使用流程说明</h3><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306191058659.png" alt="image-20230619105823619"></p>
<h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><p>转换文章之后，题目乱码。</p>
<p>不够灵活，鲁棒性不好。对输入增加限制。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>hexo</tag>
        <tag>开源项目</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo文章转换器II</title>
    <url>/2023/06/28/02.%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/Hexo%E6%96%87%E7%AB%A0%E8%BD%AC%E6%8D%A2%E5%99%A8II/</url>
    <content><![CDATA[<h1 id="Hexo文章转换器II"><a href="#Hexo文章转换器II" class="headerlink" title="Hexo文章转换器II"></a>Hexo文章转换器II</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306281711167.jpeg" alt="a view of a beach and a body of water"></p>
<blockquote>
<p>Hexo系列文章：</p>
<ol>
<li><a href="https://yamonc.github.io/2023/06/13/%E4%BB%8E0%E5%88%B01%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%88%B0Github-Page/">从0到1部署博客系统到GitHub Page（0成本）</a></li>
<li><a href="https://yamonc.github.io/2023/06/13/hexo%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98/">hexo如何修改主题？</a></li>
<li><a href="https://yamonc.github.io/2023/06/13/hexo-Acrylic%E4%B8%BB%E9%A2%98%E9%9B%86%E6%88%90twikoo%E8%AF%84%E8%AE%BA/">hexo-Acrylic主题集成twikoo评论</a></li>
<li><a href="https://yamonc.github.io/2023/06/16/%E5%A6%82%E4%BD%95%E5%B0%86java%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe%E6%A0%BC%E5%BC%8F/">如何将JavaFX的java项目打包成exe格式</a></li>
</ol>
</blockquote>
<hr>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>该工具可以帮助你在使用Hexo写博客的时候，将文章直接转换成为Hexo可识别并可展示在页面；</p>
<p>每次在写博客的时候，都需要手动在文章的开头添加Front-Matter的信息：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306281633297.png" alt="image-20230619104358612"></p>
<p>感觉不太方便，所以想通过界面化的方式，将过程进行简化（要不，每次都手动在文章的开头写上—xxx—,太麻烦）。</p>
<p>基于此，本文通过界面化的方式，将文章进行格式化，通过代码的方式自动在文章开头插入markdown可识别的字符串。</p>
<hr>
<p>⭐⭐⭐⭐V1.0.0更新日志</p>
<p>第一版的Hexo文章转换器使用起来不太方便，所以在第一版的基础上进行了更新，主要是将标签和分类的信息保存到sqlite数据库中，不再用户每次都手动输入了。（初版的思路是，标题、 创建时间、位置等一些信息可以从后台直接获取，比如标题可以通过读取文章的第一行获取，然后将标题生成到原文中就行，不知道为什么打包成exe格式之前，标题都能从文章中提取出来，但是在exe中如果获取出来的标题永远都是乱码，各种尝试都无用，无奈，手动输入标题吧）</p>
<p>⭐⭐⭐⭐⭐V1.1.0更新日志</p>
<p>V1.1.0版本在界面上进行了一系列的改动，优化了用户体验，主要体现在：</p>
<ol>
<li>显示内容正常无遮挡。上一版本由于页面布局的问题，cover一般都会很长，导致遮挡后面部分label。</li>
<li>新增一键重置功能，考虑到有可能一次性转换多个文章，如果不重置的话，无法重新上传文件并转换，只能关掉应用程序重新打开，才能进行转换新的文章。</li>
<li>新增标签管理和分栏管理Tab页。在最顶端新增两个Tab页，分别用来对标签和分栏的新增和删除功能。</li>
<li>优化了大部分的代码，包括但不限于接口实现jdbc操作数据库功能，提高易用性和扩展性、新增表结构、合适的地方处理异常等等。</li>
</ol>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306281648185.png" alt="image-20230628164814150"></p>
<p>使用该工具可以避免手动输入这些信息，而是通过界面化的方式进行配置：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306281648109.png" alt="image-20230628164828060"></p>
<p>但是，<strong>建议在使用之前进行两项的配置</strong>：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306281649108.png" alt="image-20230628164907063"></p>
<p>工作目录：主要是基于这个目录，执行一系列指令：hexo clean、hexo g和hexo d等指令。</p>
<p>上传文件目录：在Hexo转换器Tab中，需要上传文件之后才能点转换，这里的位置就是点击后重定向的位置，换句话说，就是你平常文章经常放的位置，通常是_posts。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306281651512.png" alt="image-20230628165125467"></p>
<p>关于Hexo转换器界面，主要就是讲解这个页面是干什么用的，解决了什么问题。</p>
<h2 id="技术说明"><a href="#技术说明" class="headerlink" title="技术说明"></a>技术说明</h2><p>Java17（开发语言）、Java FX（Java界面工具，类似于java8的swing，现已不支持java8）、SceneBuilder（拖拽式界面工具）、exe4j（jar转exe工具）。</p>
<p>踩坑无数，尤其是将java转为exe的过程中，踩了一晚上吧。</p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>下载地址：</p>
<p><a href="https://github.com/yamonc/hexoHelper/releases/download/V1.0.0/hexoHelperV1.0.0.zip">HexoHelper下载地址</a></p>
<p>下载好之后，解压缩，解压缩之后，需要注意的是，db文件夹要和hexoHelper.exe是同级目录，db文件夹中是sqlite的数据库，运行的时候需要找到db的数据库才行。最终文件的位置关系：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306281656872.png" alt="image-20230628165640833"></p>
<p>开始运行，会出现[示例]中的界面。</p>
<h3 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h3><p>现在的界面主要分三个主Tab：</p>
<h4 id="Hexo转换器"><a href="#Hexo转换器" class="headerlink" title="Hexo转换器"></a>Hexo转换器</h4><p>该界面主要分三个部分：</p>
<p>从上到下依次是Front-Matter清单，在这里可以看到你填写的一些文章信息，这也是最终会填写到你文章里面的内容；</p>
<p>输入区：在这里你需要输入一些文章信息，这个和Front-Matter清单联动，修改了什么会体现在清单上。</p>
<p>最下面是功能区域：</p>
<p>【上传文件】：点击上传文件按钮之后，选中待转换的markdown文件（没有front-matter信息的markdown文件）</p>
<p>【转换格式】：对已上传的文件进行格式转换，在文章头添加已经输入的front-matter信息。</p>
<p>【部署】：执行hexo clean、hexo g、hexo d一系列指令。</p>
<p>【一键部署】：对已上传的文件进行格式转换并执行hexo clean、hexo g、hexo d指令部署到对应平台上。</p>
<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>主要设置一些提升用户体验的必要信息。</p>
<p>工作目录：主要是基于这个目录，执行一系列指令：hexo clean、hexo g和hexo d等指令。</p>
<p>上传文件目录：在Hexo转换器Tab中，需要上传文件之后才能点转换，这里的位置就是点击后重定向的位置，换句话说，就是你平常文章经常放的位置，通常是_posts。</p>
<h4 id="关于Hexo转换器"><a href="#关于Hexo转换器" class="headerlink" title="关于Hexo转换器"></a>关于Hexo转换器</h4><p>主要介绍了该工具解决了什么问题，如何使用及关于作者等信息。</p>
<h2 id="使用流程说明"><a href="#使用流程说明" class="headerlink" title="使用流程说明"></a>使用流程说明</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306281633232.png" alt="image-20230619105823619"></p>
<h2 id="待优化问题"><a href="#待优化问题" class="headerlink" title="待优化问题"></a>待优化问题</h2><ol>
<li>用户使用优化。</li>
<li>标签和分类的操作业务流程有问题。无法删除标签和分类。考虑在设置中体现。</li>
<li>显示优化，如果cover或者其他字段太长的话，会影响到字体显示。</li>
</ol>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>开源项目</tag>
        <tag>JavaFX</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo文章转换器III</title>
    <url>/2023/08/03/02.%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/Hexo%E6%96%87%E7%AB%A0%E8%BD%AC%E6%8D%A2%E5%99%A8III/</url>
    <content><![CDATA[<h1 id="Hexo文章转换器III"><a href="#Hexo文章转换器III" class="headerlink" title="Hexo文章转换器III"></a>Hexo文章转换器III</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308031551988.jpeg" alt="a person standing on top of a cliff"></p>
<blockquote>
<p>Hexo系列文章：</p>
<ol>
<li><a href="https://yamonc.github.io/2023/06/13/%E4%BB%8E0%E5%88%B01%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%88%B0Github-Page/">从0到1部署博客系统到GitHub Page（0成本）</a></li>
<li><a href="https://yamonc.github.io/2023/06/13/hexo%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98/">hexo如何修改主题？</a></li>
<li><a href="https://yamonc.github.io/2023/06/13/hexo-Acrylic%E4%B8%BB%E9%A2%98%E9%9B%86%E6%88%90twikoo%E8%AF%84%E8%AE%BA/">hexo-Acrylic主题集成twikoo评论</a></li>
<li><a href="https://yamonc.github.io/2023/06/16/%E5%A6%82%E4%BD%95%E5%B0%86java%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe%E6%A0%BC%E5%BC%8F/">如何将JavaFX的java项目打包成exe格式</a></li>
<li><a href="https://yamonc.github.io/2023/06/19/02.%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/Hexo%E6%96%87%E7%AB%A0%E8%BD%AC%E6%8D%A2%E5%99%A8/">Hexo文章转换器</a></li>
<li><a href="https://yamonc.github.io/2023/06/28/02.%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/Hexo%E6%96%87%E7%AB%A0%E8%BD%AC%E6%8D%A2%E5%99%A8II/">Hexo文章转换器II</a></li>
</ol>
</blockquote>
<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>⭐⭐⭐⭐V1.0.0更新日志</p>
<p>第一版的Hexo文章转换器使用起来不太方便，所以在第一版的基础上进行了更新，主要是将标签和分类的信息保存到sqlite数据库中，不再用户每次都手动输入了。（初版的思路是，标题、 创建时间、位置等一些信息可以从后台直接获取，比如标题可以通过读取文章的第一行获取，然后将标题生成到原文中就行，不知道为什么打包成exe格式之前，标题都能从文章中提取出来，但是在exe中如果获取出来的标题永远都是乱码，各种尝试都无用，无奈，手动输入标题吧）</p>
<p>⭐⭐⭐⭐⭐V1.1.0更新日志-小版本更新</p>
<p>V1.1.0版本在界面上进行了一系列的改动，优化了用户体验，主要体现在：</p>
<ol>
<li>显示内容正常无遮挡。上一版本由于页面布局的问题，cover一般都会很长，导致遮挡后面部分label。</li>
<li>新增一键重置功能，考虑到有可能一次性转换多个文章，如果不重置的话，无法重新上传文件并转换，只能关掉应用程序重新打开，才能进行转换新的文章。</li>
<li>新增标签管理和分栏管理Tab页。在最顶端新增两个Tab页，分别用来对标签和分栏的新增和删除功能。</li>
<li>优化了大部分的代码，包括但不限于接口实现jdbc操作数据库功能，提高易用性和扩展性、新增表结构、合适的地方处理异常等等。</li>
</ol>
<p>⭐⭐⭐⭐⭐V2.0.0更新日志</p>
<p>新增输入密码才可查看文章。（解决因文章版权问题或者不想让别人查看指定文章）</p>
<p>可自定义输入密码提示语、及密码错误提示语，设置自定义密码等功能。</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>通常在使用Hexo写文章的时候，都需要将在Hexo文章的开头处，加上Front-Matter的必要信息，用于Hexo识别并提取出文章的meta信息。</p>
<p>但是，每次写都不是特别方便，所以，使用界面化的方式来简化操作步骤，通过点击的方式对使用过程进行了简化。</p>
<p>适用hexo主题为<a href="https://next-docs.acrylic.org.cn/">Hexo Acrylic</a>，并且使用<a href="https://github.com/D0n9X1n/hexo-blog-encrypt">hexo-blog-encrypt</a>对文章进行加密。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>使用该工具可以避免手动输入这些信息，而是通过界面化的方式进行配置：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308031609520.png" alt="image-20230803160906642"></p>
<p>但是，<strong>建议在使用之前进行三项的配置</strong>，其中上传目录是必须的，<strong>要不无法使用</strong></p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308031609948.png" alt="image-20230803160919907"></p>
<p>管理标签界面：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308031609839.png" alt="image-20230803160927878"></p>
<p>分栏管理界面：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308031609583.png" alt="image-20230803160932865"></p>
<p>关于我界面：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308031609976.png" alt="image-20230803160938395"></p>
<p>转换之后的界面：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308031610916.png" alt="image-20230803160838891"></p>
<h2 id="技术说明"><a href="#技术说明" class="headerlink" title="技术说明"></a>技术说明</h2><p>Java17（开发语言）、Java FX（Java界面工具，类似于java8的swing，现已不支持java8）、SceneBuilder（拖拽式界面工具）、exe4j（jar转exe工具）。</p>
<p>踩坑无数，尤其是将java转为exe的过程中，踩了一晚上吧。</p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>下载地址：</p>
<p><a href="https://github.com/yamonc/hexoHelper/releases/download/V1.0.0/hexoHelperV1.0.0.zip">HexoHelper下载地址</a></p>
<p>下载好之后，解压缩，解压缩之后，需要注意的是，db文件夹要和hexoHelper.exe是同级目录，db文件夹中是sqlite的数据库，运行的时候需要找到db的数据库才行。最终文件的位置关系：</p>
<p><img src="D:\blog\source_posts\02.开源项目\assets\202306281656872.png" alt="image-20230628165640833"></p>
<p>开始运行，会出现[示例]中的界面。</p>
<h3 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h3><p>现在的界面主要分三个主Tab：</p>
<h4 id="Hexo转换器"><a href="#Hexo转换器" class="headerlink" title="Hexo转换器"></a>Hexo转换器</h4><p>该界面主要分三个部分：</p>
<p>从上到下依次是Front-Matter清单，在这里可以看到你填写的一些文章信息，这也是最终会填写到你文章里面的内容；</p>
<p>输入区：在这里你需要输入一些文章信息，这个和Front-Matter清单联动，修改了什么会体现在清单上。</p>
<p>最下面是功能区域：</p>
<p>【上传文件】：点击上传文件按钮之后，选中待转换的markdown文件（没有front-matter信息的markdown文件）</p>
<p>【转换格式】：对已上传的文件进行格式转换，在文章头添加已经输入的front-matter信息。</p>
<p>【部署】：执行hexo clean、hexo g、hexo d一系列指令。</p>
<p>【一键部署】：对已上传的文件进行格式转换并执行hexo clean、hexo g、hexo d指令部署到对应平台上。</p>
<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>主要设置一些提升用户体验的必要信息。</p>
<p>工作目录：主要是基于这个目录，执行一系列指令：hexo clean、hexo g和hexo d等指令。</p>
<p>上传文件目录：在Hexo转换器Tab中，需要上传文件之后才能点转换，这里的位置就是点击后重定向的位置，换句话说，就是你平常文章经常放的位置，通常是_posts。</p>
<h4 id="关于Hexo转换器"><a href="#关于Hexo转换器" class="headerlink" title="关于Hexo转换器"></a>关于Hexo转换器</h4><p>主要介绍了该工具解决了什么问题，如何使用及关于作者等信息。</p>
<h2 id="使用流程说明"><a href="#使用流程说明" class="headerlink" title="使用流程说明"></a>使用流程说明</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308031613532.png" alt="image-20230619105823619"></p>
<h2 id="待优化问题"><a href="#待优化问题" class="headerlink" title="待优化问题"></a>待优化问题</h2><p>现在主要存在三个核心问题暂时没有解决：</p>
<p>第一，使用sqlite作为持久化数据库，但是sqlite文件必须在外部挂载，无法将sqlite打到jar包中，并转成exe文件。</p>
<p>第二，出错没有日志可查，可以将日志输出成文件，并保存在客户端。</p>
<p>第三，利用公私钥的方式对密码进行加密，并输入在文章的Front-Matter上。</p>
]]></content>
      <categories>
        <category>开源项目</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>综合工具箱</title>
    <url>/2023/06/17/02.%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/%E7%BB%BC%E5%90%88%E5%B7%A5%E5%85%B7%E7%AE%B1/</url>
    <content><![CDATA[<h1 id="综合工具箱"><a href="#综合工具箱" class="headerlink" title="综合工具箱"></a>综合工具箱</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306261746878.jpeg" alt="a view of a mountain range at sunset"></p>
<p><a href="https://github.com/yamonc/tool_platfom/">tool_platform</a></p>
<blockquote>
<p>综合工具箱（名字实在是不会起，意会吧，言传就不必了）：这个项目主要是为了解决日常生活中的一点点痛点：比如密码箱，何为密码箱呢？如今大多数网站都有注册和登录功能，要么呢，有各种需要备份或者记录的信息（QQ邮箱的凭证，开发者需要记录下，或者github的AK和SK等），这种记录在网上的一些工具有可能会遭到泄露，所以将本地密码存到密码箱里就很有必要了。</p>
</blockquote>
<h2 id="🍎技术架构"><a href="#🍎技术架构" class="headerlink" title="🍎技术架构"></a>🍎技术架构</h2><p><a href="https://www.electronjs.org/zh/docs/latest/tutorial/quick-start">electron</a>+vue2</p>
<p>框架用的是<a href="https://gitee.com/Zh-Sky/electron-vue-template">electron-vue-template</a>，感谢大佬的开源。</p>
<p>纯前端项目，没有用到后端，<strong>更不会保留任何数据到服务器上</strong>。</p>
<h2 id="🍉-解决的问题"><a href="#🍉-解决的问题" class="headerlink" title="🍉 解决的问题"></a>🍉 解决的问题</h2><p>目前综合工具箱里的功能只有《密码箱》的功能。</p>
<h3 id="🍓密码箱"><a href="#🍓密码箱" class="headerlink" title="🍓密码箱"></a>🍓密码箱</h3><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306171118918.png" alt="image-20230617111859730"></p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306171119106.png" alt="image-20230617111918042"></p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306171122534.png" alt="image-20230617112248464"></p>
<h4 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h4><p><strong>网络上的密码无法管理。</strong></p>
<h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>点击新增密码，按照提示输入后，可在当前的用户目录下找到password.json的文件，所有的密码都存在这个paasword.json中。</p>
<p>密码备份功能比价鸡肋，后期去掉。</p>
<h2 id="🍠如何启动"><a href="#🍠如何启动" class="headerlink" title="🍠如何启动"></a>🍠如何启动</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>前提需要安装git、node.js、yarn&#x2F;npm（npm好像在这里不好使）</p>
<h3 id="二次开发"><a href="#二次开发" class="headerlink" title="二次开发"></a>二次开发</h3><p>如果是二次开发的话：</p>
<p><strong>pull代码</strong></p>
<p><code>git pull https://github.com/yamonc/tool_platfom.git </code></p>
<p><strong>安装安装包</strong></p>
<p><code>yarn </code></p>
<p><strong>启动项目</strong></p>
<p><code>yarn dev</code></p>
<h3 id="直接使用"><a href="#直接使用" class="headerlink" title="直接使用"></a>直接使用</h3><p>两种方式，第一种<a href="https://gh.api.99988866.xyz/https://github.com/yamonc/tool_platfom/releases/download/V0.0.1/electron-vue-admin.Setup.0.0.1.exe">下载发版</a>；</p>
<p>第二种，在二次开发的基础上，自己打包：</p>
<p><code>yarn build:win64</code></p>
<p>打完包之后，会发现build包下有exe可执行文件：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306171139786.png" alt="image-20230617113946744"></p>
<h2 id="🍐后期目标"><a href="#🍐后期目标" class="headerlink" title="🍐后期目标"></a>🍐后期目标</h2><p>性能优化（不得不说，electron太太太太慢了）</p>
<p>密码修改。</p>
<p>导入密码。</p>
<p>支持sqllite，方便修改密码、删除密码。</p>
<h2 id="🍌CHANGELOG"><a href="#🍌CHANGELOG" class="headerlink" title="🍌CHANGELOG"></a>🍌CHANGELOG</h2><p>V0.0.1 新增密码箱功能；</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-Acrylic主题集成twikoo评论</title>
    <url>/2023/06/13/03.Hexo/hexo-Acrylic%E4%B8%BB%E9%A2%98%E9%9B%86%E6%88%90twikoo%E8%AF%84%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="hexo-Acrylic主题集成twikoo评论"><a href="#hexo-Acrylic主题集成twikoo评论" class="headerlink" title="hexo-Acrylic主题集成twikoo评论"></a>hexo-Acrylic主题集成twikoo评论</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306261745868.jpeg" alt="a large building with a clock tower in the middle of it"></p>
<p>虽然hexo使用了Acrylic的主题，但是评论模块一直没有打开，官方给出的文档也没有相关的文档，所以上网上找到了一篇参考，做了一些详细的配置。</p>
<p>主要完成的是评论模块的功能实现，增加、提醒等功能。具体可以查看twikoo<a href="https://twikoo.js.org/">文档</a></p>
<p>twikoo文档上给出了很多部署的方式，主要分两类，一个是云函数的部署，另外一种是前端部署。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131714157.png" alt="image-20230613171408109"></p>
<p>这里使用的是Vercel部署。</p>
<h2 id="Vercel部署"><a href="#Vercel部署" class="headerlink" title="Vercel部署"></a>Vercel部署</h2><p>主要的部署流程：</p>
<ol>
<li>申请mongodb账号</li>
<li>创建免费的mongodb数据库，区域的话，可以选择hongkang。</li>
<li>查看配置信息，在clusters页面上点击connect，然后选择Driver，复制数据库信息。</li>
<li>申请Vercel账号。</li>
<li>将twikoo一键部署到Vercel上</li>
<li>在Vercel上，找到Setting-Environment Variable，添加MONGODB_URI，值为第3步的数据库信息。</li>
<li>进入 Deployments , 然后在任意一项后面点击更多（三个点） , 然后点击Redeploy , 最后点击下面的Redeploy。</li>
<li>进入 Overview，点击 Domains 下方的链接，如果环境配置正确，可以看到 “Twikoo 云函数运行正常” 的提示。</li>
<li>Vercel Domains（包含 <code>https://</code> 前缀，例如 <code>https://xxx.vercel.app</code>）即为您的环境 id。</li>
</ol>
<h3 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h3><h4 id="mongodb上的操作"><a href="#mongodb上的操作" class="headerlink" title="mongodb上的操作"></a>mongodb上的操作</h4><p>正常流程注册就行，应该可以使用github注册的。注册OK了之后，会有引导，选择最右侧免费的cluster（土豪忽略这个），然后进行配置：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131721646.png" alt="创建页面"></p>
<p>这里我没有选择官方推荐的，我选择的是距离咱们最近的Hong Kong。然后创建数据库即可。</p>
<p>接下来，需要配置mongodb数据库，设置ip为0.0.0.0&#x2F;0即可：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131723940.png" alt="配置ip.png"></p>
<p>创建数据库用户，这里的paasword后面有用到：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131723680.png" alt="配置用户.png"></p>
<p>返回到cluster界面，点击connect：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131723711.png" alt="CONNECT1.png"></p>
<p>这里跟参考里面的不一样，这里要选择device还是什么来着，也是application，只不过描述不一样。</p>
<p>点进去之后，除了记录一下数据库的信息之外，还需要在hexo目录下，npm装一下mongodb的包，要不twikoo还是不能用。</p>
<h4 id="部署到Vercel"><a href="#部署到Vercel" class="headerlink" title="部署到Vercel"></a>部署到Vercel</h4><p>申请Vercel账号，需要手机号认证，去下拉框里面找咱们国家就行，输入验证码之后就注册成功了。</p>
<p>开始部署：</p>
<p><a href="https://vercel.com/import/project?template=https://github.com/imaegoo/twikoo/tree/main/src/server/vercel-min">https://vercel.com/import/project?template=https://github.com/imaegoo/twikoo/tree/main/src/server/vercel-min</a></p>
<p>点击上述连接。</p>
<p>Repository Name这里可以随便输入，建议输入twikoo，给自己的github上创建一个twikoo的仓库。</p>
<p>点击Create进入下一步。</p>
<p>等Import之后，点击visit进入仓库。</p>
<p>这时候，应该会报错，还需要配置环境变量。</p>
<h5 id="新建环境变量"><a href="#新建环境变量" class="headerlink" title="新建环境变量"></a>新建环境变量</h5><p>进入<code>Settings - Environment Variables</code>页面。<br>新建一个NAME为<code>MONGODB_URI</code>;VALUE为你在前面记录到的<code>数据库连接字符串</code>的环境变量。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131728847.png" alt="Setting.png"></p>
<p>点击Deployment重新部署一下：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131730574.png" alt="image-20230613173028453"></p>
<p>部署如果成功的话：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131731529.png" alt="image-20230613173101471"></p>
<p>Domain下面的连接就是要配置的envId。</p>
<p>至此的话，如何你点击Domain下面的连接可以正常访问的话，那可以跳过以下几步，直接到邮箱配置这块了，但是如果无法访问的话，需要配置一下二级域名才能完成访问的。</p>
<p>到阿里云控制台上（你域名的服务商），找到域名：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131736438.png" alt="image-20230613173646350"></p>
<p>点击添加域名：</p>
<p>添加子域名：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131737855.webp" alt="img"></p>
<p>提示TXT授权校验：</p>
<p>将TXT授权校验的内容保存好之后，对主域名进行添加子域名解析：</p>
<p>添加解析记录：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131738760.webp" alt="img"></p>
<p>添加好了之后，再返回点击验证。</p>
<p>最后将二级域名解析到Vercel中：</p>
<p>在二级域名中添加两条记录（不用修改）：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131739108.png" alt="image-20230613173948054"></p>
<table>
<thead>
<tr>
<th align="center">主机记录</th>
<th align="center">记录类型</th>
<th align="center">解析请求来源(isp)</th>
<th align="center">记录值</th>
<th align="center">TTL</th>
</tr>
</thead>
<tbody><tr>
<td align="center">twikoo</td>
<td align="center">CNAME</td>
<td align="center">默认</td>
<td align="center">cname.vercel-dns.com</td>
<td align="center">10 分钟</td>
</tr>
<tr>
<td align="center">@</td>
<td align="center">A</td>
<td align="center">默认</td>
<td align="center">76.76.21.21</td>
<td align="center">10 分钟</td>
</tr>
</tbody></table>
<p>在Vercel项目中添加Domains域名</p>
<p>点击Project Settings-》Domains，添加域名即可</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131742880.png" alt="image-20230613174240816"></p>
<p>替换之前的envid：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131741532.png" alt="image-20230613174157503"></p>
<h4 id="实现邮件通知"><a href="#实现邮件通知" class="headerlink" title="实现邮件通知"></a>实现邮件通知</h4><p>以qq邮箱为例：</p>
<p>需要得到邮箱的pop3&#x2F;SMTP的凭证，现在已经改版了，不太好找了。可以这么操作：</p>
<p>登录上邮箱之后，选择设置-》账户，找到POP3一栏。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131746070.png" alt="image-20230613174604011"></p>
<p>点击如何设置？</p>
<p>跳转到这个页面：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131746090.png" alt="image-20230613174626026"></p>
<p>点它就行了，然后一步一步配置就行，该发短信就发短信。</p>
<p>得到凭证之后，开始配置邮箱提醒：</p>
<p>SENDER_EMAIL: &lt;你的QQ邮箱地址&gt;<br>SMTP_SERVICE: &lt;你的邮件服务提供商&gt;<br>SMTP_HOST: &lt;自定义 SMTP 服务器地址&gt;<br>SMTP_PORT: &lt;自定义 SMTP 端口&gt;<br>SMTP_SECURE: &lt;自定义 SMTP 是否使用 TLS&gt;<br>SMTP_USER: &lt;邮件通知邮箱用户名&gt;(需与SENDER_EMAIL一致)<br>SMTP_PASS: &lt;邮件通知邮箱密码&gt;(授权码)</p>
<p>一般在评论左下角会有一个小齿轮，点击进去，第一次需要注册，注册完了之后按照这个配置一下就行：</p>
<p>点击配置管理-》邮件通知，按照以下进行配置：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131748658.png" alt="配置2.png"></p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131748532.png" alt="配置1.png"></p>
<p>然后点击最下面的邮件通知测试，完成测试。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_58068682/article/details/122770936">部署Twikoo评论系统及其邮件推送(Vercel)</a></p>
<p><a href="https://www.jianshu.com/p/02fb996c4638">关于Vercel被墙导致获取Twikoo评论失败的解决方案</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>twikoo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo如何修改主题？</title>
    <url>/2023/06/13/03.Hexo/hexo%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<h1 id="hexo如何修改中意的主题？"><a href="#hexo如何修改中意的主题？" class="headerlink" title="hexo如何修改中意的主题？"></a>hexo如何修改中意的主题？</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306261746884.jpeg" alt="an aerial view of a tree in a field"></p>
<p>推荐Acrylic主题，样式比较好看，文档也比较完善，但是也有踩坑。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131506443.png" alt="image-20230613150638064"></p>
<p>不过，还是感谢<a href="https://github.com/hexo-theme-Acrylic/Hexo-Theme-Acrylic-Next">@hexo-theme-Acrylic</a>的开源项目。</p>
<p>修改主题可以参考文档修改，<a href="https://next-docs.acrylic.org.cn/">hexo acrylic</a>。</p>
<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>注意在hexo的根目录下执行指令，用来安装主题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b main https://github.com/hexo-theme-Acrylic/Hexo-Theme-Acrylic-Next.git themes/Acrylic</span><br></pre></td></tr></table></figure>

<h2 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h2><p>修改主配置文件config.yml,修改主题配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//hexo.io/plugins/</span></span><br><span class="line">## Themes<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//hexo.io/themes/</span></span><br><span class="line">theme<span class="punctuation">:</span> Acrylic</span><br></pre></td></tr></table></figure>

<h2 id="使用主题配置"><a href="#使用主题配置" class="headerlink" title="使用主题配置"></a>使用主题配置</h2><p>macos&#x2F;linux:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -rf ./themes/Acrylic/_config.yml ./_config.Acrylic.yml</span><br></pre></td></tr></table></figure>

<p>windows:</p>
<p>复制 <code>/themes/Acrylic/_config.yml</code> 此文件到 <strong>Hexo</strong> 根目录，并重命名为 <code>_config.Acrylic.yml</code></p>
<h2 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h2><p>在hexo主文件夹下找到themes文件夹，进入之后找到Acrylic，并pull代码。</p>
<p>直接hexo clean、hexo g、hexo s；看是否有问题。</p>
<p>一般有的问题，都可以在百度上搜索，一般都是少装了npm包，npm install一下就可以了。</p>
<p>比如这个： npm install hexo-deployer-git –save</p>
<h2 id="Acrylic一些的必要配置"><a href="#Acrylic一些的必要配置" class="headerlink" title="Acrylic一些的必要配置"></a>Acrylic一些的必要配置</h2><p>首先按照文档，配置一下Hexo配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: RootlexBlog</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: &#x27;a blog 一个分享技术与生活的博客&#x27;</span><br><span class="line">keywords: Rootlex, blog, 技术, 博客</span><br><span class="line">author: Rootlex</span><br><span class="line">language: zh-CN # 主要是这里不一样，默认的是en</span><br><span class="line">timezone: &#x27;&#x27;</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: http://example.com # 这块也建议修改成自己github的仓库地址，比如xxx.github.io</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></pre></td></tr></table></figure>

<p>上述配置，需要注意两点：</p>
<ol>
<li>language需要改成zh-CN；</li>
<li>url修改成为自己的配置。</li>
</ol>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">site:</span><br><span class="line">  name:                   # 左上角显示内容</span><br><span class="line">    class:  text          #i_class/text/img </span><br><span class="line">    custom: Acrylic       #自定义内容</span><br><span class="line">  siteIcon: /img/avatar.webp # 网页icon</span><br><span class="line">  icon: /img/avatar.webp     # 页脚的icon、加载动画默认的icon</span><br><span class="line">  icp:                       # ICP</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其他的内容按照文档配置就行。</p>
<h2 id="其他注意的点"><a href="#其他注意的点" class="headerlink" title="其他注意的点"></a>其他注意的点</h2><h3 id="一、文章顶部搜索栏：search搜索"><a href="#一、文章顶部搜索栏：search搜索" class="headerlink" title="一、文章顶部搜索栏：search搜索"></a>一、文章顶部搜索栏：search搜索</h3><p>建议使用本地搜索，本地搜索的话，需要安装hexo-generator-searchdb插件。</p>
<p>然后在_config.yml添加以下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure>

<p>修改_config.arcylic.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:           #本地搜索</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<h3 id="二、-文章详情meta数据没有显示"><a href="#二、-文章详情meta数据没有显示" class="headerlink" title="二、 文章详情meta数据没有显示"></a>二、 文章详情meta数据没有显示</h3><p>参考<a href="https://github.com/hexo-theme-Acrylic/Hexo-Theme-Acrylic-Next/issues/153">《meta疑问及front-matter参数疑问》</a></p>
<p>补充几句吧：</p>
<p>需要安装hexo-wordcount包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure>

<p>一定要在次配置，主题配置中找到wordcount，并且设置为true：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131620729.png" alt="image-20230613162023688"></p>
<h3 id="三、twikoo评论无法显示"><a href="#三、twikoo评论无法显示" class="headerlink" title="三、twikoo评论无法显示"></a>三、twikoo评论无法显示</h3><p>需要部署twikoo服务才能实现评论，具体参考文档<a href="https://twikoo.js.org/">twikoo文档</a></p>
<p>或查看下一篇文章。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>从0到1部署博客系统到Github Page（0成本）</title>
    <url>/2023/06/13/03.Hexo/%E4%BB%8E0%E5%88%B01%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%88%B0Github-Page/</url>
    <content><![CDATA[<h1 id="从0到1部署博客系统到GitHub-Page（0成本）"><a href="#从0到1部署博客系统到GitHub-Page（0成本）" class="headerlink" title="从0到1部署博客系统到GitHub Page（0成本）"></a>从0到1部署博客系统到GitHub Page（0成本）</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306261745323.jpeg" alt="a view of a mountain range with a pink sky in the background"></p>
<p>先po一下博客的地址：</p>
<p><a href="https://yamonc.github.io/">热爱并分享生活</a></p>
<p>主要选型：hexo+<a href="https://next-docs.acrylic.org.cn/configuration/comment">Acrylic</a>+Github Page+<a href="https://twikoo.js.org/quick-start.html#vercel-%E9%83%A8%E7%BD%B2">twikoo</a>（评论）+<a href="https://vercel.com/dashboard">Vercel</a>（自动化部署twikoo）+ <a href="https://cloud.mongodb.com/v2/64870703b548175c8b6e3255#/clusters">mongodb cloud</a></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从去年年末到今年五月底、六月初，一直在想，重新搞一个博客网站玩玩，正好也想学习一下vue的前端知识。然后就上网上找了一下模板，刚开始使用的是vue-element-admin，但是无奈该模板是后台管理系统，所以又找人给搭了一个特别简单的网站。在接下来的几个月的时间内，吭哧吭哧地干，一点点的干，从前端的博客列表、标签分栏列表、各种crud页面的编写，期间一度的怀疑自己在干什么，感觉没什么意义，但最后还是做出来了点效果，但是样式过于丑陋，始终不满。</p>
<p>终于，在上周五晚上，反思了下最近这半年正在做的事儿，感觉什么都做了，又感觉什么都没做。在想到博客的时候，自己明明想要的是能够做到文档归档功能就行，其他的多余的什么登录、延迟删除博客、撤回删除博客有什么用呢？这不就是无用功了吗？</p>
<p>说回来，之前就看到一些博主利用github来写一些文档，例如一些网页后面的github.io的后缀。</p>
<p>目前常见的选型有这几种：</p>
<ol>
<li>自己搭建的博客（成本高，需要自己买服务器，时间成本也高，但是自定义高，可玩性高）</li>
<li><a href="https://vuepress.vuejs.org/zh/">vuepress</a>，利用vuepress纯前端静态资源部署CMS内容。</li>
<li>hexo，模板较多，类似vuepress（本文选用的是这个）</li>
</ol>
<p>关于博客系统的选型，之前就知道有hexo，做博客期间的这半年，还想要不将hexo搬到服务器上，在服务器上部署一套就行了。后来无意中了解到，gitee和github可以提供服务器资源，提供免费站点（gitee也可以，但是需要提供身份证认证）。</p>
<h2 id="搭建使用的组件"><a href="#搭建使用的组件" class="headerlink" title="搭建使用的组件"></a>搭建使用的组件</h2><p>首先，需要使用git，用来将代码push到github上。</p>
<p>node.js和npm包管理工具用来安装前端必须的包；</p>
<p>hexo，博客模板网站。</p>
<p>这几个之间的关系是：</p>
<p>node.js和npm为底层支撑，用来支撑项目的启动；</p>
<p>hexo为样式渲染组件，hexo通过node.js和npm完成部署。</p>
<ol>
<li><a href="https://nodejs.org/en">node.js</a>,下载直接安装即可。</li>
<li><a href="https://git-scm.com/">git</a>，同上，安装次版本即可。</li>
<li>npm， 包管理工具。</li>
<li><a href="https://hexo.io/zh-cn/docs/">hexo</a>，博客模板网站</li>
</ol>
<h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><p>开始部署工作，默认已经配置了git、npm和nodejs。</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p><a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">参考官方文档</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>或者安装全量包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure>

<h3 id="初始化hexo文件夹"><a href="#初始化hexo文件夹" class="headerlink" title="初始化hexo文件夹"></a>初始化hexo文件夹</h3><p>安装好了之后，需要在你的pc上，找一个地儿，创建一个blog的文件夹：</p>
<p>比如我选择的地方：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131146514.png" alt="image-20230613114643441"></p>
<p>找好了之后，右键空白处，选择git bash here</p>
<p>首先声明一下，这个文件夹是hexo的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init .</span><br></pre></td></tr></table></figure>

<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>接着，安装下依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>安装好了依赖之后，可以查看目录结构：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml # 网站配置信息</span><br><span class="line">├── package.json # 应用程序信息</span><br><span class="line">├── scaffolds # 模板文件夹</span><br><span class="line">├── source # 存放用户资源</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes # 主题文件夹</span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>输入hexo指令：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 新建博客</span><br><span class="line">hexo n &quot;test&quot;</span><br><span class="line"># 生成静态网页</span><br><span class="line">hexo g</span><br><span class="line"># 打开本地服务器</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>查看控制台是否有报错，如果有的话，查看原因。</p>
<p>（ps：我记得，在这里好像有问题，但是百度绝对能百度出来，原因大概是少装了依赖，再装下依赖就不会报错了）</p>
<p>这个时候，控制台应该一个localhost的连接，访问连接即可。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131356094.png" alt="image-20230613135632039"></p>
<p>（已经更换过主题的，所以你的有可能跟我不一样，可以从简单开始，先将最简单的部署到Github的Page站点）</p>
<h2 id="部署到Github-Page站点"><a href="#部署到Github-Page站点" class="headerlink" title="部署到Github Page站点"></a>部署到Github Page站点</h2><p>访问<a href="https://docs.github.com/zh/pages/getting-started-with-github-pages">Page文档</a>了解更多。</p>
<p>首先，在Github上创建一个仓库，名字一定要和你的用户名一样：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131401328.png" alt="image-20230613140138288"></p>
<p>可以添加一个README的markdown文件，方便pull（仓库为空的话，不能pull），或者更简单的，不需要你创建这个仓库，在hexo的目录下，使用以下命令，将hexo的目录push到github上，但是名字要改成上面这个图一样的（用户名.github.io，我这里是将hexo和github本地仓库分开的）。</p>
<p>这时候，有可能会出现github认证问题，需要你输入github的账号密码，虽然你输入的是正确的，但是总是pull&#x2F;push不成功。</p>
<p>解决方案：升级你的git版本。</p>
<p>创建之后，创建一个文件夹，然后pull下来远端的代码：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131408878.png" alt="image-20230613140821833"></p>
<p>注意，在<strong>博客的根目录</strong>下，找到hexo的主配置（定义：其他主题都为次配置）：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131411707.png" alt="image-20230613141118667"></p>
<p>配置主配置：</p>
<p>可配置的内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: yamon，分享并热爱生活 # 浏览器tab栏上显示内容</span><br><span class="line">subtitle: &#x27;&#x27; # 可以写</span><br><span class="line">description: &#x27;a blog 一个分享技术与生活的博客&#x27; # 应该是百度搜索出来的时候用的</span><br><span class="line">keywords: Rootlex, blog, 技术, 博客 # 搜索关键字</span><br><span class="line">author: yamon # 作者，footer用的应该</span><br><span class="line">language: zh-CN # 语言</span><br><span class="line">timezone: &#x27;&#x27; # 时区</span><br><span class="line"></span><br><span class="line">url: http://yamonc.github.io # 分享的时候用的url</span><br><span class="line">permalink: :year/:month/:day/:title/ # 应该是点开文章后，url上显示的格式</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure>

<p>重点内容来了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/ </span><br><span class="line">## 这个是主题配置，如果更换主题的话，需要在这里修改下名字，具体后续会讲</span><br><span class="line">theme: Acrylic</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line"># 部署在github上，type是部署方式；repo是部署的仓库，就是你要把代码push到哪个仓库上；branch：部署的分支。</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/yamonc/yamonc.github.io</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<p>保存之后，再执行三或四个指令，这四个指令会贯穿到从始至终：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">hexo clean # 清除缓存</span><br><span class="line">hexo g # 生成静态文件</span><br><span class="line">hexo s # 启动服务（自己debug用，或者本地查看一下会不会报错）</span><br><span class="line">hexo d # 开启部署</span><br></pre></td></tr></table></figure>

<p>接着，点到用户名.github.io的仓库里面，找到setting：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131420206.png" alt="image-20230613142035115"></p>
<p>找到左侧的pages选项：</p>
<p>如果出现了这行字，表示部署成功，可以通过这个域名访问：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131421243.png" alt="image-20230613142150188"></p>
<blockquote>
<p>如果没有部署成功的话，可以查看一下这里的内容，是否配置成功，主要是：</p>
<ol>
<li>build and deployment选项的branch分支是否选择正确，是否是main分支，一般都是main分支。</li>
<li>在本地hexo目录下，使用hexo s本地部署，查看控制台是否报错，有可能是博客的front markdown没有写好，格式不对，多加了空格什么的。</li>
<li>或者不行的话，到仓库的Action选项卡中，重新跑一遍job试一下。</li>
</ol>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131426822.png" alt="image-20230613142606737"></p>
<p>另外，这里还有一个Custom domain自定义域名，如果有域名的话，可以在这里配置，具体配置的话，另起一篇再讲吧。</p>
</blockquote>
<p>最后部署成功的样子：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306131426206.png" alt="image-20230613142639000"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/370635512">超详细 Hexo + Github Pages 博客搭建教程</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>IOC高级-Bean与BeanDefinition</title>
    <url>/2023/07/13/05.Spring/IOC%E9%AB%98%E7%BA%A7-BeanDefinition/</url>
    <content><![CDATA[<h1 id="IOC高级-Bean与BeanDefinition"><a href="#IOC高级-Bean与BeanDefinition" class="headerlink" title="IOC高级-Bean与BeanDefinition"></a>IOC高级-Bean与BeanDefinition</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307131125914.jpeg" alt="a man standing in the middle of a desert"></p>
<h2 id="BeanDefinition概述"><a href="#BeanDefinition概述" class="headerlink" title="BeanDefinition概述"></a>BeanDefinition概述</h2><p><code>BeanDefinition</code> 也是一种<strong>配置元信息</strong>，它描述了 <strong>Bean 的定义信息</strong>。</p>
<blockquote>
<p>bean 的定义信息可以包含许多配置信息，包括构造函数参数，属性值和特定于容器的信息，例如初始化方法，静态工厂方法名称等。子 bean 定义可以从父 bean 定义继承配置数据。子 bean 的定义信息可以覆盖某些值，或者可以根据需要添加其他值。使用父 bean 和子 bean 的定义可以节省很多输入</p>
</blockquote>
<p>bean 的定义信息也是有<strong>层次性</strong>的（联想 <code>BeanFactory</code> 的层次性），bean 的定义信息可以继承自某个已经有的定义信息，并覆盖父信息的一些配置值。</p>
<h2 id="BeanDefinition接口的方法定义"><a href="#BeanDefinition接口的方法定义" class="headerlink" title="BeanDefinition接口的方法定义"></a>BeanDefinition接口的方法定义</h2><p><code>BeanDefinition</code> 整体包含以下几个部分：</p>
<ul>
<li>Bean 的类信息 - 全限定类名 ( beanClassName )</li>
<li>Bean 的属性 - 作用域 ( scope ) 、是否默认 Bean ( primary ) 、描述信息 ( description ) 等</li>
<li>Bean 的行为特征 - 是否延迟加载 ( lazy ) 、是否自动注入 ( autowireCandidate ) 、初始化 &#x2F; 销毁方法 ( initMethod &#x2F; destroyMethod ) 等</li>
<li>Bean 与其他 Bean 的关系 - 父 Bean 名 ( parentName ) 、依赖的 Bean ( dependsOn ) 等</li>
<li>Bean 的配置属性 - 构造器参数 ( constructorArgumentValues ) 、属性变量值 ( propertyValues ) 等</li>
</ul>
<p>由此可见，<code>BeanDefinition</code> 几乎把 bean 的所有信息都能收集并封装起来，可以说是很全面了。</p>
<h2 id="star-star-star-star-star-面试题：概述BeanDefinition"><a href="#star-star-star-star-star-面试题：概述BeanDefinition" class="headerlink" title=":star::star::star::star::star:面试题：概述BeanDefinition"></a>:star::star::star::star::star:面试题：概述BeanDefinition</h2><p><strong><code>BeanDefinition</code> 描述了 SpringFramework 中 bean 的元信息，它包含 bean 的类信息、属性、行为、依赖关系、配置信息等。<code>BeanDefinition</code> 具有层次性，并且可以在 IOC 容器初始化阶段被 <code>BeanDefinitionRegistryPostProcessor</code> 构造和注册，被 <code>BeanFactoryPostProcessor</code> 拦截修改等。</strong></p>
<h2 id="BeanDefinition的结构"><a href="#BeanDefinition的结构" class="headerlink" title="BeanDefinition的结构"></a>BeanDefinition的结构</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307131009380.webp" alt="img"></p>
<h3 id="AttributeAccessor"><a href="#AttributeAccessor" class="headerlink" title="AttributeAccessor"></a>AttributeAccessor</h3><p><strong>属性的访问器</strong>：定义用于将元数据附加到任意对象，或从任意对象访问元数据的通用协定的接口。</p>
<p>总结出第一个 <code>BeanDefinition</code> 的特征：**<code>BeanDefinition</code> 继承了 <code>AttributeAccessor</code> 接口，具有配置 bean 属性的功能。**</p>
<h3 id="BeanMetadataElement"><a href="#BeanMetadataElement" class="headerlink" title="BeanMetadataElement"></a>BeanMetadataElement</h3><p><strong>存放了 bean 的元信息</strong>， 只有一个方法，是获取 bean 的资源来源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanMetadataElement</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> Object <span class="title function_">getSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>资源来源，说白了，就是 bean 的文件 &#x2F; url 路径。咱们前面写的所有示例，都是在本地磁盘上的 .class 文件加载进来的，所以对应的也就应该是 <code>FileSystemResource</code></p>
<h3 id="AbstractBeanDefinition"><a href="#AbstractBeanDefinition" class="headerlink" title="AbstractBeanDefinition"></a>AbstractBeanDefinition</h3><p>到了 <code>BeanDefinition</code> 的第一个实现类了，作为 <code>BeanDefinition</code> 的抽象实现，它里面已经定义好了一些属性和功能（大部分都有了），大体包含以下内容：（只挑选部分重要属性）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bean的全限定类名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> Object beanClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的作用域为单实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">scope</span> <span class="operator">=</span> SCOPE_DEFAULT;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认bean都不是抽象的</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">abstractFlag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否延迟初始化</span></span><br><span class="line"><span class="keyword">private</span> Boolean lazyInit;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动注入模式(默认不自动注入)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">autowireMode</span> <span class="operator">=</span> AUTOWIRE_NO;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否参与IOC容器的自动注入(设置为false则它不会注入到其他bean，但其他bean可以注入到它本身)</span></span><br><span class="line"><span class="comment">// 可以这样理解：设置为false后，你们不要来找我，但我可以去找你们</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">autowireCandidate</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同类型的首选bean</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">primary</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bean的构造器参数和参数值列表</span></span><br><span class="line"><span class="keyword">private</span> ConstructorArgumentValues constructorArgumentValues;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bean的属性和属性值集合</span></span><br><span class="line"><span class="keyword">private</span> MutablePropertyValues propertyValues;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bean的初始化方法</span></span><br><span class="line"><span class="keyword">private</span> String initMethodName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bean的销毁方法</span></span><br><span class="line"><span class="keyword">private</span> String destroyMethodName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bean的资源来源</span></span><br><span class="line"><span class="keyword">private</span> Resource resource;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="GenericBeanDefinition"><a href="#GenericBeanDefinition" class="headerlink" title="GenericBeanDefinition"></a>GenericBeanDefinition</h3><p>又看到 <code>Generic</code> 了，它代表着通用、一般的，所以这种 <code>BeanDefinition</code> 也具有一般性。<code>GenericBeanDefinition</code> 的源码实现非常简单，仅仅是比 <code>AbstractBeanDefinition</code> 多了一个 <code>parentName</code> 属性而已。</p>
<p>由这个设计，可以得出以下几个结论：</p>
<ul>
<li><code>AbstractBeanDefinition</code> 已经完全可以构成 <code>BeanDefinition</code> 的实现了</li>
<li><code>GenericBeanDefinition</code> 就是 <code>AbstractBeanDefinition</code> 的非抽象扩展而已</li>
<li><code>GenericBeanDefinition</code> 具有层次性（可从父 <code>BeanDefinition</code> 处继承一些属性信息）</li>
</ul>
<h3 id="RootBeanDefinition与ChildBeanDefinition"><a href="#RootBeanDefinition与ChildBeanDefinition" class="headerlink" title="RootBeanDefinition与ChildBeanDefinition"></a>RootBeanDefinition与ChildBeanDefinition</h3><p><strong>root</strong> 和 <strong>child</strong> ，很明显这是父子关系的意思了呀。对于 <code>ChildBeanDefinition</code> ，它的设计实现与 <code>GenericBeanDefinition</code> 如出一辙，都是集成一个 <code>parentName</code> 来作为父 <code>BeanDefinition</code> 的 “指向引用” 。不过有一点要注意， <code>ChildBeanDefinition</code> 没有默认的无参构造器，必须要传入 <code>parentName</code> 才可以，但 <code>GenericBeanDefinition</code> 则有两种不同的构造器。</p>
<h3 id="AnnotatedBeanDefinition"><a href="#AnnotatedBeanDefinition" class="headerlink" title="AnnotatedBeanDefinition"></a>AnnotatedBeanDefinition</h3><p>它可以把 Bean 上的注解信息提供出来</p>
<h2 id="基于-Component的BeanDefinition"><a href="#基于-Component的BeanDefinition" class="headerlink" title="基于@Component的BeanDefinition"></a>基于@Component的BeanDefinition</h2><p>给 <code>Person</code> 上打一个 <code>@Component</code> 注解，然后使用 <code>AnnotationConfigApplicationContext</code> 来驱动扫描 <code>Person</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanDefinitionQuickstartComponentApplication</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(</span><br><span class="line">                <span class="string">&quot;com.linkedbear.spring.definition.a_quickstart.bean&quot;</span>);</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">personBeanDefinition</span> <span class="operator">=</span> ctx.getBeanDefinition(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">        System.out.println(personBeanDefinition);</span><br><span class="line">        System.out.println(personBeanDefinition.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>基于 xml 解析出来的 bean ，定义来源是 xml 配置文件；基于 <code>@Component</code> 注解解析出来的 bean ，定义来源是类的 .class 文件中。</strong></p>
<h2 id="基于-Bean的BeanDefinition"><a href="#基于-Bean的BeanDefinition" class="headerlink" title="基于@Bean的BeanDefinition"></a>基于@Bean的BeanDefinition</h2><p>编写一个配置类 <code>BeanDefinitionQuickstartConfiguration</code> ，使用 <code>@Bean</code> 注册一个 Person ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java复制代码<span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanDefinitionQuickstartConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后，使用这个配置类驱动 IOC 容器，并直接获取 <code>BeanDefinition</code> ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanDefinitionQuickstartBeanApplication</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(</span><br><span class="line">                BeanDefinitionQuickstartConfiguration.class);</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">personBeanDefinition</span> <span class="operator">=</span> ctx.getBeanDefinition(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">        System.out.println(personBeanDefinition);</span><br><span class="line">        System.out.println(personBeanDefinition.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体区别可以发现有这么几个：</p>
<ul>
<li>Bean 的类型是 Root bean （ <code>ConfigurationClassBeanDefinition</code> 继承自 <code>RootBeanDefinition</code> ）</li>
<li>Bean 的 className 不见了</li>
<li>自动注入模式为 <code>AUTOWIRE_CONSTRUCTOR</code> （构造器自动注入）</li>
<li>有 factoryBean 了：person 由 <code>beanDefinitionQuickstartConfiguration</code> 的 <code>person</code> 方法创建</li>
</ul>
<h2 id="star-star-star-【原理】BeanDefinition是如何生成的（简易理解）"><a href="#star-star-star-【原理】BeanDefinition是如何生成的（简易理解）" class="headerlink" title=":star::star::star:【原理】BeanDefinition是如何生成的（简易理解）"></a>:star::star::star:【原理】BeanDefinition是如何生成的（简易理解）</h2><ol>
<li>通过 xml 加载的 <code>BeanDefinition</code> ，它的读取工具是 <code>XmlBeanDefinitionReader</code> ，它会解析 xml 配置文件，最终来到 <code>DefaultBeanDefinitionDocumentReader</code> 的 <code>doRegisterBeanDefinitions</code> 方法，根据 xml 配置文件中的 bean 定义构造 <code>BeanDefinition</code> ，最底层创建 <code>BeanDefinition</code> 的位置在 <code>org.springframework.beans.factory.support.BeanDefinitionReaderUtils#createBeanDefinition</code> 。</li>
<li>通过模式注解 + 组件扫描的方式构造的 <code>BeanDefinition</code> ，它的扫描工具是 <code>ClassPathBeanDefinitionScanner</code> ，它会扫描指定包路径下包含特定模式注解的类，核心工作方法是 <code>doScan</code> 方法，它会调用到父类 <code>ClassPathScanningCandidateComponentProvider</code> 的 <code>findCandidateComponents</code> 方法，创建 <code>ScannedGenericBeanDefinition</code> 并返回。</li>
<li>通过配置类 + <code>@Bean</code> 注解的方式构造的 <code>BeanDefinition</code> 最复杂，它涉及到配置类的解析。配置类的解析要追踪到 <code>ConfigurationClassPostProcessor</code> 的 <code>processConfigBeanDefinitions</code> 方法，它会处理配置类，并交给 <code>ConfigurationClassParser</code> 来解析配置类，取出所有标注了 <code>@Bean</code> 的方法。随后，这些方法又被 <code>ConfigurationClassBeanDefinitionReader</code> 解析，最终在底层创建 <code>ConfigurationClassBeanDefinition</code> 并返回。</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>IOC高级-配置源&amp;配置元信息</title>
    <url>/2023/07/07/05.Spring/IOC%E9%AB%98%E7%BA%A7-%E9%85%8D%E7%BD%AE%E6%BA%90&amp;%E9%85%8D%E7%BD%AE%E5%85%83%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4a5586ec9cbe22db55e20dcff05a9d1b72f184d8e97b428c1eebf7aa4c46e277">743c80f9ef37fd771847ca62204e7d99b1365abff4f61471283e156e2da37e63b882b658557d2a7f4a95c58b9e43c044d016cab82eba2e45c21ca79c13b63c3840cf5dcc196a519b221f269564cbfc28abc38b6de871a88941d9f8caf940fa37f0a3174001ed064e21ac2f9da3d1120d22946bd4dc16c972b2114a09e4db8e2f46f4b28fbd7d964318736194deb6c6ce69deb4dea6cbaed2bc9c2b1c52a8a585f45d971e90dab985b402db3cc06e1079a14a936cfbdd27fc0eadfb0b5b500456c4cb5a3175e2fcec98cc5c72551ebd2bc4f9c2053d0b664ddd00ccc5774eb4a84ae980f697a041e3259494c13f02d98e7a1f18c0797d44be0a094be601bf1db66b801829b0955f8c3a8309d548f610c007c31e0f177c8d0a57817ccda395c3ab6aa6c3d6c273565956a148b7579b90f6988c0f09647f57e04fb5cef768aa5e554d6b18171283950c93e829a41649f578553b6ecef83950d55c569558057e0dbcc3cd3e13417b807c37ca2d33e3a361eb46e18d3f7fd9f464a3ca2acd6af95fad13c06bd2aaa8593894618feb193eef7597cbe93a8070c829645322708c4acf8635139eae6f4375a114a44db341c0c0876984dcd22c78f26148b64caf7e7098e61fe7385a68f55310816daa1fb51d95685f40bff3e08c3ed05d1ec4b774c2706d4cc797cc70be0fbaf407b95148bfe0e4e216891308cb5ea3622ce058aa7a99db1c2747b2ee6421e63c9a70640c2207a06516e3c1be0cf534134cb819e3702e71fd44c2eb8c9589cdd4be9ef08667362612c971e25d989a6e9087c5a01c35347d130f7149510731902788e9608082d4bbed9f986c28748efaee97d7afad2507fb5d2636c4cfce5c2554b31d4f7b9810849d8bf3328b06172175889a229086d559440040d269ef03f601fd4b045af02274f243ac94511adea716e97949bdd5aca65eed7e212b2f57efad2fa1d747404dd3becb54ab18adaaa67afd3fa412c737159ce9741d5a7111eb6e3f4f8fe925871df566944bc49b725e444f6c71cb302a6d742495f5bc825ced9f268740247d987f844229eecdf061fee6ee50e443c7fe77a6640a7236677bc46968b7ec967e54ecbd9430777d9ceb5bf66a1ee999c96cd9c5f9a383c88bbc4c88ab6ae9e0bbf35af542ac16b308a6c00c65fa3ff7e1da9d26de74fa00719320526f7cfa0e9df0ab3c5da5e7f5efa8b255953ba650da7b46bf2e2f1a2b6ee88e19c8f1b3f8788df3b16b7a4d63e724cd9c95609c6c50461e55439c83e04cd87aa1f43f4f3c0d824f4c0f1149769ebaf25d026c9311db7bc1d00111262e9d0402bf242bf7e9d997c9c3b5c669c88964df063e77a3d0d3d83a7b4d7966c01da328a9ffffacbfdd75e2db8ecf56b4b4a31b0e3c60df8c9563b9ae959829715f96db7d2c6c6ae9e262f91a1664fcf23c4cd3853f6380663a9415bb041e58b29bb84fc5333ca7190ea786a71bbac58b1b367cee0e1add087e812cbb0d49702bf3ab2ee418ac9abbf171f4e0278c96aa037a07da7611ba104c4285c1643f5749982fae61fd563d550302512e35788415b2c3a2d6d9b8a1c2854c6530451153c067c6d5615bfee4ddbe3d2cf5c7eede3fe6eb2deb07a060551ced441146231d4c0cd28cc6c43405368987ed204fa99be7491ab3b69c269a0c69a310e17c273df6a1114fe31e05a014b009f6e8eaab3bca237c91fdebce73875fb3d74a671b1a33473d2805fa79fbe2aa1c73ca215b3963c5f63b73c6e6d93456f1a1084de8a13585aa02df0ff8c90daa00ddefb5d4b9fe0635a7146e2a76f9d480f27fc868e4c202d27056cea8caac2d5ba2a5910fe6d6b1d1865bafd21556f140f6c6a046862c22a14bb0640a4e9b0cb833b79a8c879f3ffe46da4910258d2d55a8ff868e030290f4ade5002c31a08c01ff1c2d7d22eede7eeab32e8839bb965be16502c8c245048de257d9e28bab56e343069b4077b6e7e15a78348428cf121f0f238a914ca055d7612797bfcf5a4bb9ea08358f36aef2931d228038d08549a300598180523ea35913f8926abc00a37e40da4dd847bc710a818a9d682ec7a71d8df36c397742189b928ad8dd9dc9807ba83605071c5ac98ee00d4221d5aefdc817852a5e95aa6756090f09843da2990faf28367d1662489cb090c6ff51180b90d10f67221a0c1daeeafe9f8b08474e0db073f789f97002fcefd76f60ca5d3d6479fc49a328c6b6a03dcd08a4679a5716d624159635086bd469bbc39c199c8a771d8547899dde06e8cfeefb411f3016ffc5600ae115520b51888654a91e9df36035810ee0e5e67ad38774a166103081064c3d796ee0b62f6ceaf2108e5a9e3f102e5c582ca2ba8a791486d9cdbce44c3b5eab825e5da9666461048e9b4859105ff425927815e426c94fcf4e231204a60be76222046f7d5c0520bd0a04256665905387d1825accb9afdd214bdbad4fdc30884829a26ab479d0d19a222feeb3ab640e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK的keytool工具总结</title>
    <url>/2023/07/12/06.%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/JDK%E7%9A%84keytool%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="JDK的keytool工具总结"><a href="#JDK的keytool工具总结" class="headerlink" title="JDK的keytool工具总结"></a>JDK的keytool工具总结</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307122022899.jpeg" alt="a very tall mountain with a very steep face"></p>
<h2 id="keytool命令说明"><a href="#keytool命令说明" class="headerlink" title="keytool命令说明"></a>keytool命令说明</h2><table>
<thead>
<tr>
<th>项目</th>
<th>详细</th>
</tr>
</thead>
<tbody><tr>
<td>-certreq</td>
<td>创建证书请求</td>
</tr>
<tr>
<td>-changealias</td>
<td>变更证书私钥</td>
</tr>
<tr>
<td>-exportcert</td>
<td>导出证书</td>
</tr>
<tr>
<td>-genkeypair</td>
<td>创建密钥对</td>
</tr>
<tr>
<td>-genseckey</td>
<td>创建加密密钥</td>
</tr>
<tr>
<td>-gencert</td>
<td>依据证书请求创建证书</td>
</tr>
<tr>
<td>-importcert</td>
<td>导入证书或者证书链</td>
</tr>
<tr>
<td>-importpass</td>
<td>导入密码</td>
</tr>
<tr>
<td>-importkeystore</td>
<td>从其他keystore中导入一个或者所有条目</td>
</tr>
<tr>
<td>-printcert</td>
<td>打印证书内容</td>
</tr>
<tr>
<td>-printcertreq</td>
<td>打印证书请求的内容</td>
</tr>
<tr>
<td>-printcrl</td>
<td>打印CRL文件内容</td>
</tr>
<tr>
<td>-genkey</td>
<td>在用户主目录中创建一个默认文件”.keystore”,还会产生一个mykey的别名，mykey中包含用户的公钥、私钥和证书</td>
</tr>
<tr>
<td>-alias</td>
<td>产生别名 缺省值”mykey”</td>
</tr>
<tr>
<td>-keystore</td>
<td>指定密钥库的名称(产生的各类信息将不在.keystore文件中)</td>
</tr>
<tr>
<td>-keyalg</td>
<td>指定密钥的算法 (如 RSA DSA（如果不指定默认采用DSA）)</td>
</tr>
<tr>
<td>-validity</td>
<td>指定创建的证书有效期多少天 缺省值90天</td>
</tr>
<tr>
<td>-keysize</td>
<td>指定密钥长度 缺省值1024</td>
</tr>
<tr>
<td>-storepass</td>
<td>指定密钥库的密码(获取keystore信息所需的密码)</td>
</tr>
<tr>
<td>-keypass</td>
<td>指定别名条目的密码(私钥的密码)</td>
</tr>
<tr>
<td>-dname</td>
<td>指定证书拥有者信息 例如： “CN&#x3D;名字与姓氏,OU&#x3D;组织单位名称,O&#x3D;组织名称,L&#x3D;城市或区域名称,ST&#x3D;州或省份名称,C&#x3D;单位的两字母国家代码”</td>
</tr>
<tr>
<td>-list</td>
<td>显示密钥库中的证书信息 keytool -list -v -keystore 指定keystore -storepass 密码</td>
</tr>
<tr>
<td>-v</td>
<td>显示密钥库中的证书详细信息</td>
</tr>
<tr>
<td>-export</td>
<td>将别名指定的证书导出到文件 keytool -export -alias 需要导出的别名 -keystore 指定keystore -file 指定导出的证书位置及证书名称 -storepass 密码</td>
</tr>
<tr>
<td>-file	参数指定导出到文件的文件名</td>
<td>参数指定导出到文件的文件名</td>
</tr>
<tr>
<td>-delete</td>
<td>删除密钥库中某条目 keytool -delete -alias 指定需删除的别 -keystore 指定keystore -storepass 密码</td>
</tr>
<tr>
<td>-printcert</td>
<td>查看导出的证书信息 keytool -printcert -file 证书名称</td>
</tr>
<tr>
<td>-keypasswd</td>
<td>修改密钥库中指定条目口令</td>
</tr>
<tr>
<td>-storepasswd</td>
<td>修改keystore口令 keytool -storepasswd -keystore keystore的FULLPATH -storepass 原始密码  -new 新密码</td>
</tr>
<tr>
<td>-import</td>
<td>将已签名数字证书导入密钥库 keytool -import -alias 指定导入条目的别名 -keystore 指定keystore -file 需导入的证书</td>
</tr>
</tbody></table>
<h2 id="证书管理"><a href="#证书管理" class="headerlink" title="证书管理"></a>证书管理</h2><p>证书的发行有专门的CA机构，但是基本上都是要付费的。一般来说除非是非常正式的项目，一般的项目很多情况下使用自发行的证书即可。</p>
<table>
<thead>
<tr>
<th>认证方式</th>
<th>证书种类</th>
<th>详细</th>
</tr>
</thead>
<tbody><tr>
<td>单向认证</td>
<td>服务器端证书</td>
<td>客户端对服务器端的证书进行认证</td>
</tr>
<tr>
<td>双向认证</td>
<td>服务端证书&#x2F;客户端证书</td>
<td>客户端对服务器端的证书进行认证,同时服务器端对客户端的证书也进行认证</td>
</tr>
</tbody></table>
<h2 id="keystore生成"><a href="#keystore生成" class="headerlink" title="keystore生成"></a>keystore生成</h2><table>
<thead>
<tr>
<th>项目</th>
<th>详细</th>
</tr>
</thead>
<tbody><tr>
<td>alias名称</td>
<td>kstore</td>
</tr>
<tr>
<td>keypass</td>
<td>init123</td>
</tr>
<tr>
<td>算法</td>
<td>RSA</td>
</tr>
<tr>
<td>秘钥长度</td>
<td>2048</td>
</tr>
<tr>
<td>有效期限(天)</td>
<td>30</td>
</tr>
<tr>
<td>保存路径</td>
<td>&#x2F;tmp&#x2F;kstore.keystore</td>
</tr>
<tr>
<td>storepass</td>
<td>init234</td>
</tr>
</tbody></table>
<p>执行相应的指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> kstore -keypass init123 -keyalg RSA -keysize 2048 -validity 30 -keystore /tmp/kstore.keystore -storepass init234</span><br></pre></td></tr></table></figure>

<p>输入一些必要的信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@liumiaocn ~]<span class="comment"># keytool -genkey -alias kstore -keypass init123 -keyalg RSA -keysize 2048 -validity 30 -keystore /tmp/kstore.keystore -storepass init234</span></span><br><span class="line">What is your first and last name?</span><br><span class="line">  [Unknown]:  michael</span><br><span class="line">What is the name of your organizational unit?</span><br><span class="line">  [Unknown]:  liumiaocn</span><br><span class="line">What is the name of your organization?</span><br><span class="line">  [Unknown]:  ngo</span><br><span class="line">What is the name of your City or Locality?</span><br><span class="line">  [Unknown]:  dalian</span><br><span class="line">What is the name of your State or Province?</span><br><span class="line">  [Unknown]:  liaoning</span><br><span class="line">What is the two-letter country code <span class="keyword">for</span> this unit?</span><br><span class="line">  [Unknown]:  CN</span><br><span class="line">Is CN=michael, OU=liumiaocn, O=ngo, L=dalian, ST=liaoning, C=CN correct?</span><br><span class="line">  [no]:  <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">[root@liumiaocn ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="keystore确认"><a href="#keystore确认" class="headerlink" title="keystore确认"></a>keystore确认</h2><p>可以使用list子命令对keystore确认详细信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keytool -list  -v -keystore /tmp/kstore.keystore -storepass init234</span><br></pre></td></tr></table></figure>

<p>执行后参照：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@liumiaocn ~]<span class="comment"># keytool -list  -v -keystore /tmp/kstore.keystore -storepass init234</span></span><br><span class="line"></span><br><span class="line">Keystore <span class="built_in">type</span>: JKS</span><br><span class="line">Keystore provider: SUN</span><br><span class="line"></span><br><span class="line">Your keystore contains 1 entry</span><br><span class="line"></span><br><span class="line">Alias name: kstore</span><br><span class="line">Creation <span class="built_in">date</span>: Mar 10, 2017</span><br><span class="line">Entry <span class="built_in">type</span>: PrivateKeyEntry</span><br><span class="line">Certificate chain length: 1</span><br><span class="line">Certificate[1]:</span><br><span class="line">Owner: CN=michael, OU=liumiaocn, O=ngo, L=dalian, ST=liaoning, C=CN</span><br><span class="line">Issuer: CN=michael, OU=liumiaocn, O=ngo, L=dalian, ST=liaoning, C=CN</span><br><span class="line">Serial number: 58700a1</span><br><span class="line">Valid from: Fri Mar 10 17:46:00 EST 2017 <span class="keyword">until</span>: Sun Apr 09 18:46:00 EDT 2017</span><br><span class="line">Certificate fingerprints:</span><br><span class="line">         MD5:  C9:88:B5:3E:62:F1:31:4D:8B:81:9C:45:90:F1:0F:CF</span><br><span class="line">         SHA1: 59:C9:D3:3F:07:80:73:7C:7E:43:94:3B:E5:43:61:FF:14:F1:1A:CC</span><br><span class="line">         SHA256: 32:71:6C:1E:1F:F6:23:01:66:81:92:36:C8:6F:E3:8D:5B:32:C4:F2:10:94:D0:3D:8C:07:5B:91:7A:59:B2:56</span><br><span class="line">         Signature algorithm name: SHA256withRSA</span><br><span class="line">         Version: 3</span><br><span class="line"></span><br><span class="line">Extensions:</span><br><span class="line"></span><br><span class="line"><span class="comment">#1: ObjectId: 2.5.29.14 Criticality=false</span></span><br><span class="line">SubjectKeyIdentifier [</span><br><span class="line">KeyIdentifier [</span><br><span class="line">0000: 06 91 44 93 93 46 D0 EE   A9 B3 9C A6 6C 1A BD D4  ..D..F......l...</span><br><span class="line">0010: E3 EA 74 74                                        ..tt</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*******************************************</span><br><span class="line">*******************************************</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@liumiaocn ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="证书导出"><a href="#证书导出" class="headerlink" title="证书导出"></a>证书导出</h2><p>使用以下命令导出证书：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">keytool -<span class="built_in">export</span> -<span class="built_in">alias</span> kstore -keystore /tmp/kstore.keystore -file /tmp/kstore.crt -rfc -storepass init234</span><br></pre></td></tr></table></figure>

<p>注意: storepass的密码是&#x2F;tmp&#x2F;kstore.keystore生成时创建的密码，此处是作确认用，输入错误会提示：Keystore was tampered with, or password was incorrect</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@liumiaocn ~]<span class="comment"># keytool -export -alias kstore -keystore /tmp/kstore.keystore -file /tmp/kstore.crt -rfc -storepass init234</span></span><br><span class="line">Certificate stored <span class="keyword">in</span> file &lt;/tmp/kstore.crt&gt;</span><br><span class="line">[root@liumiaocn ~]<span class="comment"># file /tmp/kstore.crt</span></span><br><span class="line">/tmp/kstore.crt: PEM certificate</span><br><span class="line">[root@liumiaocn ~]<span class="comment">#</span></span><br><span class="line">[root@liumiaocn ~]<span class="comment">#</span></span><br><span class="line">[root@liumiaocn ~]<span class="comment"># cat /tmp/kstore.crt</span></span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIDaTCCAlGgAwIBAgIEBYcAoTANBgkqhkiG9w0BAQsFADBlMQswCQYDVQQGEwJD</span><br><span class="line">TjERMA8GA1UECBMIbGlhb25pbmcxDzANBgNVBAcTBmRhbGlhbjEMMAoGA1UEChMD</span><br><span class="line">bmdvMRIwEAYDVQQLEwlsaXVtaWFvY24xEDAOBgNVBAMTB21pY2hhZWwwHhcNMTcw</span><br><span class="line">MzEwMjI0NjAwWhcNMTcwNDA5MjI0NjAwWjBlMQswCQYDVQQGEwJDTjERMA8GA1UE</span><br><span class="line">CBMIbGlhb25pbmcxDzANBgNVBAcTBmRhbGlhbjEMMAoGA1UEChMDbmdvMRIwEAYD</span><br><span class="line">VQQLEwlsaXVtaWFvY24xEDAOBgNVBAMTB21pY2hhZWwwggEiMA0GCSqGSIb3DQEB</span><br><span class="line">AQUAA4IBDwAwggEKAoIBAQDL/LZP2FH8jybQD7KvKaqo0TS17xr8isWIkYcjVkvP</span><br><span class="line">T8ZoijWxSLckLI8r83g1Az+obfBuqDlbP/C2qGqf64MGw4mh6/CXnYNgvTOzgLOq</span><br><span class="line">xFgCSQebBhGx0u6gDCpgkoOdTzljDs6YR7Jv3rhIUodsPxc+Bzf8NXbDi1i6rvi5</span><br><span class="line">UW7ijLYFH1jAozTOlLtVWK1cw97BlXXcYhUEBsO682UzYvOeqCuPGcXKX7v1CsND</span><br><span class="line">j+OWf+kfAZ1RF7e3/8IC/FBuAVKHbMD9jWknwAMI7NqGx4Ej6K0LFL6C4XmZMHla</span><br><span class="line">sznT7Eyri0YS5jdWYI+duOEmcbh7MR1FzsZzcw8mmSKPAgMBAAGjITAfMB0GA1Ud</span><br><span class="line">DgQWBBQGkUSTk0bQ7qmznKZsGr3U4+p0dDANBgkqhkiG9w0BAQsFAAOCAQEAdRpS</span><br><span class="line">qAtxZ5JEzN/upzlT6Cp2kK6k7ZQ8ezKYDdUgBtqvMC/TaHwJCMHnvr0aSs24o8SI</span><br><span class="line">v0vmX01RXf5qzMmelMiJCA2EyRFIsKwKE6fWvyRaK1L5NiKbbivqiOHlvcw5pZfK</span><br><span class="line">iC/Cy6W0Y7KY4AtfNreAX7lmxQ611sc6F/Dz5rFv8s5gSaBg6oxc3HnXWYkR9iGu</span><br><span class="line">lYJUhV4tanXsgyhS1/N6PiLbwZ+8ryactI9XgCmao+WQ1M0uhEITZFr8TuRkrG9K</span><br><span class="line">fmvZUD+STRGDh4Us447vezeCw3s/r2rNsvxSpPhRd9PlPJShLe8lVM+bpkdilGwk</span><br><span class="line">yOAewyPCWGtaaWXwIQ==</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">[root@liumiaocn ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="证书确认"><a href="#证书确认" class="headerlink" title="证书确认"></a>证书确认</h2><p>生成的证书的格式是PEM certificate：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">keytool -printcert -file /tmp/kstore.crt</span><br></pre></td></tr></table></figure>

<p>执行参照：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@liumiaocn ~]<span class="comment"># keytool -printcert -file /tmp/kstore.crt</span></span><br><span class="line">Owner: CN=michael, OU=liumiaocn, O=ngo, L=dalian, ST=liaoning, C=CN</span><br><span class="line">Issuer: CN=michael, OU=liumiaocn, O=ngo, L=dalian, ST=liaoning, C=CN</span><br><span class="line">Serial number: 58700a1</span><br><span class="line">Valid from: Fri Mar 10 17:46:00 EST 2017 <span class="keyword">until</span>: Sun Apr 09 18:46:00 EDT 2017</span><br><span class="line">Certificate fingerprints:</span><br><span class="line">         MD5:  C9:88:B5:3E:62:F1:31:4D:8B:81:9C:45:90:F1:0F:CF</span><br><span class="line">         SHA1: 59:C9:D3:3F:07:80:73:7C:7E:43:94:3B:E5:43:61:FF:14:F1:1A:CC</span><br><span class="line">         SHA256: 32:71:6C:1E:1F:F6:23:01:66:81:92:36:C8:6F:E3:8D:5B:32:C4:F2:10:94:D0:3D:8C:07:5B:91:7A:59:B2:56</span><br><span class="line">         Signature algorithm name: SHA256withRSA</span><br><span class="line">         Version: 3</span><br><span class="line"></span><br><span class="line">Extensions:</span><br><span class="line"></span><br><span class="line"><span class="comment">#1: ObjectId: 2.5.29.14 Criticality=false</span></span><br><span class="line">SubjectKeyIdentifier [</span><br><span class="line">KeyIdentifier [</span><br><span class="line">0000: 06 91 44 93 93 46 D0 EE   A9 B3 9C A6 6C 1A BD D4  ..D..F......l...</span><br><span class="line">0010: E3 EA 74 74                                        ..tt</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">[root@liumiaocn ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="证书导入"><a href="#证书导入" class="headerlink" title="证书导入"></a>证书导入</h2><p>使用指令将证书导入到keystore中：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">keytool -import -<span class="built_in">alias</span> aliascrt -file /tmp/kstore.crt -keystore /tmp/kstore.keystore -storepass init234 -keypass init123</span><br></pre></td></tr></table></figure>

<p>导入前的确认：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@liumiaocn tmp]<span class="comment"># keytool -list  -v -keystore /tmp/kstore.keystore -storepass init234</span></span><br><span class="line"></span><br><span class="line">Keystore <span class="built_in">type</span>: JKS</span><br><span class="line">Keystore provider: SUN</span><br><span class="line"></span><br><span class="line">Your keystore contains 1 entry</span><br><span class="line"></span><br><span class="line">Alias name: kstore</span><br><span class="line">Creation <span class="built_in">date</span>: Mar 10, 2017</span><br><span class="line">Entry <span class="built_in">type</span>: PrivateKeyEntry</span><br><span class="line">Certificate chain length: 1</span><br><span class="line">Certificate[1]:</span><br><span class="line">Owner: CN=michael, OU=liumiaocn, O=ngo, L=dalian, ST=liaoning, C=CN</span><br><span class="line">Issuer: CN=michael, OU=liumiaocn, O=ngo, L=dalian, ST=liaoning, C=CN</span><br><span class="line">Serial number: 58700a1</span><br><span class="line">Valid from: Fri Mar 10 17:46:00 EST 2017 <span class="keyword">until</span>: Sun Apr 09 18:46:00 EDT 2017</span><br><span class="line">Certificate fingerprints:</span><br><span class="line">         MD5:  C9:88:B5:3E:62:F1:31:4D:8B:81:9C:45:90:F1:0F:CF</span><br><span class="line">         SHA1: 59:C9:D3:3F:07:80:73:7C:7E:43:94:3B:E5:43:61:FF:14:F1:1A:CC</span><br><span class="line">         SHA256: 32:71:6C:1E:1F:F6:23:01:66:81:92:36:C8:6F:E3:8D:5B:32:C4:F2:10:94:D0:3D:8C:07:5B:91:7A:59:B2:56</span><br><span class="line">         Signature algorithm name: SHA256withRSA</span><br><span class="line">         Version: 3</span><br><span class="line"></span><br><span class="line">Extensions:</span><br><span class="line"></span><br><span class="line"><span class="comment">#1: ObjectId: 2.5.29.14 Criticality=false</span></span><br><span class="line">SubjectKeyIdentifier [</span><br><span class="line">KeyIdentifier [</span><br><span class="line">0000: 06 91 44 93 93 46 D0 EE   A9 B3 9C A6 6C 1A BD D4  ..D..F......l...</span><br><span class="line">0010: E3 EA 74 74                                        ..tt</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*******************************************</span><br><span class="line">*******************************************</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@liumiaocn tmp]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>导入之后的确认：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@liumiaocn tmp]<span class="comment"># keytool -list  -v -keystore /tmp/kstore.keystore -storepass init234</span></span><br><span class="line"></span><br><span class="line">Keystore <span class="built_in">type</span>: JKS</span><br><span class="line">Keystore provider: SUN</span><br><span class="line"></span><br><span class="line">Your keystore contains 2 entries</span><br><span class="line"></span><br><span class="line">Alias name: kstore</span><br><span class="line">Creation <span class="built_in">date</span>: Mar 10, 2017</span><br><span class="line">Entry <span class="built_in">type</span>: PrivateKeyEntry</span><br><span class="line">Certificate chain length: 1</span><br><span class="line">Certificate[1]:</span><br><span class="line">Owner: CN=michael, OU=liumiaocn, O=ngo, L=dalian, ST=liaoning, C=CN</span><br><span class="line">Issuer: CN=michael, OU=liumiaocn, O=ngo, L=dalian, ST=liaoning, C=CN</span><br><span class="line">Serial number: 58700a1</span><br><span class="line">Valid from: Fri Mar 10 17:46:00 EST 2017 <span class="keyword">until</span>: Sun Apr 09 18:46:00 EDT 2017</span><br><span class="line">Certificate fingerprints:</span><br><span class="line">         MD5:  C9:88:B5:3E:62:F1:31:4D:8B:81:9C:45:90:F1:0F:CF</span><br><span class="line">         SHA1: 59:C9:D3:3F:07:80:73:7C:7E:43:94:3B:E5:43:61:FF:14:F1:1A:CC</span><br><span class="line">         SHA256: 32:71:6C:1E:1F:F6:23:01:66:81:92:36:C8:6F:E3:8D:5B:32:C4:F2:10:94:D0:3D:8C:07:5B:91:7A:59:B2:56</span><br><span class="line">         Signature algorithm name: SHA256withRSA</span><br><span class="line">         Version: 3</span><br><span class="line"></span><br><span class="line">Extensions:</span><br><span class="line"></span><br><span class="line">\<span class="comment">#1: ObjectId: 2.5.29.14 Criticality=false</span></span><br><span class="line">SubjectKeyIdentifier [</span><br><span class="line">KeyIdentifier [</span><br><span class="line">0000: 06 91 44 93 93 46 D0 EE   A9 B3 9C A6 6C 1A BD D4  ..D..F......l...</span><br><span class="line">0010: E3 EA 74 74                                        ..tt</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*******************************************</span><br><span class="line">*******************************************</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Alias name: aliascrt</span><br><span class="line">Creation <span class="built_in">date</span>: Mar 10, 2017</span><br><span class="line">Entry <span class="built_in">type</span>: trustedCertEntry</span><br><span class="line"></span><br><span class="line">Owner: CN=michael, OU=liumiaocn, O=ngo, L=dalian, ST=liaoning, C=CN</span><br><span class="line">Issuer: CN=michael, OU=liumiaocn, O=ngo, L=dalian, ST=liaoning, C=CN</span><br><span class="line">Serial number: 58700a1</span><br><span class="line">Valid from: Fri Mar 10 17:46:00 EST 2017 <span class="keyword">until</span>: Sun Apr 09 18:46:00 EDT 2017</span><br><span class="line">Certificate fingerprints:</span><br><span class="line">         MD5:  C9:88:B5:3E:62:F1:31:4D:8B:81:9C:45:90:F1:0F:CF</span><br><span class="line">         SHA1: 59:C9:D3:3F:07:80:73:7C:7E:43:94:3B:E5:43:61:FF:14:F1:1A:CC</span><br><span class="line">         SHA256: 32:71:6C:1E:1F:F6:23:01:66:81:92:36:C8:6F:E3:8D:5B:32:C4:F2:10:94:D0:3D:8C:07:5B:91:7A:59:B2:56</span><br><span class="line">         Signature algorithm name: SHA256withRSA</span><br><span class="line">         Version: 3</span><br><span class="line"></span><br><span class="line">Extensions:</span><br><span class="line"></span><br><span class="line">\<span class="comment">#1: ObjectId: 2.5.29.14 Criticality=false</span></span><br><span class="line">SubjectKeyIdentifier [</span><br><span class="line">KeyIdentifier [</span><br><span class="line">0000: 06 91 44 93 93 46 D0 EE   A9 B3 9C A6 6C 1A BD D4  ..D..F......l...</span><br><span class="line">0010: E3 EA 74 74                                        ..tt</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*******************************************</span><br><span class="line">*******************************************</span><br></pre></td></tr></table></figure>

<h2 id="证书删除"><a href="#证书删除" class="headerlink" title="证书删除"></a>证书删除</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">keytool -delete -<span class="built_in">alias</span> aliascrt -keystore /tmp/kstore.keystore -storepass init234</span><br></pre></td></tr></table></figure>







<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/liumiaocn/article/details/61921014">Java Keytool工具简介</a></p>
]]></content>
      <categories>
        <category>加密算法</category>
      </categories>
      <tags>
        <tag>keytool</tag>
        <tag>加密工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA和AES加密工具类算法</title>
    <url>/2023/07/11/06.%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/RSA%E5%92%8CAES%E5%8A%A0%E5%AF%86%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="RSA和AES加密工具类算法"><a href="#RSA和AES加密工具类算法" class="headerlink" title="RSA和AES加密工具类算法"></a>RSA和AES加密工具类算法</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307111722580.jpeg" alt="a person walking up the side of a snow covered mountain"></p>
<h2 id="RSA工具类"><a href="#RSA工具类" class="headerlink" title="RSA工具类"></a>RSA工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.security.rsa.RSAPrivateCrtKeyImpl;</span><br><span class="line"><span class="keyword">import</span> sun.security.rsa.RSAPublicKeyImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RSAUtil</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALGORITHM</span> <span class="operator">=</span> <span class="string">&quot;RSA&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成密钥对</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> KeyPair <span class="title function_">genKeyPair</span><span class="params">(<span class="type">int</span> keyLength)</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">keyPairGenerator</span> <span class="operator">=</span> KeyPairGenerator.getInstance(ALGORITHM);</span><br><span class="line">        keyPairGenerator.initialize(keyLength);</span><br><span class="line">        <span class="keyword">return</span> keyPairGenerator.generateKeyPair();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//以base64编码保存密钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveKey</span><span class="params">(Key key, String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">keyPath</span> <span class="operator">=</span> Paths.get(path);</span><br><span class="line">        Files.write(keyPath, Base64.getEncoder().encode(key.getEncoded()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取公钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PublicKey <span class="title function_">readPublicKey</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">keyPath</span> <span class="operator">=</span> Paths.get(path);</span><br><span class="line">        <span class="type">byte</span>[] keyBytes = Files.readAllBytes(keyPath);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RSAPublicKeyImpl</span>(Base64.getDecoder().decode(keyBytes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取密钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PrivateKey <span class="title function_">readPrivateKey</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">keyPath</span> <span class="operator">=</span> Paths.get(path);</span><br><span class="line">        <span class="type">byte</span>[] keyBytes = Files.readAllBytes(keyPath);</span><br><span class="line">        <span class="keyword">return</span> RSAPrivateCrtKeyImpl.newKey(Base64.getDecoder().decode(keyBytes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//公钥加密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String content, PublicKey publicKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//选择算法,创建实例</span></span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM);</span><br><span class="line">        <span class="comment">//选择模式,结合公钥初始化</span></span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        <span class="type">byte</span>[] result = cipher.doFinal(content.getBytes());</span><br><span class="line">        <span class="comment">//转码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64Result</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(result);</span><br><span class="line">        <span class="keyword">return</span> base64Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私钥解密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decrypt</span><span class="params">(String content, PrivateKey privateKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建实例</span></span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM);</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line">        <span class="comment">//转码</span></span><br><span class="line">        <span class="type">byte</span>[] encodedBytes = Base64.getDecoder().decode(content.getBytes());</span><br><span class="line">        <span class="comment">//解密</span></span><br><span class="line">        <span class="type">byte</span>[] result = cipher.doFinal(encodedBytes);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//确保目录存在</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/home/duoyi/encrypt/&quot;</span>);</span><br><span class="line">            f.mkdirs();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> RSAUtil.genKeyPair(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取公钥</span></span><br><span class="line">            <span class="type">PublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> keyPair.getPublic();</span><br><span class="line">            System.out.println(<span class="string">&quot;公钥：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(publicKey.getEncoded())));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取私钥</span></span><br><span class="line">            <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">            System.out.println(<span class="string">&quot;私钥：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(privateKey.getEncoded())));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//保存密钥</span></span><br><span class="line">            RSAUtil.saveKey(publicKey, <span class="string">&quot;/home/duoyi/encrypt/rsa.pub&quot;</span>);</span><br><span class="line">            RSAUtil.saveKey(privateKey, <span class="string">&quot;/home/duoyi/encrypt/rsa.pri&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;this is content&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//读取密钥</span></span><br><span class="line">            <span class="type">PublicKey</span> <span class="variable">pubKey</span> <span class="operator">=</span> RSAUtil.readPublicKey(<span class="string">&quot;/home/duoyi/encrypt/rsa.pub&quot;</span>);</span><br><span class="line">            <span class="type">PrivateKey</span> <span class="variable">priKey</span> <span class="operator">=</span> RSAUtil.readPrivateKey(<span class="string">&quot;/home/duoyi/encrypt/rsa.pri&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//加密</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">encryptBase64</span> <span class="operator">=</span> RSAUtil.encrypt(content, pubKey);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解密</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> decrypt(encryptBase64, priKey);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;密文为:&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getDecoder().decode(encryptBase64.getBytes())));</span><br><span class="line">            System.out.println(<span class="string">&quot;密文转码后为:&quot;</span> + encryptBase64);</span><br><span class="line">            System.out.println(<span class="string">&quot;转码后解码为:&quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AES工具类"><a href="#AES工具类" class="headerlink" title="AES工具类"></a>AES工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AESUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALGORITHM</span> <span class="operator">=</span> <span class="string">&quot;AES&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RANDOM_ALGORITHM</span> <span class="operator">=</span> <span class="string">&quot;SHA1PRNG&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//选择算法,根据密码生成密钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">genKey</span><span class="params">(String password)</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        <span class="type">KeyGenerator</span> <span class="variable">keyGenerator</span> <span class="operator">=</span> KeyGenerator.getInstance(ALGORITHM);</span><br><span class="line">        <span class="type">SecureRandom</span> <span class="variable">random</span> <span class="operator">=</span> SecureRandom.getInstance(RANDOM_ALGORITHM);</span><br><span class="line">        random.setSeed(password.getBytes());<span class="comment">//设置密钥</span></span><br><span class="line">        keyGenerator.init(random);</span><br><span class="line">        <span class="keyword">return</span> keyGenerator.generateKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以base64编码保存密钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveKey</span><span class="params">(Key key, String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">keyPath</span> <span class="operator">=</span> Paths.get(path);</span><br><span class="line">        Files.write(keyPath, Base64.getEncoder().encode(key.getEncoded()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取密钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">readSecretKey</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">keyPath</span> <span class="operator">=</span> Paths.get(path);</span><br><span class="line">        <span class="type">byte</span>[] keyBytes = Files.readAllBytes(keyPath);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(Base64.getDecoder().decode(keyBytes), ALGORITHM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String content, SecretKey secretKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//指定算法创建Cipher实例</span></span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM);<span class="comment">//算法是AES</span></span><br><span class="line">        <span class="comment">//选择模式，结合密钥初始化Cipher实例</span></span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, secretKey);</span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        <span class="type">byte</span>[] result = cipher.doFinal(content.getBytes());</span><br><span class="line">        <span class="comment">//使用Base64对密文进行转码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64Result</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(result);</span><br><span class="line">        <span class="keyword">return</span> base64Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decrpyt</span><span class="params">(String content, SecretKey secretKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取实例</span></span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM);</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, secretKey);</span><br><span class="line">        <span class="comment">//转码</span></span><br><span class="line">        <span class="type">byte</span>[] encodedBytes = Base64.getDecoder().decode(content.getBytes());</span><br><span class="line">        <span class="comment">//解密</span></span><br><span class="line">        <span class="type">byte</span>[] result = cipher.doFinal(encodedBytes);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//确保目录存在</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/home/duoyi/encrypt/&quot;</span>);</span><br><span class="line">            f.mkdirs();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;this is content&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;passwd&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> AESUtil.genKey(password);</span><br><span class="line"></span><br><span class="line">            AESUtil.saveKey(key, <span class="string">&quot;/home/duoyi/encrypt/aes.key&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">encryptBase64</span> <span class="operator">=</span> AESUtil.encrypt(content, key);</span><br><span class="line"></span><br><span class="line">            <span class="type">SecretKey</span> <span class="variable">readKey</span> <span class="operator">=</span> AESUtil.readSecretKey(<span class="string">&quot;/home/duoyi/encrypt/aes.key&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> AESUtil.decrpyt(encryptBase64, readKey);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;密文为:&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getDecoder().decode(encryptBase64.getBytes())));</span><br><span class="line">            System.out.println(<span class="string">&quot;密文转码后为:&quot;</span> + encryptBase64);</span><br><span class="line">            System.out.println(<span class="string">&quot;转码后解码为:&quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>加密算法</category>
      </categories>
      <tags>
        <tag>加密工具类</tag>
        <tag>RSA</tag>
        <tag>AES</tag>
      </tags>
  </entry>
  <entry>
    <title>无标题</title>
    <url>/2024/04/05/06.%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/keytool%E7%94%9F%E6%88%90%E5%85%AC%E7%A7%81%E9%92%A5%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="keytool生成公私钥指令"><a href="#keytool生成公私钥指令" class="headerlink" title="keytool生成公私钥指令"></a>keytool生成公私钥指令</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">keytool -genkeypair -keysize 1024 -validity 3650 -<span class="built_in">alias</span> <span class="string">&quot;privateKey&quot;</span> -keystore <span class="string">&quot;privateKeys.keystore&quot;</span> -storepass <span class="string">&quot;pubwd123456&quot;</span> -keypass <span class="string">&quot;priwd123456&quot;</span> -dname <span class="string">&quot;CN=localhost, OU=localhost, O=localhost, L=SH, ST=SH, C=CN&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">keytool -exportcert -<span class="built_in">alias</span> <span class="string">&quot;privateKey&quot;</span> -keystore <span class="string">&quot;privateKeys.keystore&quot;</span> -storepass <span class="string">&quot;pubwd123456&quot;</span> -file <span class="string">&quot;certfile.cer&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">keytool -import -<span class="built_in">alias</span> <span class="string">&quot;publicCert&quot;</span> -file <span class="string">&quot;certfile.cer&quot;</span> -keystore <span class="string">&quot;publicCerts.keystore&quot;</span> -storepass <span class="string">&quot;pubwd123456&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>非对称加密算法</title>
    <url>/2023/07/11/06.%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307111140086.jpeg" alt="a person standing in a field at sunset"></p>
<p>非对称加密算法主要有RSA、DSA、ECC和DH算法。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>非对称加密算法的特点？</p>
<p>非对称加密算法需要两个密钥：公钥publickey和私钥privatekey。公钥和私钥是一对儿。</p>
<p>如果用<strong>公钥</strong>对数据加密，那么只能用对应的<strong>私钥</strong>解密；</p>
<p>如果用<strong>私钥</strong>对数据加密，只能用对应的<strong>公钥</strong>解密。</p>
<p>因为加密和解密使用的是不同的密钥，所以称为非对称加密。</p>
<p>缺点是，加解密速度慢。</p>
<p>优点是，算法强度复杂，安全性依赖算法与密钥。非对称密钥体制有两种密钥，其中一个是公开的，这样就可以不需要像对称密码那样传输对方的密钥了。这样安全性就大了很多。</p>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307111008052.png" alt="img"></p>
<ol>
<li>首先双方交换公钥，这时候假设左侧是A，右侧是B，则A拥有了公钥B，B拥有了公钥A；</li>
<li>此时，如果A向B发送信息的话，只需要使用公钥B加密，然后B接收之后，用私钥B解密就可以得到信息了。</li>
<li>同理，如果B向A发送消息的话，只需要使用公钥A进行加密，然后A接收之后，用私钥A解密就可以得到信息。</li>
</ol>
<h2 id="主要的算法"><a href="#主要的算法" class="headerlink" title="主要的算法"></a>主要的算法</h2><p>主要使用的算法有RSA、Elgamal、背包算法、Rabin、D-H、ECC（椭圆曲线加密算法）。</p>
<p>其中最常用的是RSA算法。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>(1) 信息加密</p>
<p>收信者是唯一能够解开加密信息的人，因此收信者手里的必须是私钥。发信者手里的是公钥，其它人知道公钥没有关系，因为其它人发来的信息对收信者没有意义。</p>
<p>(2) 登录认证</p>
<p>客户端需要将认证标识传送给服务器，此认证标识 (可能是一个随机数) 其它客户端可以知道，因此需要用私钥加密，客户端保存的是私钥。服务器端保存的是公钥，其它服务器知道公钥没有关系，因为客户端不需要登录其它服务器。</p>
<p>(3) 数字签名</p>
<p>数字签名是为了表明信息没有受到伪造，确实是信息拥有者发出来的，附在信息原文的后面。就像手写的签名一样，具有不可抵赖性和简洁性。</p>
<p>简洁性：对信息原文做哈希运算，得到消息摘要，信息越短加密的耗时越少。</p>
<p>不可抵赖性：信息拥有者要保证签名的唯一性，必须是唯一能够加密消息摘要的人，因此必须用私钥加密 (就像字迹他人无法学会一样)，得到签名。如果用公钥，那每个人都可以伪造签名了。</p>
<p>(4) 数字证书</p>
<p>问题起源：对1和3，发信者怎么知道从网上获取的公钥就是真的？没有遭受中间人攻击？</p>
<p>这样就需要第三方机构来保证公钥的合法性，这个第三方机构就是 CA (Certificate Authority)，证书中心。</p>
<p>CA 用自己的私钥对信息原文所有者发布的公钥和相关信息进行加密，得出的内容就是数字证书。</p>
<p>信息原文的所有者以后发布信息时，除了带上自己的签名，还带上数字证书，就可以保证信息不被篡改了。信息的接收者先用 CA给的公钥解出信息所有者的公钥，这样可以保证信息所有者的公钥是真正的公钥，然后就能通过该公钥证明数字签名是否真实了。</p>
<h3 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h3><p>RSA 是目前最有影响力的公钥加密算法，该算法基于一个十分简单的数论事实：将两个大素数相乘十分容易，但想要对其乘积进行因式分解却极其困难，<strong>因此可以将乘积公开作为加密密钥，即公钥，而两个大素数组合成私钥</strong>。公钥是可发布的供任何人使用，私钥则为自己所有，供解密之用。</p>
<p>工作流程：</p>
<p>A 要把信息发给 B 为例，确定角色：A 为加密者，B 为解密者。首先由 B 随机确定一个 KEY，称之为私钥，将这个 KEY 始终保存在机器 B 中而不发出来；然后，由这个 KEY 计算出另一个 KEY，称之为公钥。这个公钥的特性是几乎不可能通过它自身计算出生成它的私钥。接下来通过网络把这个公钥传给 A，A 收到公钥后，利用公钥对信息加密，并把密文通过网络发送到 B，最后 B 利用已知的私钥，就能对密文进行解码了。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307111102329.png" alt="image-20230711110259275"></p>
<p>运算速度：</p>
<p>RSA最快也比DES慢上好几倍，RSA速度是同级安全级别的对称加密算法的1000分之一。</p>
<p>比起 DES 和其它对称算法来说，RSA 要慢得多。实际上一般使用一种对称算法来加密信息，然后用 RSA 来加密比较短的公钥，然后将用 RSA 加密的公钥和用对称算法加密的消息发送给接收方。</p>
<p>这样一来对随机数的要求就更高了，尤其对产生对称密码的要求非常高，否则的话可以越过 RSA 来直接攻击对称密码。</p>
<p>缺点：有可能会有中间人攻击。</p>
<p>和其它加密过程一样，对 RSA 来说分配公钥的过程是非常重要的。分配公钥的过程必须能够抵挡中间人攻击。假设 A 交给 B 一个公钥，并使 B 相信这是A 的公钥，并且 C 可以截下 A 和 B 之间的信息传递，那么 C 可以将自己的公钥传给 B，B 以为这是 A 的公钥。C 可以将所有 B 传递给 A 的消息截下来，将这个消息用自己的密钥解密，读这个消息，然后将这个消息再用 A 的公钥加密后传给 A。理论上 A 和 B 都不会发现 C 在偷听它们的消息，今天人们一般用数字认证来防止这样的攻击。</p>
<h3 id="DSA算法"><a href="#DSA算法" class="headerlink" title="DSA算法"></a>DSA算法</h3><p>DSA (Digital Signature Algorithm) 是 Schnorr 和 ElGamal 签名算法的变种，被美国 NIST 作为 DSS (DigitalSignature Standard)。 DSA 是基于整数有限域离散对数难题的。</p>
<p>简单的说，这是一种更高级的验证方式，用作数字签名。<strong>不单单只有公钥、私钥，还有数字签名</strong>。私钥加密生成数字签名，公钥验证数据及签名，如果数据和签名不匹配则认为验证失败。数字签名的作用就是校验数据在传输过程中不被修改，数字签名，是单向加密的升级。</p>
<p>工作流程：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307111130097.png" alt="img"></p>
<p>(1) 使用<strong>消息摘要算法</strong>将<strong>发送数据</strong>加密生成<strong>数字摘要</strong>。<br>(2) 发送方用自己的<strong>私钥</strong>对<strong>摘要</strong>再加密，形成<strong>数字签名</strong>。<br>(3) 将<strong>原文</strong>和<strong>加密的摘要</strong>同时传给对方。<br>(4) 接受方用<strong>发送方的公钥</strong>对<strong>摘要</strong>解密，同时对收到的数据用<strong>消息摘要算法</strong>产生同一<strong>摘要</strong>。<br>(5) 将<strong>解密后的摘要</strong>和收到的数据在接收方重新加密<strong>产生的摘要</strong>相互对比，如果两者一致，则说明在传送过程中信息没有破坏和篡改。否则，则说明信息已经失去安全性和保密性。</p>
<h3 id="ECC算法"><a href="#ECC算法" class="headerlink" title="ECC算法"></a>ECC算法</h3><p>椭圆加密算法（ECC）是一种公钥加密算法，最初由 Koblitz 和 Miller 两人于1985年提出，其数学基础是利用椭圆曲线上的有理点构成 Abel 加法群上椭圆离散对数的计算困难性。公钥密码体制根据其所依据的难题一般分为三类：大整数分解问题类、离散对数问题类、椭圆曲线类。有时也把椭圆曲线类归为离散对数类。</p>
<p>ECC 的主要优势是在某些情况下它比其他的方法使用更小的密钥 (比如 RSA)，提供相当的或更高等级的安全。ECC 的另一个优势是可以定义群之间的双线性映射，基于 Weil 对或是 Tate 对；双线性映射已经在密码学中发现了大量的应用，例如基于身份的加密。不过一个缺点是加密和解密操作的实现比其他机制花费的时间长。</p>
<p>ECC 被广泛认为是在给定密钥长度的情况下，最强大的非对称算法，因此在对带宽要求十分紧的连接中会十分有用。</p>
<p>优点：</p>
<p>(1) 安全性高，有研究表示160位的椭圆密钥与1024位的 RSA 密钥安全性相同。</p>
<p>(2) 处理速度快，在私钥的加密解密速度上，ECC 算法比 RSA、DSA 速度更快，存储空间占用小，带宽要求低。 </p>
<h3 id="DH算法"><a href="#DH算法" class="headerlink" title="DH算法"></a>DH算法</h3><p>DH，全称为”Diffie-Hellman”，它是一种确保共享 KEY 安全穿越不安全网络的方法，也就是常说的密钥一致协议。由公开密钥密码体制的奠基人 Diffie 和 Hellman 所提出的一种思想。简单的说就是允许两名用户在公开媒体上交换信息以生成”一致”的、可以共享的密钥。也就是由甲方产出一对密钥 (公钥、私钥)，乙方依照甲方公钥产生乙方密钥对 (公钥、私钥)。</p>
<p>以此为基线，作为数据传输保密基础，同时双方使用同一种对称加密算法构建本地密钥 (SecretKey) 对数据加密。这样，在互通了本地密钥 (SecretKey) 算法后，甲乙双方公开自己的公钥，使用对方的公钥和刚才产生的私钥加密数据，同时可以使用对方的公钥和自己的私钥对数据解密。不单单是甲乙双方两方，可以扩展为多方共享数据通讯，这样就完成了网络交互数据的安全通讯。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/u014294681/article/details/86705999">加解密篇 - 非对称加密算法 (RSA、DSA、ECC、DH)</a></p>
]]></content>
      <categories>
        <category>加密算法</category>
      </categories>
      <tags>
        <tag>RSA</tag>
        <tag>DSA</tag>
        <tag>非对称加密</tag>
      </tags>
  </entry>
  <entry>
    <title>无标题</title>
    <url>/2024/04/05/07.%E6%97%A5%E5%B8%B8%E6%8E%92%E9%94%99%E8%AE%B0%E5%BD%95/IO%20error%20on%20POST%20request%20for%20xxx%20Connection%20reset;%20Connection%20reset/</url>
    <content><![CDATA[<h1 id="I-x2F-O-error-on-POST-request-for-“xxx”-Connection-reset-Connection-reset"><a href="#I-x2F-O-error-on-POST-request-for-“xxx”-Connection-reset-Connection-reset" class="headerlink" title="I&#x2F;O error on POST request for “xxx”: Connection reset; Connection reset"></a>I&#x2F;O error on POST request for “xxx”: Connection reset; Connection reset</h1><h2 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h2><p>I&#x2F;O error on POST request for “<a href="http://cloud-gateway.cmp-stg.svc.cluster.local:31802/cv-console-iam/oauth/token">http://cloud-gateway.cmp-stg.svc.cluster.local:31802/cv-console-iam/oauth/token</a>“: Connection reset; nested exception is java.net.SocketException: Connection reset</p>
<h2 id="查到的解决方案："><a href="#查到的解决方案：" class="headerlink" title="查到的解决方案："></a>查到的解决方案：</h2><p>加载证书，但是不知道为什么加载证书以及为什么要加载证书，等出现问题必须解决的时候再考虑。还有，同样调用相同的api，为什么别的没问题？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value =&quot;/gettokens&quot;, method = RequestMethod.POST, produces =&quot;application/json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> ResponseEntity&lt;TokenModel&gt; <span class="title function_">GetTokens</span><span class="params">(<span class="meta">@RequestBody</span> RequestBodyJson requestBodyJson)</span></span><br><span class="line">        <span class="keyword">throws</span> KeyManagementException, NoSuchAlgorithmException, KeyStoreException &#123;</span><br><span class="line">    ResponseEntity&lt;TokenModel&gt; response = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">TrustStrategy</span> <span class="variable">acceptingTrustStrategy</span> <span class="operator">=</span> (X509Certificate[] chain, String authType) -&gt; <span class="literal">true</span>;</span><br><span class="line">    <span class="type">SSLContext</span> <span class="variable">sslContext</span> <span class="operator">=</span> org.apache.http.ssl.SSLContexts.custom()</span><br><span class="line">            .loadTrustMaterial(<span class="literal">null</span>, acceptingTrustStrategy).build();</span><br><span class="line">    <span class="type">SSLConnectionSocketFactory</span> <span class="variable">csf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SSLConnectionSocketFactory</span>(sslContext);</span><br><span class="line">    <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.custom()</span><br><span class="line">            .setSSLSocketFactory(csf).build();</span><br><span class="line">    <span class="type">HttpComponentsClientHttpRequestFactory</span> <span class="variable">requestFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpComponentsClientHttpRequestFactory</span>();</span><br><span class="line">    requestFactory.setHttpClient(httpClient);</span><br><span class="line">    <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>(requestFactory);      </span><br><span class="line">    <span class="keyword">try</span> &#123;                          </span><br><span class="line">        MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>&lt;String, String&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        headers.setAll(map);</span><br><span class="line">        HttpEntity&lt; ? &gt; _HttpEntityRequestBodyJson = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(requestBodyJson, headers);</span><br><span class="line">        response= restTemplate.exchange(url, HttpMethod.POST,_HttpEntityRequestBodyJson, <span class="keyword">new</span> <span class="title class_">ParameterizedTypeReference</span>&lt;TokenModel&gt;() &#123;&#125;);  </span><br><span class="line">        System.out.println(response.getBody());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>类与类之间的交互关系</title>
    <url>/2023/07/15/08.%20%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%B1%BB%E4%B8%8E%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BA%A4%E4%BA%92%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h1 id="类与类之间的交互关系"><a href="#类与类之间的交互关系" class="headerlink" title="类与类之间的交互关系"></a>类与类之间的交互关系</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307151450366.jpeg" alt="a couple of animals standing on top of a rocky hillside"></p>
<p>UML 统一建模语言中定义了六种类之间的关系。它们分别是：泛化、实现、关联、聚合、组合、依赖</p>
<h2 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h2><p>泛化（Generalization）可以简单理解为继承关系。具体到 Java 代码就是下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123; ... &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>实现（Realization）一般是指接口和实现类之间的关系。具体到 Java 代码就是下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">A</span> &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">A</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>聚合（Aggregation）是一种包含关系，A 类对象包含 B 类对象，B 类对象的生命周期可以不依赖 A 类对象的生命周期，也就是说可以单独销毁 A 类对象而不影响 B 对象，比如课程与学生之间的关系。具体到 Java 代码就是下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> B b;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(B b)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.b = b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>组合（Composition）也是一种包含关系。A 类对象包含 B 类对象，B 类对象的生命周期依赖 A 类对象的生命周期，B 类对象不可单独存在，比如鸟与翅膀之间的关系。具体到 Java 代码就是下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> B b;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h2><p>关联（Association）是一种非常弱的关系，包含聚合、组合两种关系。具体到代码层面，如果 B 类对象是 A 类的成员变量，那 B 类和 A 类就是关联关系。具体到 Java 代码就是下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> B b;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(B b)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.b = b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> B b;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>依赖（Dependency）是一种比关联关系更加弱的关系，包含关联关系。不管是 B 类对象是 A 类对象的成员变量，还是 A 类的方法使用 B 类对象作为参数或者返回值、局部变量，只要 B 类对象和 A 类对象有任何使用关系，我们都称它们有依赖关系。具体到 Java 代码就是下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> B b;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(B b)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.b = b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> B b;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(B b)</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，泛化、实现、依赖的定义不变，组合关系替代 UML 中组合、聚合、关联三个概念，也就相当于重新命名关联关系为组合关系，并且不再区分 UML 中的组合和聚合两个概念。之所以这样重新命名，是为了跟我们前面讲的“多用组合少用继承”设计原则中的“组合”统一含义。只要 B 类对象是 A 类对象的成员变量，那我们就称，A 类跟 B 类是组合关系。</p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>类关系</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux上挂载硬盘</title>
    <url>/2023/08/30/10.%20Linux/%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/</url>
    <content><![CDATA[<h1 id="Linux上挂载硬盘"><a href="#Linux上挂载硬盘" class="headerlink" title="Linux上挂载硬盘"></a>Linux上挂载硬盘</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301600341.jpeg" alt="a group of toothbrushes sitting on top of a white surface"></p>
<p>一般云服务器上都会分系统盘和数据盘，默认数据盘不会挂载在服务器上的，所以需要手动挂载一下。</p>
<p>先创建一个&#x2F;data的目录，用来映射挂载的数据盘.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /data</span><br></pre></td></tr></table></figure>

<p>然后找出你需要挂载的盘：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lsblk	</span><br></pre></td></tr></table></figure>

<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307181516913.png" alt="image-20230718151643739"></p>
<p>可以发现vdb 100G的硬盘并没有挂载。</p>
<p>其次，初始化硬盘：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/vdb</span><br></pre></td></tr></table></figure>

<p>最后，挂载硬盘：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount /dev/vdb /data</span><br></pre></td></tr></table></figure>

<p>验证：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df -hT</span><br></pre></td></tr></table></figure>

<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307181518071.png" alt="image-20230718151834028"></p>
<p>一键挂载（shell脚本）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"><span class="built_in">mkdir</span> /data</span><br><span class="line">mkfs.ext4 /dev/vdb</span><br><span class="line">mount /dev/vdb /data</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>ZStack上的网络资源概念汇总</title>
    <url>/2023/08/03/09.ZStack/VPC%E7%BD%91%E7%BB%9C%E3%80%81%E5%85%AC%E6%9C%89%E7%BD%91%E7%BB%9C%E3%80%81%E6%89%81%E5%B9%B3%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="ZStack上的网络资源概念汇总"><a href="#ZStack上的网络资源概念汇总" class="headerlink" title="ZStack上的网络资源概念汇总"></a>ZStack上的网络资源概念汇总</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308031607400.jpeg" alt="the golden gate bridge in the distance as the sun sets"></p>
<h2 id="二层网络资源"><a href="#二层网络资源" class="headerlink" title="二层网络资源"></a>二层网络资源</h2><p>ZStack上的二层网络资源有：二层网络和VXLAN Pool（Vxlan网络池）</p>
<h3 id="二层网络"><a href="#二层网络" class="headerlink" title="二层网络"></a>二层网络</h3><p>二层网络：对于一个二层广播域，进行二层相关的隔离。一般用于物理网络的设备名称标识。</p>
<ul>
<li>VLAN、VXLAN、SDN等能提供二层隔离技术都可作为二层网络。</li>
<li>二层网络负责为三层网络提供二层隔离。</li>
</ul>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307181524591.png" alt="img"></p>
<p>二层网络支持四种类型：</p>
<p>L2NoVlanNetwork、L2VlanNetwork、VxlanNetwork、HardwareVxlanNetwork。</p>
<ol>
<li><strong>L2NoVlanNetwork</strong><ul>
<li>必须指定物理机的接口名称。</li>
<li>挂载的集群内物理机必须都存在相同的接口。</li>
<li>云主机的流量经过物理机接口到达物理交换机时，不携带VLAN标签；物理交换机必须配置VLAN Access模式。</li>
<li>创建L2NoVlanNetwork，会根据指定的物理机接口创建网桥。</li>
</ul>
</li>
<li><strong>L2VlanNetwork</strong><ul>
<li>必须指定物理机的接口名称和VLAN ID。</li>
<li>挂载的集群内物理机必须都存在相同的接口。</li>
<li>云主机的流量经过物理机接口到达物理交换机时，携带用户指定的VLAN ID。</li>
<li>创建L2VlanNetwork，会根据指定的VLAN ID创建VLAN设备，并基于此VLAN设备创建网桥。</li>
<li>如果集群同时挂载L2NoVlanNetwork与L2VlanNetwork，或者同时挂载多个L2VlanNetwork，物理交换机接口必须为Trunk模式，且Trunk VLAN需包含当前使用的VLAN ID。</li>
</ul>
</li>
<li>VxlanNetwork<ul>
<li>VXLAN是一种Overlay技术，方便用户创建一个大二层网络，它最大支持的逻辑网络数量16M。</li>
<li>VxlanNetwork是一种基于软件VXLAN的解决方案。</li>
<li>必须指定一个软件SDN类型的VXLAN Pool，一个VxlanNetwork对应VXLAN Pool里的一个VNI。</li>
<li>挂载的集群内物理机的VTEP IP必须都属于当前指定的VXLAN Pool。</li>
<li>云主机的流量经过物理机时，物理机给该云主机流量加上VXLAN信息，然后发送到物理交换机。</li>
</ul>
</li>
<li>HardwareVxlanNetwork<ul>
<li>HardwareVxlanNetwork是一种对接第三方硬件SDN的解决方案。</li>
<li>必须指定一个硬件SDN类型的VXLAN Pool，一个HardwareVxlanNetwork对应VXLAN Pool里的一个VNI。</li>
<li>云主机的流量经过物理机接口到达虚拟分布式交换机时，携带用户指定的VLAN ID；VLAN ID与VXLAN ID直接的映射关系由SDN控制器决定。</li>
</ul>
</li>
</ol>
<p>二层网络与集群、三层网络、云主机之间的关系：</p>
<ul>
<li>如果集群已加载二层网络，但物理机不存在此二层设备，则物理机不能添加进入对应集群。</li>
<li>如果集群未加载二层网络，但物理机不存在此二层设备，则集群不能加载此二层网络。</li>
<li>如果某物理机存在此二层设备，但设备接线与集群内其他物理机接线不一致，则创建出的云主机IP不能正常工作。</li>
<li>删除二层网络，其对应的子资源三层网络将被删除，使用此三层网络的云主机的网卡也将被删除，请慎重操作。</li>
<li>删除二层网络，会删除使用此二层网络的VPC路由器和路由器规格。</li>
<li>删除公有网络对应的二层网络，其对应的路由器的一切服务均会被删除，包括VPC路由器、路由器规格、虚拟IP、弹性IP、端口转发、负载均衡、IPsec隧道、NetFlow等。</li>
<li>一个软件SDN类型的VXLAN Pool可以创建多个VxlanNetwork，这些VxlanNetwork可以分别应用于扁平网络或VPC网络。</li>
<li>VxlanNetwork下的云主机无法被外部的网络直接访问，需要通过弹性IP或者端口转发等服务进行间接访问。</li>
<li>一个硬件SDN类型的VXLAN Pool可以创建多个HardwareVxlanNetwork，这些HardwareVxlanNetwork仅支目前仅支持应用于扁平网络。</li>
<li>一个二层网络可用于创建多个三层网络，但若非特殊业务需求，不推荐多个三层网络共用一个二层网络。</li>
<li>若二层网络为HardwareVxlanNetwork类型，创建的三层网络目前仅支持扁平网络及相应网络服务。</li>
<li>若二层网络使用OVS-DPDK类型虚拟交换机，创建的三层网络目前仅支持IPv4类型的VPC网络及相应网络服务。</li>
</ul>
<h2 id="三层网络资源"><a href="#三层网络资源" class="headerlink" title="三层网络资源"></a>三层网络资源</h2><p>三层网络资源有公有网络、扁平网络和VPC网络；</p>
<p>三层网络：云主机使用的网络配置，包含了IP地址范围、网关、DNS、网络服务等。</p>
<ul>
<li>IP地址范围包含起始和结束IP地址、子网掩码、网关等，例如可指定<em>172.20.12.2</em>到<em>172.20.12.255</em>，子网掩码指定<em>255.255.0.0</em>，网关指定<em>172.20.0.1</em>；也可使用CIDR无域间路由来表示，例如<em>192.168.1.0&#x2F;24</em>；</li>
<li>DNS用于设置云主机网络的DNS解析服务。</li>
</ul>
<h3 id="三层网络相关定义"><a href="#三层网络相关定义" class="headerlink" title="三层网络相关定义"></a>三层网络相关定义</h3><h4 id="公有网络："><a href="#公有网络：" class="headerlink" title="公有网络："></a>公有网络：</h4><p>公有网络是指云服务提供商提供的公共网络，用户可以通过该网络访问云上的资源，例如云存储、云数据库、云服务器等。公有网络是开放的，任何人都可以访问，因此安全性相对较低。但是，公有网络具有广泛的覆盖范围和高度的可用性，用户可以通过公有网络轻松地实现资源的共享和协作。</p>
<p>一般表示可直接访问互联网的网络，由于公有网络是一个逻辑概念，<strong>在无法连接互联网的环境中，用户也可以自定义该网络。</strong></p>
<ul>
<li>可用于扁平网络创建使用公网的云主机。</li>
<li>可用于VPC网络环境，单独创建使用公网的云主机。</li>
</ul>
<h4 id="扁平网络："><a href="#扁平网络：" class="headerlink" title="扁平网络："></a>扁平网络：</h4><p>扁平网络是一种简单的网络架构，所有设备都处于同一层级，没有分层结构。扁平网络不需要路由器和交换机等网络设备，所有设备都可以直接通信。扁平网络通常用于小型网络环境，例如家庭网络、小型办公室网络等。由于缺乏分层结构，扁平网络的可扩展性和安全性相对较差。</p>
<p>可与物理机网络直通，也可直接访问互联网的网络。<strong>云主机</strong>可使用扁平网络提供的<strong>分布式EIP访问公有网络。</strong></p>
<ul>
<li>扁平网络支持以下网络服务：DHCP、弹性IP、安全组、UserData等。</li>
<li>扁平网络的网络服务采用分布式的DHCP、分布式的EIP结构。</li>
<li>扁平网络的DHCP服务也包含了DNS的功能。</li>
</ul>
<h4 id="VPC网络："><a href="#VPC网络：" class="headerlink" title="VPC网络："></a>VPC网络：</h4><p>VPC（Virtual Private Cloud）网络是一种虚拟化的私有云网络，它提供了一个隔离的、安全的网络环境，可以在其中创建和管理虚拟机、存储和网络资源等。VPC网络是完全私有的，只有在VPC网络内的实例之间才能通信，外部无法访问。与传统的私有网络相比，VPC网络更加灵活和可扩展，用户可以自定义VPC网络的IP地址范围、子网、路由表等。</p>
<p>云主机使用的私有网络，<strong>可通过VPC路由器访问互联网</strong>。</p>
<ul>
<li>VPC网络作为VPC的私有网络，使用VPC路由器提供以下网络服务：<strong>DHCP、DNS、SNAT、路由表、安全组、弹性IP、端口转发、负载均衡、IPsec隧道、动态路由、组播路由、VPC防火墙、Netflow等。</strong></li>
<li>可在<strong>创建VPC网络时指定待挂载的路由器</strong>，也可<strong>创建VPC网络后再挂载路由器</strong>。</li>
<li>如有云主机使用VPC网络，不支持从VPC路由器卸载。</li>
<li>新建的网络段不可与VPC路由器内任一网络的网络段重叠。</li>
</ul>
<h4 id="专用网络："><a href="#专用网络：" class="headerlink" title="专用网络："></a>专用网络：</h4><ul>
<li><p>管理网络：</p>
<p><strong>管理控制云平台相关物理资源的网络</strong>，例如：配置访问物理机、主存储、镜像服务器、VPC路由器时使用的网络。</p>
<p>说明:创建VPC路由器时需要VPC路由器存在管理节点互通的IP，以便部署agent及agent代理消息返回。</p>
</li>
<li><p>流量网络：端口镜像的专用网络，用于将网卡的网络流量镜像到远端。不能作为其他网络使用，不能用于创建云主机。</p>
</li>
</ul>
<h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>路由器有VPC路由器，VPC路由器高可用组、路由器镜像、路由器规格。</p>
<h3 id="VPC路由器"><a href="#VPC路由器" class="headerlink" title="VPC路由器"></a>VPC路由器</h3><p>一个定制的云主机，用于提供多种网络服务。包括<strong>虚拟IP，弹性IP，IPsec隧道，端口转发，负载均衡，DHCP等服务，同时支持设置组播路由</strong>。VPC路由器支持内外部全方面实时监控，并提供配套报警服务，同时支持设置跨集群高可用策略，充分保障网络核心资源高可用性。</p>
<h4 id="VPC路由器特性"><a href="#VPC路由器特性" class="headerlink" title="VPC路由器特性"></a>VPC路由器特性</h4><p>基于路由器规格直接创建的VPC路由器，拥有公有网络和管理网络。</p>
<ul>
<li>VPC路由器是VPC的核心，可主动创建基于指定路由器规格的VPC路由器。</li>
<li>须<strong>提前创建</strong>路由器规格所需的<strong>公有网络和管理网络、路由器</strong>镜像资源。</li>
<li>VPC路由器可灵活挂载或卸载VPC网络或其他公有网络。</li>
<li>路由器规格定义的公有网络和管理网络，不可卸载。</li>
<li>同一个路由器规格可以创建多个VPC路由器，这些VPC路由器共享使用同一个路由器规格里定义的公有网络段和管理网络段。</li>
<li>公有网络作为默认网络，用于提供网络服务。</li>
<li>VPC路由器拥有高于云主机的资源优先级，当物理机负载率过高，出现资源竞争时，资源优先级顺序为（从低到高）：优先级为<strong>正常</strong>的云主机 &lt; 优先级为<strong>高</strong>的云主机 &lt; VPC路由器。例如：当物理机出现CPU资源竞争时， 较于普通云主机，VPC路由器具备更高的CPU资源抢夺能力。</li>
</ul>
<h2 id="外部SDN设备"><a href="#外部SDN设备" class="headerlink" title="外部SDN设备"></a>外部SDN设备</h2><h3 id="SDN控制器"><a href="#SDN控制器" class="headerlink" title="SDN控制器"></a>SDN控制器</h3><p>SDN控制器：云平台支持添加外部SDN控制器来控制外部交换机等网络设备。通过添加SDN控制器，可在云平台接管硬件交换机的SDN网络，从而降低网络延迟，提升VXLAN网络性能。</p>
<ul>
<li>需提前规划管理网络，并完成SDN控制器的基础配置，才能添加SDN控制器到云平台。</li>
<li>目前仅支持添加H3C SDN控制器：VCFC。</li>
</ul>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
      <tags>
        <tag>ZStack</tag>
      </tags>
  </entry>
  <entry>
    <title>设置DNS</title>
    <url>/2023/08/30/10.%20Linux/%E8%AE%BE%E7%BD%AEDNS/</url>
    <content><![CDATA[<h1 id="如何设置DNS"><a href="#如何设置DNS" class="headerlink" title="如何设置DNS"></a>如何设置DNS</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301601024.jpeg" alt="the sun is setting over a desert landscape"></p>
<p>A服务器：192.168.110.1<br>B服务器：192.168.110.2</p>
<p>*使用A服务器作为源服务器<br>*使用B服务器作为目标服务器</p>
<p>一、将A服务器中的文件、文件夹传递到B服务器<br>1、文件<br>scp  &#x2F;home&#x2F;test&#x2F;file.pdf <a href="mailto:&#114;&#111;&#x6f;&#116;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#49;&#x31;&#x30;&#46;&#x32;">&#114;&#111;&#x6f;&#116;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#49;&#x31;&#x30;&#46;&#x32;</a>:&#x2F;home&#x2F;test<br>[文件重命名]<br>scp  &#x2F;home&#x2F;test&#x2F;1.pdf <a href="mailto:&#114;&#111;&#x6f;&#116;&#x40;&#x31;&#57;&#x32;&#x2e;&#x31;&#x36;&#56;&#46;&#49;&#49;&#48;&#46;&#x32;">&#114;&#111;&#x6f;&#116;&#x40;&#x31;&#57;&#x32;&#x2e;&#x31;&#x36;&#56;&#46;&#49;&#49;&#48;&#46;&#x32;</a>:&#x2F;home&#x2F;test&#x2F;2.pdf</p>
<p>2、文件夹（文件夹及其文件夹下的文件）<br>scp -r &#x2F;home&#x2F;test&#x2F;files <a href="mailto:&#114;&#x6f;&#111;&#x74;&#64;&#49;&#57;&#50;&#46;&#x31;&#x36;&#56;&#x2e;&#49;&#49;&#x30;&#x2e;&#x32;">&#114;&#x6f;&#111;&#x74;&#64;&#49;&#57;&#50;&#46;&#x31;&#x36;&#56;&#x2e;&#49;&#49;&#x30;&#x2e;&#x32;</a>:&#x2F;home&#x2F;test<br>[不包含文件夹本身，文件中包含文件夹，子文件夹不能被传递]<br>scp  &#x2F;home&#x2F;test&#x2F;files&#x2F;* <a href="mailto:&#114;&#111;&#111;&#116;&#64;&#x31;&#57;&#x32;&#x2e;&#x31;&#54;&#56;&#46;&#49;&#x31;&#48;&#46;&#50;">&#114;&#111;&#111;&#116;&#64;&#x31;&#57;&#x32;&#x2e;&#x31;&#54;&#56;&#46;&#49;&#x31;&#48;&#46;&#50;</a>:&#x2F;home&#x2F;test </p>
<p>执行命令后提示输入目标服务器密码，输入密码即可。</p>
<p>二、在B 服务中将A服务器中的文件、文件夹传输过来<br>1、文件<br>scp <a href="mailto:&#x72;&#x6f;&#x6f;&#x74;&#64;&#49;&#x39;&#50;&#46;&#49;&#x36;&#x38;&#46;&#49;&#x31;&#48;&#x2e;&#49;">&#x72;&#x6f;&#x6f;&#x74;&#64;&#49;&#x39;&#50;&#46;&#49;&#x36;&#x38;&#46;&#49;&#x31;&#48;&#x2e;&#49;</a>:&#x2F;home&#x2F;test&#x2F;1.pdf &#x2F;home&#x2F;test<br>[文件重命名]<br>scp <a href="mailto:&#114;&#x6f;&#111;&#x74;&#64;&#x31;&#57;&#x32;&#x2e;&#49;&#54;&#x38;&#46;&#x31;&#49;&#48;&#x2e;&#x31;">&#114;&#x6f;&#111;&#x74;&#64;&#x31;&#57;&#x32;&#x2e;&#49;&#54;&#x38;&#46;&#x31;&#49;&#48;&#x2e;&#x31;</a>:&#x2F;home&#x2F;test&#x2F;1.pdf &#x2F;home&#x2F;test&#x2F;2.pdf</p>
<p>2、文件夹<br>scp -r <a href="mailto:&#114;&#111;&#111;&#x74;&#x40;&#49;&#57;&#50;&#x2e;&#x31;&#54;&#x38;&#x2e;&#x31;&#x31;&#48;&#46;&#x31;">&#114;&#111;&#111;&#x74;&#x40;&#49;&#57;&#50;&#x2e;&#x31;&#54;&#x38;&#x2e;&#x31;&#x31;&#48;&#46;&#x31;</a>:&#x2F;home&#x2F;test&#x2F;files &#x2F;home&#x2F;test<br>[不包含文件夹本身，文件中包含文件夹，子文件夹不能被传递]<br>scp  <a href="mailto:&#114;&#111;&#x6f;&#116;&#64;&#x31;&#57;&#50;&#x2e;&#49;&#54;&#56;&#46;&#x31;&#x31;&#x30;&#x2e;&#x31;">&#114;&#111;&#x6f;&#116;&#64;&#x31;&#57;&#50;&#x2e;&#49;&#54;&#56;&#46;&#x31;&#x31;&#x30;&#x2e;&#x31;</a>:&#x2F;home&#x2F;test&#x2F;files&#x2F;* &#x2F;home&#x2F;test</p>
<p>执行命令后提示输入源服务器密码，输入密码即可。</p>
<p>注意问题：<br>输入密码提示:Permission denied, please try again.<br>可能原因：<br>1、目标服务器&#x2F;源服务器密码输入错误；<br>2、目标服务器目录权限问题，不允许写入；<br>    chmod 777  &#x2F;home&#x2F;test<br>3、ssh配置<br>    vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config<br>    修改 PermitRootLogin 为 yes，保存<br>    重启服务： service sshd restart<br>    出现:Redirecting to &#x2F;bin&#x2F;systemctl restart sshd.service<br>    使用以下命令<br>        1、启动：systemctl start sshd.service<br>        2、重启：systemctl restart sshd.service</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ官方教程-hello world</title>
    <url>/2023/08/30/12.%20RabbitMQ/00-RabbitMQ%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B-hello%20world/</url>
    <content><![CDATA[<h1 id="RabbitMQ官方教程-hello-world"><a href="#RabbitMQ官方教程-hello-world" class="headerlink" title="RabbitMQ官方教程-hello world"></a>RabbitMQ官方教程-hello world</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301554697.jpeg" alt="a man standing on top of a cliff overlooking a lake"></p>
<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>本教程假设RabbitMQ已经安装并在标准端口（5672）上的本机主机运行。如果使用不同的主机、端口或凭证，则需要调整连接设置。</p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>rabbit MQ 是一个消息代理：它接受并转发消息。</p>
<p>您可以将其视为邮局：当您将要投递的邮件放入邮箱时，您可以确定邮递员最终会将邮件递送给收件人。</p>
<p>在这个类比中，RabbitMQ 是一个邮箱、一个邮局和一个信递员。</p>
<p>Rabbit MQ 和邮局之间的主要区别在于，它不处理纸张，而是接受、存储和转发二进制数据块（消息）。</p>
<p>Rabbitmq 和一般的消息传递使用一些术语：</p>
<ul>
<li><p>生产无非就是发送。发送消息的程序是生产者：</p>
<p><img src="D:\sugon\file_markdown\部署文档\producer.png" alt="A producer sends messages to a queue."></p>
</li>
<li><p>队列是 Rabbit MQ 中邮箱的名称。尽管消息流经 Rabbit MQ 和您的应用程序，但它们只能存储在队列中。</p>
<p>队列仅受主机内存和磁盘限制的约束，它本质上是一个大型消息缓冲区。许多生产者可以将消息发送到一个队列，并且许多消费者可以尝试从一个队列接收数据。这就是我们表示队列的方式：</p>
<p><img src="https://www.rabbitmq.com/img/tutorials/queue.png" alt="A queue is the name for the post box in RabbitMQ."></p>
</li>
<li><p>消费与接收具有相似的含义。消费者是一个主要等待接收消息的程序：</p>
<p><img src="https://www.rabbitmq.com/img/tutorials/consumer.png" alt="A consumer receives messages."></p>
</li>
</ul>
<p>请注意，生产者、消费者和代理不必驻留在同一主机上；事实上，在大多数应用中它们并不这样做。应用程序也可以既是生产者又是消费者。</p>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>（使用Java客户端）</p>
<p>在本教程的这一部分中，我们将用 Java 编写两个程序；发送单个消息的生产者和接收消息并将其打印出来的消费者。我们将忽略 Java API 中的一些细节，专注于这个非常简单的事情，以便开始。这是一个“Hello World”消息传递。</p>
<p>在下图中，“P”是我们的生产者，“C”是我们的消费者。中间的框是一个队列 - Rabbit MQ 代表消费者保留的消息缓冲区。</p>
<p><img src="https://www.rabbitmq.com/img/tutorials/python-one.png" alt="(P) -&gt; [|||] -&gt; (C)"></p>
<blockquote>
<p>Java 客户端库</p>
<p>Rabbit MQ 支持多种协议。本教程使用 AMQP 0-9-1，它是一种开放的通用消息传递协议。Rabbit MQ 有许多不同语言的客户端。我们将使用 Rabbit MQ 提供的 Java 客户端。下载客户端库及其依赖项（SLF4 J API 和 SLF4 J Simple）。将这些文件与教程 Java 文件一起复制到您的工作目录中。请注意，SLF4 J Simple 对于教程来说已经足够了，但您应该在生产中使用 Logback 等成熟的日志库。</p>
<p>（Rabbit MQ Java 客户端也在中央 Maven 存储库中，组 ID 为 com.rabbitmq，工件 ID 为 amqp-client。）</p>
</blockquote>
<p>现在我们有了 Java 客户端及其依赖项，我们可以编写一些代码了:</p>
<h3 id="Sending"><a href="#Sending" class="headerlink" title="Sending"></a>Sending</h3><p><img src="https://www.rabbitmq.com/img/tutorials/sending.png" alt="(P) -&gt; [|||]"></p>
<p>我们将调用消息发布者（发送者）Send 和消息消费者（接收者）Recv。发布者将连接到 Rabbit MQ，发送一条消息，然后退出。</p>
<p>在Send.java中，我们需要导入一些类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br></pre></td></tr></table></figure>

<p>设置类名和队列名称：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Send</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，创建连接服务器代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">     <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Connection对socket连接进行了抽象，并为我们处理协议版本协商、认证等工作。在这里，我们连接到本地计算机上的 Rabbit MQ 节点 - 因此是本地主机。如果我们想连接到另一台机器上的节点，我们只需在此处指定其主机名或 IP 地址即可。</p>
<p>接下来，我们创建一个通道，这是大多数用于完成任务的 API 所在的位置。请注意，我们可以使用 try-with-resources 语句，因为 Connection 和 Channel 都实现了 java.lang.Auto Closeable。这样我们就不需要在代码中显式关闭它们。</p>
<p>为了发送，我们必须声明一个队列供我们发送；然后我们可以将消息发布到队列，所有这些都在 try-with-resources 语句中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>声明队列是幂等的 - 仅当队列尚不存在时才会创建它。消息内容是一个字节数组，因此您可以在那里编码任何您喜欢的内容。</p>
<blockquote>
<p>无法发送消息？</p>
<p>如果这是您第一次使用 Rabbit MQ 并且没有看到“已发送”消息，那么您可能会摸不着头脑，想知道可能出了什么问题。也许代理启动时没有足够的可用磁盘空间（默认情况下它至少需要 200 MB 可用空间），因此拒绝接受消息。检查代理日志文件以确认并在必要时减少限制。配置文件文档将向您展示如何设置disk_free_limit。</p>
</blockquote>
<h3 id="Receiving"><a href="#Receiving" class="headerlink" title="Receiving"></a>Receiving</h3><p>这就是我们的出版商的工作。我们的消费者侦听来自 Rabbit MQ 的消息，因此与发布单个消息的发布者不同，我们将保持消费者运行以侦听消息并将其打印出来。</p>
<p><img src="https://www.rabbitmq.com/img/tutorials/receiving.png" alt="[|||] -&gt; (C)"></p>
<p>代码（在 Recv.java 中）与 Send 具有几乎相同的导入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br></pre></td></tr></table></figure>

<p>我们将使用额外的 Deliver Callback 接口来缓冲服务器推送给我们的消息。设置与发布者相同；我们打开一个连接和一个通道，并声明我们要从中消费的队列。</p>
<p>请注意，这与发送发布到的队列相匹配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Recv</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请注意，我们也在这里声明了队列。因为我们可能会在发布者之前启动消费者，所以我们希望在尝试使用队列中的消息之前确保队列存在。</p>
<p>为什么我们不使用 try-with-resource 语句来自动关闭通道和连接？通过这样做，我们只需让程序继续运行，关闭所有内容，然后退出！这会很尴尬，因为我们希望进程在消费者异步侦听消息到达时保持活动状态。</p>
<p>我们将告诉服务器将队列中的消息传递给我们。由于它将异步向我们推送消息，因此我们以对象的形式提供回调，该回调将缓冲消息，直到我们准备好使用它们。这就是传递回调子类的作用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><blockquote>
<p>这小节参考官网即可。</p>
</blockquote>
<p>您可以仅使用类路径上的 Rabbit MQ java 客户端来编译这两个版本。</p>
<p>我在这里的处理：</p>
<p>前提是需要安装rabbitmq，使用docker安装。</p>
<p>首先使用docker镜像安装，安装上去之后，可以正常使用，但是无法访问管理界面。原因是docker镜像应该选择Management版本：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301127072.png" alt="image-20230830112729761"></p>
<p>或者直接使用docker desktop中的rabbitmq插件即可：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301128828.png" alt="image-20230830112807258"></p>
<p>默认使用最新的版本。</p>
<p>账号密码guest &#x2F; guest</p>
<blockquote>
<p>docker容器内可以通过执行rabbitmqctl list_queues 来查看所有的队列。</p>
</blockquote>
<p>代码：</p>
<p>Send.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yamon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023-08-29 16:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Send</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello World cccc!&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Recv.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yamon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023-08-29 17:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Recv</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>验证方式：</p>
<p>先启动Recv消费者，消费者永远处于开启状态，然后开启Send生产者。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301131164.png" alt="image-20230830113137440"></p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301131662.png" alt="image-20230830113150183"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[RabbitMQ tutorial - “Hello World!” ](<a href="https://www.rabbitmq.com/tutorials/tutorial-one-java.html">RabbitMQ tutorial - “Hello World!” — RabbitMQ</a>)</p>
]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ官方教程-Work queues</title>
    <url>/2023/08/30/12.%20RabbitMQ/01-RabbitMQ%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B-Work%20queues/</url>
    <content><![CDATA[<h1 id="RabbitMQ官方教程-Work-queues"><a href="#RabbitMQ官方教程-Work-queues" class="headerlink" title="RabbitMQ官方教程-Work queues"></a>RabbitMQ官方教程-Work queues</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301556033.jpeg" alt="a river running through a canyon"></p>
<h2 id="Work-Queues"><a href="#Work-Queues" class="headerlink" title="Work Queues"></a>Work Queues</h2><p>![Producer -&gt; Queue -&gt; Consuming: Work Queue used to distribute time-consuming tasks among multiple workers.](D:\blog\source_posts\12. RabbitMQ\assets\python-two.png)</p>
<p>在第一个教程中，我们编写了从命名队列发送和接收消息的程序。在本教程中，我们将创建一个<em>Work Queue</em> ，用于在多个worker之间分配耗时的任务。</p>
<p>工作队列（又名：任务队列）背后的主要思想是避免立即执行资源密集型任务并必须等待其完成。相反，我们安排稍后完成的任务。我们将任务封装为消息并将其发送到队列。在后台运行的工作进程将弹出任务并最终执行作业。</p>
<p>当您运行许多worker时，任务将在他们之间共享。</p>
<p>这个概念在 Web 应用程序中特别有用，因为在 Web 应用程序中不可能在较短的 HTTP 请求窗口内处理复杂的任务。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在本教程的前一部分中，我们发送了一条包含“Hello World!”的消息。现在我们将发送代表复杂任务的字符串。</p>
<p>我们没有现实世界的任务，比如要调整图像大小或要渲染 pdf 文件，所以让我们通过使用 Thread.sleep() 函数假装我们很忙来伪造它。我们将字符串中点数作为其复杂度；每个点将占一秒钟的“工作”。例如，Hello… 描述的一个假任务将需要三秒钟。</p>
<p>我们将稍微修改前面示例中的 Send.java 代码，以允许从命令行发送任意消息。该程序会将任务调度到我们的工作队列中，因此我们将其命名为 New Task.java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> String.join(<span class="string">&quot; &quot;</span>, argv);</span><br><span class="line"></span><br><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>我们旧的 Recv.java 程序还需要一些更改：它需要为消息正文中的每个点伪造一秒钟的工作。它将处理传递的消息并执行任务，所以我们将其称为 Worker.java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    doWork(message);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot; [x] Done&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">autoAck</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">// acknowledgment is covered below</span></span><br><span class="line">channel.basicConsume(TASK_QUEUE_NAME, autoAck, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure>

<p>我们用假的任务来模拟执行时间：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">(String task)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> ch: task.toCharArray()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照教程一中的方式编译它们（使用工作目录中的 jar 文件和环境变量 CP）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac -<span class="built_in">cp</span> <span class="variable">$CP</span> NewTask.java Worker.java</span><br></pre></td></tr></table></figure>

<h2 id="轮询分发"><a href="#轮询分发" class="headerlink" title="轮询分发"></a>轮询分发</h2><p>使用任务队列的优点之一是能够轻松并行工作。如果我们正在积压工作，我们可以添加更多worker，这样就可以轻松扩展。</p>
<p>首先，让我们尝试同时运行两个工作实例。他们都会从队列中获取消息，但是具体如何获取呢？让我们来看看。</p>
<p>您需要打开三个控制台。两个将运行工人程序。这些控制台将是我们的两个消费者 - C1 和 C2。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shell 1</span></span><br><span class="line">java -<span class="built_in">cp</span> <span class="variable">$CP</span> Worker</span><br><span class="line"><span class="comment"># =&gt; [*] Waiting for messages. To exit press CTRL+C</span></span><br><span class="line"><span class="comment"># shell 2</span></span><br><span class="line">java -<span class="built_in">cp</span> <span class="variable">$CP</span> Worker</span><br><span class="line"><span class="comment"># =&gt; [*] Waiting for messages. To exit press CTRL+C</span></span><br></pre></td></tr></table></figure>

<p>在第三个任务中，我们将发布新任务。启动消费者后，您可以发布一些消息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shell 3</span></span><br><span class="line">java -<span class="built_in">cp</span> <span class="variable">$CP</span> NewTask First message.</span><br><span class="line"><span class="comment"># =&gt; [x] Sent &#x27;First message.&#x27;</span></span><br><span class="line">java -<span class="built_in">cp</span> <span class="variable">$CP</span> NewTask Second message..</span><br><span class="line"><span class="comment"># =&gt; [x] Sent &#x27;Second message..&#x27;</span></span><br><span class="line">java -<span class="built_in">cp</span> <span class="variable">$CP</span> NewTask Third message...</span><br><span class="line"><span class="comment"># =&gt; [x] Sent &#x27;Third message...&#x27;</span></span><br><span class="line">java -<span class="built_in">cp</span> <span class="variable">$CP</span> NewTask Fourth message....</span><br><span class="line"><span class="comment"># =&gt; [x] Sent &#x27;Fourth message....&#x27;</span></span><br><span class="line">java -<span class="built_in">cp</span> <span class="variable">$CP</span> NewTask Fifth message.....</span><br><span class="line"><span class="comment"># =&gt; [x] Sent &#x27;Fifth message.....&#x27;</span></span><br></pre></td></tr></table></figure>

<p>给worker传输了什么消息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> <span class="variable">$CP</span> Worker</span><br><span class="line"><span class="comment"># =&gt; [*] Waiting for messages. To exit press CTRL+C</span></span><br><span class="line"><span class="comment"># =&gt; [x] Received &#x27;First message.&#x27;</span></span><br><span class="line"><span class="comment"># =&gt; [x] Received &#x27;Third message...&#x27;</span></span><br><span class="line"><span class="comment"># =&gt; [x] Received &#x27;Fifth message.....&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> <span class="variable">$CP</span> Worker</span><br><span class="line"><span class="comment"># =&gt; [*] Waiting for messages. To exit press CTRL+C</span></span><br><span class="line"><span class="comment"># =&gt; [x] Received &#x27;Second message..&#x27;</span></span><br><span class="line"><span class="comment"># =&gt; [x] Received &#x27;Fourth message....&#x27;</span></span><br></pre></td></tr></table></figure>

<p>默认情况下，Rabbit MQ 会将每条消息按顺序发送给下一个消费者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式称为循环法。与三名或更多工人一起尝试此操作。</p>
<h2 id="消息确认"><a href="#消息确认" class="headerlink" title="消息确认"></a>消息确认</h2><p>执行一项任务可能需要几秒钟的时间，您可能想知道如果消费者启动一项长任务并在完成之前终止会发生什么。</p>
<p>使用我们当前的代码，一旦 Rabbit MQ 将消息传递给消费者，它会立即将其标记为删除。在这种情况下，如果终止一个工作线程，它刚刚处理的消息就会丢失。已发送给该特定worker但尚未处理的消息也会丢失。</p>
<p>但我们不想失去任何任务。如果一个worker失效，我们希望将任务交付给另一个worker。</p>
<p>为了确保消息永远不会丢失，Rabbit MQ 支持消息确认。消费者发回确认消息，告诉 Rabbit MQ 已收到并处理特定消息，并且 Rabbit MQ 可以自由删除该消息。</p>
<p>如果消费者在没有发送 ack 的情况下死亡（其通道关闭、连接关闭或 TCP 连接丢失），Rabbit MQ 将了解消息未完全处理并将重新排队。如果同时有其他消费者在线，那么它会快速将其重新传递给另一个消费者。这样你就可以确保不会丢失任何消息，即使worker偶尔会down掉。</p>
<p>消费者交付确认时强制执行超时（默认为 30 分钟）。这有助于检测从不确认交付的有问题（卡住）的消费者。您可以按照传送确认超时中的说明增加此超时。</p>
<p>默认情况下，手动消息确认处于打开状态。在前面的示例中，我们通过 autoAck&#x3D;true 标志显式关闭它们。当我们完成任务后，是时候将此标志设置为 false 并向worker发送适当的确认。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicQos(<span class="number">1</span>); <span class="comment">// accept only one unack-ed message at a time (see below)</span></span><br><span class="line"></span><br><span class="line"><span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    doWork(message);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot; [x] Done&quot;</span>);</span><br><span class="line">    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">autoAck</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">channel.basicConsume(TASK_QUEUE_NAME, autoAck, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure>

<p>使用此代码，您可以确保即使在处理消息时使用 CTRL+C 终止工作程序，也不会丢失任何内容。工作线程终止后不久，所有未确认的消息都会被重新传递。</p>
<p>确认必须在接收交付的同一通道上发送。尝试使用不同的通道进行确认将导致通道级协议异常。请参阅有关确认的文档指南以了解更多信息。</p>
<blockquote>
<p>忘记确认？</p>
<p>忘记添加basicAck 是一个常见的错误。这是一个很容易犯的错误，但后果却很严重。当您的客户端退出时，消息将被重新传送（这可能看起来像随机重新传送），但 Rabbit MQ 会占用越来越多的内存，因为它无法释放任何未确认的消息。</p>
<p>为了调试这种错误，您可以使用rabbitmqctl打印messages_unacknowledged字段：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h2><p>我们已经学会了如何确保即使消费者死亡，任务也不会丢失。但是如果 Rabbit MQ 服务器停止，我们的任务仍然会丢失。</p>
<p>当 Rabbit MQ 退出或崩溃时，它会忘记队列和消息，除非您告诉它不要这样做。要确保消息不丢失，需要做两件事：我们需要将队列和消息标记为持久的。</p>
<p>首先，我们需要确保队列能够在 Rabbit MQ 节点重新启动后继续存在。为此，我们需要将其声明为持久的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">durable</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>, durable, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p>虽然这个命令本身是正确的，但它在我们当前的设置中不起作用。这是因为我们已经定义了一个名为 hello 的队列，它是不持久的。Rabbit MQ 不允许您使用不同的参数重新定义现有队列，并将向任何尝试执行此操作的程序返回错误。但是有一个快速的解决方法 - 让我们声明一个具有不同名称的队列，例如task_queue：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">durable</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;task_queue&quot;</span>, durable, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p>此队列声明更改需要应用于生产者和消费者代码。此时我们就可以确定，即使RabbitMQ重启，task_queue队列也不会丢失。现在我们需要将消息标记为持久消息 - 通过将消息属性（实现基本属性）设置为值 PERSISTENT_TEXT_PLAIN。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.MessageProperties;</span><br><span class="line"></span><br><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;task_queue&quot;</span>,</span><br><span class="line">            MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">            message.getBytes());</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关于消息持久化的注意事项</p>
<p>将消息标记为持久并不能完全保证消息不会丢失。尽管它告诉 Rabbit MQ 将消息保存到磁盘，但 Rabbit MQ 已接受消息但尚未保存的时间窗口仍然很短。此外，Rabbit MQ 不会对每条消息执行 fsync(2) —— 它可能只是保存到缓存中，而不是真正写入磁盘。持久性保证并不强，但对于我们简单的任务队列来说已经足够了。</p>
<p>如果您需要更强的保证，那么您可以使用发布者确认（publisher confirms）。</p>
</blockquote>
<h2 id="公平调度"><a href="#公平调度" class="headerlink" title="公平调度"></a>公平调度</h2><p>您可能已经注意到，调度仍然没有完全按照我们想要的方式工作。例如，在有两名工作人员的情况下，当所有奇数消息都很重而偶数消息都很轻时，一名工作人员将一直忙碌，而另一名工作人员几乎不会做任何工作。</p>
<p>好吧，Rabbit MQ 对此一无所知，仍然会均匀地分发消息。</p>
<p>发生这种情况是因为 Rabbit MQ 只是在消息进入队列时调度消息。它不会查看消费者未确认消息的数量。它只是盲目地将每条第 n 条消息分派给第 n 个消费者。</p>
<p>![Producer -&gt; Queue -&gt; Consuming: RabbitMQ dispatching messages.](D:\blog\source_posts\12. RabbitMQ\assets\prefetch-count.png)</p>
<p>为了解决这个问题，我们可以使用基本的 Qos 方法和预取计数 &#x3D; 1 设置。这告诉 Rabbit MQ 不要一次向一个工作线程发送多于一条消息。或者，换句话说，在工作人员处理并确认前一条消息之前，不要向工作人员发送新消息。</p>
<p>相反，它会将其分派给下一个不忙的工作人员。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">prefetchCount</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">channel.basicQos(prefetchCount);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关于队列大小的注意事项</p>
<p>如果所有工作人员都很忙，您的队列可能会被填满。您需要密切关注这一点，也许添加更多的worker，或者制定其他策略。</p>
</blockquote>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>NewTask.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.MessageProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yamon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023-08-29 17:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewTask</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TASK_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;task_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> String.join(<span class="string">&quot; &quot;</span>, argv);</span><br><span class="line"></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, TASK_QUEUE_NAME,</span><br><span class="line">                    MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">                    message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Worker.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yamon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023-08-30 10:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TASK_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;task_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                doWork(message);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot; [x] Done&quot;</span>);</span><br><span class="line">                channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(TASK_QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">(String task)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : task.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException _ignored) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将Worker设置成为多启动模式。</p>
<p>idea设置启动方式：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301401478.png" alt="image-20230830140112359"></p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301401147.png" alt="image-20230830140133591"></p>
<p>总体流程：</p>
<p>开启三个worker控制台，执行三次newTask任务，会发现，在每个worker控制台按顺序收到一条消息：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301402386.png" alt="image-20230830140224905"></p>
<p>使用消息确认和prefetchCount ，您可以设置工作队列。</p>
<p>有关Channel方法和MessageProperties的更多信息，您可以在线浏览 Java 文档。</p>
<p>即使 Rabbit MQ 重新启动，持久性选项也能让任务继续存在。</p>
<p>现在我们可以继续教程 3，学习如何向许多消费者传递相同的消息。</p>
]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ官方教程-Publish/Subscribe</title>
    <url>/2023/08/30/12.%20RabbitMQ/02-RabbitMQ%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="RabbitMQ官方教程-Publish-x2F-Subscribe"><a href="#RabbitMQ官方教程-Publish-x2F-Subscribe" class="headerlink" title="RabbitMQ官方教程-Publish&#x2F;Subscribe"></a>RabbitMQ官方教程-Publish&#x2F;Subscribe</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301556832.jpeg" alt="a scuba diver swims through an underwater cave"></p>
<p>在之前的教程汇总，我们创建了一个工作队列。这种假设是基于每个任务只会传递给一个worker。在这一部分中，我们将做一些完全不同的事情——我们将向多个消费者传递消息。这种模式称为“发布&#x2F;订阅”。</p>
<p>为了说明该模式，我们将构建一个简单的日志系统。它将由两个程序组成——第一个程序将发出日志消息，第二个程序将接收并打印它们。</p>
<p>在我们的日志系统中，接收程序的每个正在运行的副本都会收到消息。这样我们就能运行一个接收器并将日志定向到磁盘；同时我们能运行另外一个接收器并在屏幕上查看日志。</p>
<p>本质上，发布的日志消息将广播给所有的接收者。</p>
<h2 id="Exchanges"><a href="#Exchanges" class="headerlink" title="Exchanges"></a>Exchanges</h2><p>在本教程的前面部分中，我们向消息队列发送消息和从消息队列中接收消息。</p>
<p>现在是时候介绍RabbitMQ中完整的消息传递模型了。</p>
<p>让我们快速回顾一下前面教程中介绍的内容：</p>
<ul>
<li><p>生产者是发送消息的用户应用程序。</p>
</li>
<li><p>队列是存储消息的缓冲区。</p>
</li>
<li><p>消费者是接收消息的用户应用程序。</p>
</li>
</ul>
<p>Rabbit MQ 消息传递模型的核心思想是生产者从不直接向队列发送任何消息。实际上，生产者通常根本不知道消息是否会被传递到任何队列。</p>
<p>相反，生产者只能将消息发送到exchange。交换是一件非常简单的事情。</p>
<p>一方面，它接收来自生产者的消息，另一方面，它将消息推送到队列。</p>
<p>交换机必须确切地知道如何处理它收到的消息。比如：是否应该将其附加到特定队列？是否应该将其附加到许多队列中？或者应该将其丢弃。其规则由交换类型定义。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301426501.png" alt="An exchange: The producer can only send messages to an exchange. One side of the exchange receives messages from producers and the other side pushes them to queues."></p>
<p>有几种可用的交换类型：direct、topic、headers和fanout。</p>
<p>我们将重点关注最后一个——fanout。让我们创建一个这种类型的交换，并将其称为日志：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>, <span class="string">&quot;fanout&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>扇出交换非常简单。正如您可能从名称中猜到的那样，它只是将收到的所有消息广播到它知道的所有队列。这正是我们的记录器所需要的。</p>
<blockquote>
<p>Listing exchanges </p>
<p>要列出服务器上的交换机，您可以运行非常有用的rabbitmqctl：<br>sudo rabbitmqctl list_exchanges</p>
<p>在此列表中将有一些 amq.* 交换和默认（未命名）exchanges。这些是默认创建的，但目前您不太可能需要使用它们。</p>
<p>匿名交换机</p>
<p>在本教程的前面部分中，我们对交换一无所知，但仍然能够将消息发送到队列。这是可能的，因为我们使用的是默认交换，我们通过空字符串（“”）来标识它。</p>
<p>回想一下我们之前发布的消息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="literal">null</span>, message.getBytes());</span><br></pre></td></tr></table></figure>

<p>第一个参数是交换机的名称。空字符串表示默认的或无名称的交换：消息将路由到routingKey指定名称的队列（如果存在）。</p>
</blockquote>
<p>现在，我们可以发布到我们自己定义的exchange中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicPublish( <span class="string">&quot;logs&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, message.getBytes());</span><br></pre></td></tr></table></figure>

<h2 id="Temporary-queues（临时队列）"><a href="#Temporary-queues（临时队列）" class="headerlink" title="Temporary queues（临时队列）"></a>Temporary queues（临时队列）</h2><p>您可能还记得之前我们使用具有特定名称的队列（还记得 hello 和 task_queue 吗？）。能够命名队列对我们来说至关重要——我们需要将worker指向同一个队列。当您想要在生产者和消费者之间共享队列时，为队列命名非常重要。</p>
<p>但我们的日志系统并非如此。我们希望了解所有日志消息，而不仅仅是其中的一部分。我们也只对当前流动的消息感兴趣，而不是旧的消息。为了解决这个问题，我们需要两件事。</p>
<p>首先，每当我们连接到 Rabbit 时，我们都需要一个新的空队列。为此，我们可以创建一个具有随机名称的队列，或者更好 - 让服务器为我们选择一个随机队列名称。</p>
<p>其次，一旦我们和消费者consumer断连之后，消息队列应该自动被删除。</p>
<p>在 Java 客户端中，当我们不向queueDeclare()提供任何参数时，我们会创建一个具有生成名称的非持久、独占、自动删除队列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br></pre></td></tr></table></figure>

<p>您可以在队列指南中了解有关exclusive标志和其他队列属性的更多信息。</p>
<p>此时queueName包含随机队列名称。例如，它可能看起来像 amq.gen-Jz TY20 BRg KO-Hjm UJj0w Lg。</p>
<h2 id="Bindings-绑定"><a href="#Bindings-绑定" class="headerlink" title="Bindings(绑定)"></a>Bindings(绑定)</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301442050.png" alt="The exchange sends messages to a queue. The relationship between the exchange and a queue is called a binding."></p>
<p>我们已经创建了fanout exchange和队列。现在我们需要告诉交换器将消息发送到我们的队列。交换器和队列之间的关系称为binding：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.queueBind(queueName, <span class="string">&quot;logs&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>从现在开始，日志交换会将消息附加到我们的队列中。</p>
<blockquote>
<p>罗列出bingdings：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmqctl list_bindings</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="组装在一起"><a href="#组装在一起" class="headerlink" title="组装在一起"></a>组装在一起</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301446121.png" alt="Producer -&gt; Queue -&gt; Consuming: deliver a message to multiple consumers."></p>
<p>发出日志消息的生产者程序看起来与之前的教程没有太大不同。最重要的变化是我们现在想要将消息发布到我们的logs而不是无名的交换。发送时我们需要提供一个routingKey，但它的值在fanout交换中会被忽略。下面是 Emit Log.java 程序的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yamon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023-08-30 14:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 输出日志</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmitLog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> argv.length &lt; <span class="number">1</span> ? <span class="string">&quot;info: Hello World!&quot;</span> :</span><br><span class="line">                    String.join(<span class="string">&quot; &quot;</span>, argv);</span><br><span class="line"></span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如您所见，建立连接后我们声明了exchange。此步骤是必要的，因为禁止发布到不存在的exchange。</p>
<p>如果还没有队列绑定到交换器，消息将会丢失，但这对我们来说没关系；如果还没有消费者在监听，我们可以安全地丢弃该消息。</p>
<p>ReceiveLogs.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yamon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023-08-30 14:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveLogs</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line">        channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行这两个类：建议先消费者，后生产者</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301456003.png" alt="image-20230830145619961"></p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301456796.png" alt="image-20230830145629667"></p>
<p>在docker desktop上查看：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301456797.png" alt="image-20230830145657736"></p>
]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ官方教程-Routing</title>
    <url>/2023/08/30/12.%20RabbitMQ/03-RabbitMQ%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B-Routing/</url>
    <content><![CDATA[<h1 id="RabbitMQ官方教程-Routing"><a href="#RabbitMQ官方教程-Routing" class="headerlink" title="RabbitMQ官方教程-Routing"></a>RabbitMQ官方教程-Routing</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301558423.jpeg" alt="a grassy hill with clouds in the sky"></p>
<p>在之前的教程中，我们创建了一个简单的日志系统。我们现在可以通过广播的方式将日志信息发送给很多接收者。</p>
<p>在本教程中，我们将向其添加一个功能 - 我们将使其能够仅订阅消息的子集。例如，我们将能够仅将关键错误消息定向到日志文件（以节省磁盘空间），同时仍然能够在控制台上打印所有日志消息。</p>
<h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><p>在前面的示例中，我们已经创建了绑定。</p>
<p>您可能还记得这样的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>绑定是交换和队列之间的关系。这可以简单地理解为：队列对来自此交换器的消息感兴趣。</p>
<p>绑定可以采用额外的routingKey 参数。为了避免与 basic_publish 参数混淆，我们将其称为binding_key。</p>
<p>这就是我们如何创建带有键的绑定：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;black&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>绑定key的含义取决于交换类型。我们之前使用的fanout交换完全忽略了它的价值。</p>
<h2 id="Direct-exchange"><a href="#Direct-exchange" class="headerlink" title="Direct exchange"></a>Direct exchange</h2><p>直连模式</p>
<p>上一篇教程中的日志系统将所有消息广播给所有消费者。</p>
<p>我们希望扩展它以允许根据消息的严重性过滤消息。</p>
<p>例如，我们可能希望一个将日志消息写入磁盘的程序仅接收关键错误，而不是在警告或信息日志消息上浪费磁盘空间。</p>
<p>我们使用的是fanout模式，这并没有给我们带来太大的灵活性——它只能进行无意识的广播。</p>
<p>我们将改用direct exchange。直接交换背后的路由算法很简单：消息进入其binding_key与消息的routing_key完全匹配的队列。</p>
<p>为了解释说明这些，如下图：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301522303.png" alt="Direct exchange routing"></p>
<p>在此设置中，我们可以看到直接交换器 X 绑定了两个队列。</p>
<p>第一个队列使用橙色绑定键绑定，第二个队列有两个绑定，一个使用黑色绑定键，另一个使用绿色绑定键。</p>
<p>在这样的设置中，使用路由键橙色发布到交换器的消息将被路由到队列 Q1。路由键为黑色或绿色的消息将发送至 Q2。所有其他消息将被丢弃。</p>
<h2 id="多绑定（Multiple-Bindings）"><a href="#多绑定（Multiple-Bindings）" class="headerlink" title="多绑定（Multiple Bindings）"></a>多绑定（Multiple Bindings）</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301527685.png" alt="Multiple Bindings"></p>
<p>使用相同的绑定键绑定多个队列是完全合法的。在我们的示例中，我们可以使用绑定键黑色在 X 和 Q1 之间添加绑定。在这种情况下，直接交换的行为将类似于fanout模式，并将消息广播到所有匹配的队列。带有routingKey黑色的消息将被传递到 Q1 和 Q2。</p>
<h2 id="发出日志-Emitting-logs"><a href="#发出日志-Emitting-logs" class="headerlink" title="发出日志 Emitting logs"></a>发出日志 Emitting logs</h2><p>我们将在我们的日志系统中使用这个模型。我们将fanout模式替换成direct模式，通过routing_key来记录严重日志，这样，接收程序将能够选择它想要接收的严重性。</p>
<p>我们首先需要创建一个exchange：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>然后，我们可以发送一个消息了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicPublish(EXCHANGE_NAME, severity, <span class="literal">null</span>, message.getBytes());</span><br></pre></td></tr></table></figure>

<p>为了简化事情，我们假设“严重性”可以是“信息”、“警告”、“错误”之一。</p>
<h2 id="Subscribing-订阅"><a href="#Subscribing-订阅" class="headerlink" title="Subscribing 订阅"></a>Subscribing 订阅</h2><p>接收消息的工作方式与上一篇教程类似，但有一个例外 - 我们将为我们感兴趣的每个严重性创建一个新的绑定。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(String severity : argv)&#123;</span><br><span class="line">  channel.queueBind(queueName, EXCHANGE_NAME, severity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="汇总到一起"><a href="#汇总到一起" class="headerlink" title="汇总到一起"></a>汇总到一起</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308301536272.png" alt="Final routing: putting it all together."></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yamon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023-08-30 15:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmitLogDirect</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">severity</span> <span class="operator">=</span> getSeverity(argv);</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> getMessage(argv);</span><br><span class="line"></span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, severity, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + severity + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getSeverity</span><span class="params">(String[] argv)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是一条严重消息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getMessage</span><span class="params">(String[] argv)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;得到一条消息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yamon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023-08-30 15:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveLogsDirect</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (argv.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Usage: ReceiveLogsDirect [info] [warning] [error]&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String severity : argv) &#123;</span><br><span class="line">            channel.queueBind(queueName, EXCHANGE_NAME, severity);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> +</span><br><span class="line">                    delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>04-RabbitMQ官方教程-topic</title>
    <url>/2023/08/31/12.%20RabbitMQ/04-RabbitMQ%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B-Topic/</url>
    <content><![CDATA[<h1 id="04-RabbitMQ官方教程-topic"><a href="#04-RabbitMQ官方教程-topic" class="headerlink" title="04-RabbitMQ官方教程-topic"></a>04-RabbitMQ官方教程-topic</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308311555612.jpeg" alt="a large body of water surrounded by mountains"></p>
<p>在上一个教程中，我们改进了日志系统。</p>
<p>我们不使用fanout的交换器，而是使用了直接广播，而是使用了一个直接的交换器，并获得了有选择性接收日志的可能性。</p>
<p>虽然，使用direct交换器可以提升我们的系统，但是他仍然有局限性——不能基于多个标准进行路由。</p>
<p>在我们的日志系统中，我们可能不仅希望根据严重性来订阅日志，还希望根据发出日志的源头来订阅日志。</p>
<p>我们可能从syslog工具中了解这个概念，该工具根据严重性（info、warn、crit）和功能（auth、cron、kern）路由日志。</p>
<p>这种行为会给我们很多的灵活性，我们可能只想听取来自cron的关键错误，也希望听取来自kern的所有日志。</p>
<p>为了提升，我们在日志系统中可以学习并添加topic的交换器来完成该功能。</p>
<h2 id="Topic-exchange"><a href="#Topic-exchange" class="headerlink" title="Topic exchange"></a>Topic exchange</h2><p>发送到topic exchange的消息不能有任意的routing_key - 它必须是一个由点分隔的单词列表。</p>
<p>这些单词可以是任何内容，但通常它们指定与消息相关的一些功能。</p>
<p>一些有效的路由键示例：“stock.usd.nyse”、“nyse.vmw”、“quick.orange.rabbit”。</p>
<p>路由秘钥中可以有任意多个单词，最多 255 个字节。</p>
<p>绑定key也必须采用相同的形式。topic exchang背后的逻辑与direct exchange类似，使用特定路由key发送的消息将被传送到匹配的绑定建绑定的所有队列，然而，绑定建有两种重要的特殊情况：</p>
<ul>
<li>*可以代替一个单词</li>
<li>#可以0或多个单词</li>
</ul>
<p>举个例子：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308311355816.png" alt="Topic Exchange illustration, which is all explained in the following text."></p>
<p>在此示例中，我们将发送所有描述动物的消息。消息由三个单词（两个点）组成的routing key发送。routing key中第一个单词描述速度，第二个单词描述颜色，第三个单词描述物种。<speed>.<colour>.<species>“</p>
<p>我们创建了三个绑定：</p>
<p>Q1使用绑定键”*.orange.*“ </p>
<p>Q2使用绑定键“*.*rabbit”和”lazy.#”绑定</p>
<p>这些绑定描述如下：</p>
<p>Q1对所有颜色为orange的动物感兴趣。</p>
<p>Q2希望接收到所有rabbits的消息，以及关于lazy动物的一切。</p>
<p>比如：</p>
<p>routing key设置为“quick.orange.rabbit”的消息将被传递到两个队列。</p>
<p>消息“lazy.orange.elephant”也将发送给他们两人。</p>
<p>另一方面，“quick.orange.fox”只会进入第一个队列，而“lazy.brown.fox”只会进入第二个队列。</p>
<p>“lazy.pink.rabbit”只会被传递到第二个队列一次，即使它匹配两个绑定。</p>
<p>“quick.brown.fox”与任何绑定都不匹配，因此它将被丢弃。</p>
<blockquote>
<p>Topic exchange</p>
<p>Topic exchange很强大，可以和其他交换器一起进行。</p>
<p>当一个队列绑定 # 表示，它介绍所有的消息。这时候就和fanout模式的一致。</p>
<p>当不使用的字符*和#的时候，就和direct模式一致。</p>
</blockquote>
<h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><p>我们在日志系统中使用topic exchange。首先假设日志的路由键有两个：facility和severity</p>
<p>code for EmitLogTopic.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;topic&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argv.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;Usage: ReceiveLogsTopic [binding_key]...&quot;</span>);</span><br><span class="line">        System.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String bindingKey : argv) &#123;</span><br><span class="line">        channel.queueBind(queueName, EXCHANGE_NAME, bindingKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> +</span><br><span class="line">            delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.basicConsume(queueName, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveLogsTopic</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;topic&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argv.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;Usage: ReceiveLogsTopic [binding_key]...&quot;</span>);</span><br><span class="line">        System.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String bindingKey : argv) &#123;</span><br><span class="line">        channel.queueBind(queueName, EXCHANGE_NAME, bindingKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> +</span><br><span class="line">            delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.basicConsume(queueName, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>05-RabbitMQ官方教程-RPC</title>
    <url>/2023/08/31/12.%20RabbitMQ/05-RabbitMQ%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B-RPC/</url>
    <content><![CDATA[<h1 id="05-RabbitMQ官方教程-RPC"><a href="#05-RabbitMQ官方教程-RPC" class="headerlink" title="05-RabbitMQ官方教程-RPC"></a>05-RabbitMQ官方教程-RPC</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308311556346.jpeg" alt="white mountain"></p>
<p>远程过程调用RPC</p>
<p>在第二个教程中，我们学习了如何使用work queues在多个不同worker之间分配耗时的任务。</p>
<p>但是如果我们需要在远程计算机上运行一个函数并等待结果怎么办？</p>
<p>嗯，那是一个不同的故事。这种模式通常称为远程过程调用或 RPC。</p>
<p>在本教程中，我们将使用 Rabbit MQ 构建一个 RPC 系统：一个客户端和一个可扩展的 RPC 服务器。</p>
<p>由于我们没有任何值得分发的耗时任务，因此我们将创建一个返回斐波那契数的虚拟 RPC 服务。</p>
<h2 id="客户端接口"><a href="#客户端接口" class="headerlink" title="客户端接口"></a>客户端接口</h2><p>为了说明如何使用 RPC 服务，我们将创建一个简单的客户端类。</p>
<p>它将公开一个名为 call 的方法，该方法发送 RPC 请求并阻塞，直到收到答案：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FibonacciRpcClient</span> <span class="variable">fibonacciRpc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FibonacciRpcClient</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> fibonacciRpc.call(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">System.out.println( <span class="string">&quot;fib(4) is &quot;</span> + result);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关于RPC笔记：</p>
<p>尽管 RPC 是计算中非常常见的模式，但它经常受到批评。当程序员不知道函数调用是本地函数还是慢速 RPC 时，就会出现问题。类似的混乱会导致系统不可预测，并给调试增加不必要的复杂性。滥用 RPC 不但不会简化软件，反而会导致难以维护的意大利面条式代码。</p>
<p>考虑到这一点，请考虑以下建议：</p>
<ul>
<li><p>确保哪个函数调用是本地的、哪个是远程的很明显。</p>
</li>
<li><p>记录您的系统。明确组件之间的依赖关系。</p>
</li>
<li><p>处理错误情况。当RPC服务器长时间宕机时，客户端应该如何反应？</p>
</li>
</ul>
<p>如有疑问，请避免使用 RPC。如果可以的话，您应该使用异步管道 - 而不是类似 RPC 的阻塞，而是将结果异步推送到下一个计算阶段。</p>
</blockquote>
<h2 id="回调队列（Callback-queue）"><a href="#回调队列（Callback-queue）" class="headerlink" title="回调队列（Callback queue）"></a>回调队列（Callback queue）</h2><p>一般来说，通过 Rabbit MQ 进行 RPC 很容易。客户端发送请求消息，服务器回复响应消息。为了接收响应，我们需要随请求发送“回调”队列地址。我们可以使用默认队列（Java客户端独有）。我们来尝试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">callbackQueueName = channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line"><span class="type">BasicProperties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicProperties</span></span><br><span class="line">                            .Builder()</span><br><span class="line">                            .replyTo(callbackQueueName)</span><br><span class="line">                            .build();</span><br><span class="line"></span><br><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;rpc_queue&quot;</span>, props, message.getBytes());</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... then code to read a response message from the callback_queue ...</span></span><br></pre></td></tr></table></figure>

<p>新的导入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>消息属性：</p>
<p>AMQP 0-9-1 协议预定义了消息附带的一组 14 个属性。大多数属性很少使用，但以下属性除外：</p>
<p>传递模式（deliveryMode）：将消息标记为持久（值为 2）或瞬态（任何其他值）。您可能还记得第二个教程中的这个属性。</p>
<p>内容类型（contentType）：用于描述编码的 mime 类型。例如，对于经常使用的 JSON 编码，最好将此属性设置为：application&#x2F;json。</p>
<p>回复（replyTo）：通常用于命名回调队列。</p>
<p>关联 ID（correlationId）：用于将 RPC 响应与请求关联起来。</p>
</blockquote>
<h2 id="Correlation-Id（相关ID）"><a href="#Correlation-Id（相关ID）" class="headerlink" title="Correlation Id（相关ID）"></a>Correlation Id（相关ID）</h2><p>在上面介绍的方法中，我们建议为每个 RPC 请求创建一个回调队列。这是相当低效的，但幸运的是有一个更好的方法 - 让我们为每个客户端创建一个回调队列。</p>
<p>这引发了一个新问题，在该队列中收到响应后，不清楚该响应属于哪个请求。这就是使用correlationId属性的时候。</p>
<p>我们将为每个请求将其设置为唯一值。稍后，当我们在回调队列中收到消息时，我们将查看此属性，并基于此我们将能够将响应与请求进行匹配。如果我们看到未知的correlationId 值，我们可以安全地丢弃该消息 - 它不属于我们的请求。</p>
<p>您可能会问，为什么我们应该忽略回调队列中的未知消息，而不是因错误而失败？这是由于服务器端可能存在竞争条件。虽然不太可能，但 RPC 服务器有可能在向我们发送答案之后、发送请求的确认消息之前就挂掉了。如果发生这种情况，重新启动的 RPC 服务器将再次处理该请求。这就是为什么在客户端我们必须优雅地处理重复的响应，并且 RPC 理想情况下应该是幂等的。</p>
<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202308311542203.png" alt="Summary illustration, which is described in the following bullet points."></p>
<p>我们的RPC工作如下：</p>
<ul>
<li>对于 RPC 请求，客户端发送一条具有两个属性的消息：reply To（回复到），它被设置为专门为该请求创建的匿名独占队列；以及correlation Id（它被设置为每个请求的唯一值）。请求被发送到 rpc_queue 队列。</li>
<li>请求被发送到 rpc_queue 队列。</li>
<li>RPC 工作线程（又名：服务器）正在等待该队列上的请求。当出现请求时，它会执行作业并使用replyTo字段中的队列将带有结果的消息发送回客户端。</li>
<li>客户端等待回复队列上的数据。当出现消息时，它会检查相关 Id 属性。如果它与请求中的值匹配，它将向应用程序返回响应。</li>
</ul>
<h2 id="组装"><a href="#组装" class="headerlink" title="组装"></a>组装</h2><p>斐波那契任务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们声明我们的斐波那契函数。它假设仅有效的正整数输入。（不要指望这个可以处理大数，而且它可能是最慢的递归实现）。</p>
<p>我们的 RPC 服务器的代码可以在这里找到：RPCServer.java。</p>
<p>服务器代码相当简单：</p>
<ul>
<li><p>像往常一样，我们首先建立连接、通道并声明队列。</p>
</li>
<li><p>我们可能想要运行多个服务器进程。为了将负载均匀地分布在多个服务器上，我们需要在channel.basic Qos中设置prefetchCount 。</p>
</li>
<li><p>我们使用basicConsume 来访问队列，其中我们以对象的形式提供回调（Deliver Callback），该回调将完成工作并将响应发回。</p>
</li>
</ul>
<p>我们的 RPC 客户端的代码可以在这里找到：RPCClient.java。</p>
<p>客户端代码稍微复杂一些：</p>
<ul>
<li><p>我们建立了connection和channel。</p>
</li>
<li><p>我们的call方法发出实际的RPC请求。</p>
</li>
<li><p>在这里，我们首先生成一个唯一的关联Id号并保存它——我们的消费者回调将使用这个值来匹配适当的响应。</p>
</li>
<li><p>然后，我们为回复创建一个专用的独占队列并订阅它。</p>
</li>
<li><p>接下来，我们发布具有两个属性的请求消息：reply-To和correlation-Id。</p>
</li>
<li><p>在这一点上，我们可以坐下来等待，直到适当的回应到来。</p>
</li>
<li><p>由于我们的消费者交付处理是在一个单独的线程中进行的，因此我们需要在响应到达之前挂起主线程。使用Completable Future是一种可能的解决方案。</p>
</li>
<li><p>消费者正在做一项非常简单的工作，对于每一条消费的响应消息，它都会检查相关性Id是否是我们要查找的。如果是这样，它就完成了复杂的未来。</p>
</li>
<li><p>同时，主线程正在等待Completable Future完成。</p>
</li>
<li><p>最后，我们将响应返回给用户。</p>
</li>
</ul>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RPCClient</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">requestQueueName</span> <span class="operator">=</span> <span class="string">&quot;rpc_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RPCClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"></span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">RPCClient</span> <span class="variable">fibonacciRpc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RPCClient</span>()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">i_str</span> <span class="operator">=</span> Integer.toString(i);</span><br><span class="line">                System.out.println(<span class="string">&quot; [x] Requesting fib(&quot;</span> + i_str + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> fibonacciRpc.call(i_str);</span><br><span class="line">                System.out.println(<span class="string">&quot; [.] Got &#x27;&quot;</span> + response + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | TimeoutException | InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException, InterruptedException, ExecutionException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">corrId</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">replyQueueName</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line">        AMQP.<span class="type">BasicProperties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties</span><br><span class="line">                .Builder()</span><br><span class="line">                .correlationId(corrId)</span><br><span class="line">                .replyTo(replyQueueName)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, requestQueueName, props, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> CompletableFuture&lt;String&gt; response = <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">ctag</span> <span class="operator">=</span> channel.basicConsume(replyQueueName, <span class="literal">true</span>, (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (delivery.getProperties().getCorrelationId().equals(corrId)) &#123;</span><br><span class="line">                response.complete(<span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> response.get();</span><br><span class="line">        channel.basicCancel(ctag);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RPCServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RPC_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;rpc_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.queueDeclare(RPC_QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.queuePurge(RPC_QUEUE_NAME);</span><br><span class="line"></span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot; [x] Awaiting RPC requests&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            AMQP.<span class="type">BasicProperties</span> <span class="variable">replyProps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties</span><br><span class="line">                    .Builder()</span><br><span class="line">                    .correlationId(delivery.getProperties().getCorrelationId())</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(message);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot; [.] fib(&quot;</span> + message + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                response += fib(n);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot; [.] &quot;</span> + e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>, delivery.getProperties().getReplyTo(), replyProps, response.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(RPC_QUEUE_NAME, <span class="literal">false</span>, deliverCallback, (consumerTag -&gt; &#123;&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成与体系结构</title>
    <url>/2024/05/31/13.%20%E8%BD%AF%E8%80%83/%E8%AE%A1%E7%BB%84/</url>
    <content><![CDATA[<h1 id="计算机组成与体系结构"><a href="#计算机组成与体系结构" class="headerlink" title="计算机组成与体系结构"></a>计算机组成与体系结构</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202309052004623.png" alt="image-20230905200426430"></p>
<h2 id="一、数据的表示"><a href="#一、数据的表示" class="headerlink" title="一、数据的表示"></a>一、数据的表示</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202309052006501.png" alt="image-20230905200606399"></p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202309052006121.png" alt="image-20230905200632080"></p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202309052008434.png" alt="image-20230905200801364"></p>
]]></content>
      <categories>
        <category>软考</category>
      </categories>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis相关知识点</title>
    <url>/2024/06/14/14.%20Redis/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="Redis相关知识点"><a href="#Redis相关知识点" class="headerlink" title="Redis相关知识点"></a>Redis相关知识点</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/image-20240614203517471.png" alt="image-20240614203517471"></p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/redis.png" alt="redis"></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基础-仓库、镜像、容器相关指令</title>
    <url>/2024/06/20/15.%20Docker/Docker%E5%9F%BA%E7%A1%80-%E4%BB%93%E5%BA%93%EF%BC%8C%E9%95%9C%E5%83%8F%EF%BC%8C%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Docker基础-仓库、镜像、容器相关指令"><a href="#Docker基础-仓库、镜像、容器相关指令" class="headerlink" title="Docker基础-仓库、镜像、容器相关指令"></a>Docker基础-仓库、镜像、容器相关指令</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/image-20240620203244109.png" alt="image-20240620203244109"></p>
<p> 关系图：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/docker-architecture.svg" alt="img"></p>
<h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看镜像：docker images</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/image-20240620200748485.png" alt="image-20240620200748485"></p>
<p>各个选项说明:</p>
<ul>
<li>REPOSITORY：表示镜像的仓库源</li>
<li>TAG：镜像的标签, 同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本</li>
<li>IMAGE ID：镜像ID</li>
<li>CREATED：镜像创建时间</li>
<li>SIZE：镜像大小</li>
</ul>
<h3 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查找镜像：docker search xx</span><br></pre></td></tr></table></figure>

<p>参数解释：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/image-20240620200912128.png" alt="image-20240620200912128"></p>
<p>NAME: 镜像仓库源的名称</p>
<p>DESCRIPTION: 镜像的描述</p>
<p>OFFICIAL: 是否 docker 官方发布</p>
<p>STARS: 类似 Github 里面的 star，表示点赞、喜欢的意思。</p>
<p>AUTOMATED: 自动构建。</p>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">拉取镜像：docker pull xxxx</span><br></pre></td></tr></table></figure>

<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">删除镜像：docker rmi xxx</span><br><span class="line">注：删除镜像时，必须要停止该镜像的容器。</span><br></pre></td></tr></table></figure>

<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm container-id</span><br></pre></td></tr></table></figure>

<h3 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h3><p><code>docker commit -m =&quot;message&quot; -a =&quot;chenym&quot; 镜像id name</code></p>
<p>生成镜像</p>
<p>可以使用Dockerfile</p>
<p><code>docker build -t name .</code></p>
<p>. 表示在当前目录里找到dockerfile文件。</p>
<p>比如这种：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span>    pdai/ubuntu:v1.<span class="number">0.1</span></span><br><span class="line"><span class="keyword">MAINTAINER</span>      pdai <span class="string">&quot;pdai.tech&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash">     /bin/echo <span class="string">&#x27;root:123456&#x27;</span> |chpasswd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash">     useradd pdai</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash">     /bin/echo <span class="string">&#x27;pdai:123456&#x27;</span> |chpasswd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash">     /bin/echo -e <span class="string">&quot;LANG=\&quot;en_US.UTF-8\&quot;&quot;</span> &gt;/etc/default/local</span></span><br><span class="line"><span class="keyword">EXPOSE</span>  <span class="number">22</span></span><br><span class="line"><span class="keyword">EXPOSE</span>  <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash">     /usr/sbin/sshd -D</span></span><br></pre></td></tr></table></figure>

<h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it imageId /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="镜像标签"><a href="#镜像标签" class="headerlink" title="镜像标签"></a>镜像标签</h3><p><code>docker tag imageId tagName</code></p>
<ul>
<li>docker tag 镜像ID，这里是 a733d5a264b5 ,用户名称、镜像源名(repository name)和新的标签名(tag)。</li>
<li>使用 docker images 命令可以看到，ID为a733d5a264b5的镜像多一个v3.0.1标签。</li>
</ul>
<h3 id="镜像导出和导入"><a href="#镜像导出和导入" class="headerlink" title="镜像导出和导入"></a>镜像导出和导入</h3><p>docker save &gt; fileName imagesId</p>
<p>fileName:导出到哪个位置。</p>
<p>imageId：镜像id</p>
<p>docker load  &lt; fileName</p>
<p>fileName:导入哪个镜像</p>
<blockquote>
<p>如果在启动容器后，容器内容有变化，需要备份，则使用export、import</p>
</blockquote>
<h2 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h2><h3 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a>容器启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it pdai/ubuntu:v2.0.1 /bin/bash</span><br></pre></td></tr></table></figure>

<p>举例： pdai&#x2F;ubuntu:v2.0.1 容器名称 </p>
<p>&#x2F;bin&#x2F;bash：固定，可简写成bash</p>
<ul>
<li><code>-it</code> 可以连写的，表示 <code>-i -t</code></li>
<li><code>-t</code>: 在新容器内指定一个伪终端或终端。</li>
<li><code>-i</code>: 允许你对容器内的标准输入 (STDIN) 进行交互</li>
</ul>
<h3 id="容器查看"><a href="#容器查看" class="headerlink" title="容器查看"></a>容器查看</h3><p>docker ps -a</p>
<p>注：docker ps只是能看到在运行的容器，并不能看到异常容器或已经停止的容器；类似的还有镜像。</p>
<h3 id="容器再次启动"><a href="#容器再次启动" class="headerlink" title="容器再次启动"></a>容器再次启动</h3><p>docker start containerId</p>
<h3 id="容器停止和重启"><a href="#容器停止和重启" class="headerlink" title="容器停止和重启"></a>容器停止和重启</h3><p>docker stop containerId</p>
<p>docker restart containerId</p>
<h3 id="后台模式进入"><a href="#后台模式进入" class="headerlink" title="后台模式进入"></a>后台模式进入</h3><p>-d 表示容器启动后以后台的模式运行，控制台返回容器id</p>
<p>第一种：docker attach containerId    退出后，容器终止</p>
<p>第二种：docker exe -it 容器id bin&#x2F;bash 退出后，容器接着运行。</p>
<h3 id="容器的导出和导入"><a href="#容器的导出和导入" class="headerlink" title="容器的导出和导入"></a>容器的导出和导入</h3><p>注意，这里是容器的导出和导入。</p>
<p>docker export 容器id &gt; fileName</p>
<p>docker import fileName 容器名称</p>
<h3 id="强制停止容器"><a href="#强制停止容器" class="headerlink" title="强制停止容器"></a>强制停止容器</h3><p>docker rm -f 容器id</p>
<h3 id="清理停止的容器"><a href="#清理停止的容器" class="headerlink" title="清理停止的容器"></a>清理停止的容器</h3><p>docker container prune</p>
<h3 id="容器别名及操作"><a href="#容器别名及操作" class="headerlink" title="容器别名及操作"></a>容器别名及操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --name newName oldName /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="容器错误日志"><a href="#容器错误日志" class="headerlink" title="容器错误日志"></a>容器错误日志</h3><p>重点！！！！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例：实时查看docker容器名为user-uat的最后10行日志</span><br><span class="line">docker logs -f -t --tail 10 user-uat</span><br><span class="line"></span><br><span class="line">例：查看指定时间后的日志，只显示最后100行：</span><br><span class="line">docker logs -f -t --since=&quot;2018-02-08&quot; --tail=100 user-uat</span><br><span class="line"></span><br><span class="line">例：查看最近30分钟的日志:</span><br><span class="line">docker logs --since 30m user-uat</span><br><span class="line"></span><br><span class="line">例：查看某时间之后的日志：</span><br><span class="line">docker logs -t --since=&quot;2018-02-08T13:23:37&quot; user-uat</span><br><span class="line"></span><br><span class="line">例：查看某时间段日志：</span><br><span class="line">docker logs -t --since=&quot;2018-02-08T13:23:37&quot; --until &quot;2018-02-09T12:23:37&quot; user-uat</span><br><span class="line"></span><br><span class="line">例：将错误日志写入文件：</span><br><span class="line">docker logs -f -t --since=&quot;2018-02-18&quot; user-uat | grep error &gt;&gt; logs_error.txt</span><br></pre></td></tr></table></figure>

<h3 id="查看容器配置详情"><a href="#查看容器配置详情" class="headerlink" title="查看容器配置详情"></a>查看容器配置详情</h3><p>docker inspect 容器id或容器名称</p>
<p>你可以看到，该容器使用的网络、容器、挂载卷等信息。</p>
<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><h3 id="公有仓库"><a href="#公有仓库" class="headerlink" title="公有仓库"></a>公有仓库</h3><p>Docker hub，目前国内不可访问。</p>
<p>登录：</p>
<p>docker login</p>
<p>打tag：</p>
<p>docker tag 镜像名 镜像tag号</p>
<p>push到远端：</p>
<p>docker push 镜像id</p>
<p>这样就能推送到docker hub的私有仓库上。</p>
<h3 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h3><p>需要私有化部署harbor仓库，类似于docker hub，但是属于企业内部访问。常与k8s合并使用。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>FullGC和YoungGC</title>
    <url>/2024/05/31/04.Java/JVM/FullGC%E5%92%8CYoungGC/</url>
    <content><![CDATA[<h1 id="FullGC和YoungGC"><a href="#FullGC和YoungGC" class="headerlink" title="FullGC和YoungGC"></a>FullGC和YoungGC</h1><p><img src="https://images.unsplash.com/photo-1715553176036-76af0d949e57?q=80&w=1000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwyN3x8fGVufDB8fHx8fA==" alt="the sun is shining on a mountain range"></p>
<p>想知道什么是FullGC的话，首先要了解，GC是什么？</p>
<h2 id="GC是什么？"><a href="#GC是什么？" class="headerlink" title="GC是什么？"></a>GC是什么？</h2><p>GC是垃圾收集（Gabage Collection），为什么需要GC呢？是因为与C或C++不同，java不需要人为地手动维护内存，所以，jvm提供gc回收机制来回收jvm自认为不会使用或者需要移动区的对象。</p>
<h2 id="GC的原理是什么？"><a href="#GC的原理是什么？" class="headerlink" title="GC的原理是什么？"></a>GC的原理是什么？</h2><p>当对象创建的时候，GC就开始监控这个对象的地址、大小以及使用情况。</p>
<p>通常，GC采用有向图的方式记录和管理堆（heap）中的所有对象。通过判断对象是否可达，来回收对象。如果GC判断该对象不可达，则回收内存空间。</p>
<p>可以手动执行<code>System.gc()</code>手动gc。</p>
<h2 id="GC中的新生代、老年代"><a href="#GC中的新生代、老年代" class="headerlink" title="GC中的新生代、老年代"></a>GC中的新生代、老年代</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/image-20240531155835538.png" alt="image-20240531155835538"></p>
<p>上方的Eden、s0、s1都属于新生代。</p>
<p>大部分情况下，对象都会首先在 Eden 区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入 s0 或者 s1，并且对象的年龄还会加 1(Eden 区-&gt;Survivor 区后对象的初始年龄变为 1)，当它的年龄增加到一定程度（默认为大于 15 岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 -XX:MaxTenuringThreshold 来设置默认值，这个值会在虚拟机运行过程中进行调整，可以通过-XX:+PrintTenuringDistribution来打印出当次 GC 后的 Threshold。</p>
<p>经过这次 GC 后，Eden 区和”From”区已经被清空。这个时候，”From”和”To”会交换他们的角色，也就是新的”To”就是上次 GC 前的“From”，新的”From”就是上次 GC 前的”To”。不管怎样，都会保证名为 To 的 Survivor 区域是空的。Minor GC 会一直重复这样的过程，在这个过程中，有可能当次 Minor GC 后，Survivor 的”From”区域空间不够用，有一些还达不到进入老年代条件的实例放不下，则放不下的部分会提前进入老年代。</p>
<p>大对象会直接进老年代，大对象的定义：需要占用连续的内存，比如数组、集合等。</p>
<h2 id="Young-GC（Minor-GC）"><a href="#Young-GC（Minor-GC）" class="headerlink" title="Young GC（Minor GC）"></a>Young GC（Minor GC）</h2><p>新生代的GC，当新生代的Eden区满了之后，就会触发Young GC,也叫Minor GC</p>
<h2 id="Full-GC（Major-GC）"><a href="#Full-GC（Major-GC）" class="headerlink" title="Full GC（Major GC）"></a>Full GC（Major GC）</h2><p>顾名思义，Full GC发生在老年代。触发的条件：</p>
<ol>
<li>当老年代没有足够空间存放对象时，触发</li>
<li>如果元空间区域的内存达到了设定的阈值 -XX:MetaspaceSize&#x3D;，也会触发</li>
<li>显示调用System.gc或Runtime.gc()</li>
<li>老年代可用内存小于新生代全部对象的大小，如果没开启空间担保参数，会直接触发Full GC，所以一般空间担保参数都会打开。</li>
<li>老年代可用内存小于历次新生代GC后进入老年代的平均对象大小，此时会提前Full GC；但是”-XX:HandlePromotionFailure”参数，在JDK 1.6以后就被废弃了，所以现在一般都不会在生产环境里设置这个参数了。在JDK 1.6以后，只要判断”老年代可用空间”大于”新生代对象总和”或者”老年代可用空间”大于”历次Minor GC升入老年代对象的平均大小”，两个条件满足一个，就可以直接进行Y GC，不需要提前触发Full GC了。</li>
<li>是新生代Youth GC后的存活对象大于Survivor，那么就会进入老年代，此时老年代内存不足，触发Full GC。这里的不足就是判断条件后还是不足或者经过判断后进行YGC后放入老年代此时的空间不足，然后进行Full GC，就会出现频繁Full GC。达到一定情况后，就会OOM了。</li>
<li>是如果用的是CMS收集器，老年代可用内存大于历次新生代GC后进入老年代的对象平均大小，但是老年代已经使用的内存空间超过了（”-XX:CMSInitiatingOccupancyFaction&#x3D;92%”JDK6默认值 ）这个参数指定的比例，也会自动触发Full GC。</li>
</ol>
<h2 id="Mixed-GC"><a href="#Mixed-GC" class="headerlink" title="Mixed GC"></a>Mixed GC</h2><p>G1中特有的，当老年代内存占据45%就会触发mixed GC，对新生代和老年代都进行回收。</p>
<h2 id="JVM的垃圾回收器"><a href="#JVM的垃圾回收器" class="headerlink" title="JVM的垃圾回收器"></a>JVM的垃圾回收器</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/image-20240531155915825.png" alt="image-20240531155915825"></p>
<p>垃圾回收器主要分年轻代和老年代。</p>
<p>年轻代：<strong>Serial、PraNew、Parallel Scavenge</strong></p>
<p>老年代<strong>：Serial Old、Parallel Old、CMS</strong></p>
<p>回收整个Java堆的<strong>：G1收集器</strong></p>
<p><strong>JDK1.8 ： G1</strong></p>
<p><strong>java11：G1</strong></p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://javaguide.cn/java/jvm/jvm-garbage-collection.html#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2">JVM垃圾回收详解（重点）</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM类加载过程</title>
    <url>/2023/07/14/04.Java/JVM/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="JVM类加载过程"><a href="#JVM类加载过程" class="headerlink" title="JVM类加载过程"></a>JVM类加载过程</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307141527134.jpeg" alt="a small boat floating on top of a large body of water"></p>
<p>引入前提：</p>
<p>JVM类加载机制：</p>
<p>类从被加载到JVM中开始，到结束释放内存为止，整个声明周期可以简单概括为7个阶段：</p>
<p>加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）。其中，验证、准备和解析这三个阶段可以统称为连接（Linking）。</p>
<p>这七个阶段的顺序如下图：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307141027538.png" alt="一个类的完整生命周期"></p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>类加载过程</tag>
      </tags>
  </entry>
  <entry>
    <title>00.反射-基本入门</title>
    <url>/2023/07/14/04.Java/Java%E5%9F%BA%E7%A1%80/00.%E5%8F%8D%E5%B0%84-%E5%9F%BA%E6%9C%AC%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="00-反射-基本入门"><a href="#00-反射-基本入门" class="headerlink" title="00.反射-基本入门"></a>00.反射-基本入门</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307141518161.jpeg" alt="a group of palm trees against a blue sky"></p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>反射具备在运行时分析类以及执行类中方法的能力，很多框架都使用了反射，通过反射可以获取任意一个类的所有属性和方法，可以调用这些方法和属性。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="一、Spring、Spring-Boot、Mybatis等框架中都使用了反射机制；"><a href="#一、Spring、Spring-Boot、Mybatis等框架中都使用了反射机制；" class="headerlink" title="一、Spring、Spring Boot、Mybatis等框架中都使用了反射机制；"></a>一、Spring、Spring Boot、Mybatis等框架中都使用了反射机制；</h3><p>Spring为了保持通用性，通过配置文件加载不同的对象，调用不同的方法；</p>
<h3 id="二、-动态代理"><a href="#二、-动态代理" class="headerlink" title="二、 动态代理"></a>二、 动态代理</h3><p>在面向切面编程中，需要拦截特定的方法，就会选择动态代理的方式，而动态代理的底层技术就是反射。</p>
<p>同时，在上述的框架中，也大量使用了动态代理，而动态代理依赖反射机制；</p>
<p>以下为JDK实现动态代理的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DebugInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理类中的真实对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DebugInvocationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before method &quot;</span> + method.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;after method &quot;</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三、Java的注解也用到了反射。"><a href="#三、Java的注解也用到了反射。" class="headerlink" title="三、Java的注解也用到了反射。"></a>三、Java的注解也用到了反射。</h3><blockquote>
<p>为什么你使用 Spring 的时候 ，一个<code>@Component</code>注解就声明了一个类为 Spring Bean 呢？为什么你通过一个 <code>@Value</code>注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？</p>
<p>这些都是因为你可以基于反射分析类，然后获取到类&#x2F;属性&#x2F;方法&#x2F;方法的参数上的注解。你获取到注解之后，就可以做进一步的处理.</p>
</blockquote>
<h2 id="反射的优缺点"><a href="#反射的优缺点" class="headerlink" title="反射的优缺点"></a>反射的优缺点</h2><p>优点：代码灵活，为各种框架提供开箱即用的功能；</p>
<p>缺点：</p>
<p>破坏封装：由于反射允许访问私有字段和私有方法，所以可能会破坏封装而导致安全问题，除此之外，反射可以忽略Java泛型参数的安全检查（泛型参数检查发生在编译期）。</p>
<p>性能开销：由于反射涉及到动态解析，因此无法执行Java虚拟机优化。</p>
<h2 id="反射的基本使用方法"><a href="#反射的基本使用方法" class="headerlink" title="反射的基本使用方法"></a>反射的基本使用方法</h2><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307131750639.png" alt="image-20230713175042543"></p>
<p>第一步，获取反射类的Class对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;全限定包名+类名&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>第二步，通过Class对象获取构造方法Constructor对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> constructor.newInstance();</span><br></pre></td></tr></table></figure>

<p>第三步，通过Constructor对象初始化反射对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> constructor.newInstance();</span><br></pre></td></tr></table></figure>

<p>第四步，获取要调用的方法的Method对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">setNameMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line"><span class="type">Method</span> <span class="variable">getNameMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getName&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>第五步，执行invoke方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setNameMethod.invoke(object, <span class="string">&quot;沉默王二&quot;</span>);</span><br><span class="line">getNameMethod.invoke(object)</span><br></pre></td></tr></table></figure>

<h2 id="反射原理"><a href="#反射原理" class="headerlink" title="反射原理"></a>反射原理</h2><p>引入前提：熟悉《JVM类加载机制》</p>
<p>使用反射的前提是得到该反射类的Class对象，每一个类，不过它最终生成了多少个对象，这些对象只会对应一个Class对象（注意，同一个Class对象），这个Class对象是JVM生成的，包含了整个类的结构信息。</p>
<p>换句话说，java.lang.Class是所有反射API的入口，而方法的反射调用的是由Method对象的invoke方法完成的，源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object obj, Object... args)</span></span><br><span class="line">        <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException,</span><br><span class="line">        InvocationTargetException &#123;</span><br><span class="line">    <span class="comment">// 如果方法不允许被覆盖，进行权限检查</span></span><br><span class="line">    <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">            Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">            <span class="comment">// 检查调用者是否具有访问权限</span></span><br><span class="line">            checkAccess(caller, clazz, obj, modifiers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取方法访问器（从 volatile 变量中读取）</span></span><br><span class="line">    <span class="type">MethodAccessor</span> <span class="variable">ma</span> <span class="operator">=</span> methodAccessor;</span><br><span class="line">    <span class="keyword">if</span> (ma == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果访问器为空，尝试获取方法访问器</span></span><br><span class="line">        ma = acquireMethodAccessor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用方法访问器调用方法，并返回结果</span></span><br><span class="line">    <span class="keyword">return</span> ma.invoke(obj, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述的两个if语句是用来进行权限检查的。invoke方法实际上委派给MethodAccessor接口执行：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307141033090.png" alt="img"></p>
<p>而MethodAccessor接口有三个实现类，其中MethodAccessorImpl是抽象类，另外两个具体的实现类继承这个抽象类：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307141034048.png" alt="img"></p>
<ul>
<li>NativeMethodAccessorImpl：通过本地方法来实现反射调用；</li>
<li>DelegatingMethodAccessorImpl：通过委派模式来实现反射调用；</li>
</ul>
<p>执行到invoke()方法之后，可以看到第一次反射调用会生成一个委派实现DelegatingMethodAccessorImpl，传递一个本地实现NativeMethodAccessorImpl。<img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307141035161.png" alt="img"></p>
<p>也就是说，<code>invoke()</code> 方法在执行的时候，会先调用 DelegatingMethodAccessorImpl，然后调用 NativeMethodAccessorImpl，最后再调用实际的方法。</p>
<p><strong>为什么不直接调用本地方法NativeMethodAccessorImpl实现反射呢？</strong></p>
<p><strong>回答：</strong></p>
<p>之所以采用委派实现，是为了能够在本地实现和动态实现之间切换。动态实现是另外一种反射调用机制，它是通过生成字节码的形式来实现的。如果反射调用的次数比较多，动态实现的效率就会更高，因为本地实现需要经过 Java 到 C&#x2F;C++ 再到 Java 之间的切换过程，而动态实现不需要；但如果反射调用的次数比较少，反而本地实现更快一些。</p>
<p>临界点为15次，可以通过-Dsun.reflect.inflationThreshold设置。</p>
<h2 id="反射的常用API"><a href="#反射的常用API" class="headerlink" title="反射的常用API"></a>反射的常用API</h2><h3 id="获取反射类的Class对象"><a href="#获取反射类的Class对象" class="headerlink" title="获取反射类的Class对象"></a>获取反射类的Class对象</h3><h4 id="1-知道具体类的情况下："><a href="#1-知道具体类的情况下：" class="headerlink" title="1. 知道具体类的情况下："></a>1. 知道具体类的情况下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Person&gt; personClass = Person.class;</span><br></pre></td></tr></table></figure>

<p>但是一般情况下，是不知道具体类的，基本通过遍历包下面的类来获取Class对象，通过此方式获取Class对象<strong>并不会初始化。</strong>（<strong>这时候并没有通过反射进行实例化对象，应该获取类的Constructor，然后newInstance初始化对象</strong>）。</p>
<h4 id="2-通过Class-forName（）传入类的全路径："><a href="#2-通过Class-forName（）传入类的全路径：" class="headerlink" title="2. 通过Class.forName（）传入类的全路径："></a>2. 通过Class.forName（）传入类的全路径：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.example.basejava.reflect.Person&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="3-通过对象实例instance-getClass-获取："><a href="#3-通过对象实例instance-getClass-获取：" class="headerlink" title="3. 通过对象实例instance.getClass()获取："></a>3. 通过对象实例instance.getClass()获取：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Person</span>&gt; personClass1 = person.getClass();</span><br></pre></td></tr></table></figure>

<h4 id="4-通过类加载器传入类路径获取"><a href="#4-通过类加载器传入类路径获取" class="headerlink" title="4. 通过类加载器传入类路径获取"></a>4. 通过类加载器传入类路径获取</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; personClass2 = ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;com.example.basejava.reflect.Person&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>注意：通过类加载器获取 Class 对象不会进行初始化，意味着不进行包括初始化等一系列步骤，<strong>静态代码块</strong>和<strong>静态对象</strong>不会得到执行。</p>
<h3 id="创建反射类的对象"><a href="#创建反射类的对象" class="headerlink" title="创建反射类的对象"></a>创建反射类的对象</h3><p>两种方式：</p>
<ul>
<li>用Class对象的newInstance()方法。</li>
<li>用构造方法Constructor对象的newInsta()方法。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Writer.class;</span><br><span class="line"><span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> (Writer) c1.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itwanger.s39.Writer&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c2.getConstructor();</span><br><span class="line"><span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> constructor.newInstance();</span><br></pre></td></tr></table></figure>

<h3 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h3><p>Class对象提供了以下方法来获取构造方法对象：</p>
<ul>
<li><code>getConstructor()</code>：返回反射类的特定 public 构造方法，可以传递参数，参数为构造方法参数对应 Class 对象；缺省的时候返回默认构造方法。</li>
<li><code>getDeclaredConstructor()</code>：返回反射类的特定构造方法，不限定于 public 的。</li>
<li><code>getConstructors()</code>：返回类的所有 public 构造方法。</li>
<li><code>getDeclaredConstructors()</code>：返回类的所有构造方法，不限定于 public 的。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; personClass2 = ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;com.example.basejava.reflect.Person&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> personClass2.getConstructor();</span><br><span class="line"></span><br><span class="line">Constructor[] constructors1 = String.class.getDeclaredConstructors();</span><br><span class="line"><span class="keyword">for</span> (Constructor c : constructors1) &#123;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h3><p>获取Field对象即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">setNameMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line"><span class="type">Method</span> <span class="variable">getNameMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getName&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="获取成员方法"><a href="#获取成员方法" class="headerlink" title="获取成员方法"></a>获取成员方法</h3><p>获取Method方法即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method[] methods1 = System.class.getDeclaredMethods();</span><br><span class="line">Method[] methods2 = System.class.getMethods();</span><br></pre></td></tr></table></figure>

<h2 id="反射Demo"><a href="#反射Demo" class="headerlink" title="反射Demo"></a>反射Demo</h2><p>创建一个基本的Person类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.basejava.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yamon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023-07-13 14:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Date birthDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是private方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String id, String name, Integer age, String gender, Date birthDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.birthDate = birthDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行getName方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行set的方法，name属性值为：&quot;</span> + name);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirthDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthDate</span><span class="params">(Date birthDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthDate = birthDate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.basejava.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yamon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023-07-13 14:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取反射对象</span></span><br><span class="line"><span class="comment">//        Class&lt;Person&gt; personClass = Person.class;</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            Class&lt;?&gt; aClass = Class.forName(&quot;com.example.basejava.reflect.Person&quot;);</span></span><br><span class="line"><span class="comment">//            Person person = new Person();</span></span><br><span class="line"><span class="comment">//            Class&lt;? extends Person&gt; personClass1 = person.getClass();</span></span><br><span class="line">            <span class="comment">// 通过类加载器获取Class对象</span></span><br><span class="line">            Class&lt;?&gt; personClass2 = ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;com.example.basejava.reflect.Person&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行getName方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> personClass2.getMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">            getName.invoke(personClass2.newInstance());</span><br><span class="line">            <span class="comment">// 执行setName方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> personClass2.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">            <span class="comment">// 执行invoke方法必须先实例化，实例化方式有两种，第一种通过Class对象的newInstance；</span></span><br><span class="line">            setName.invoke(personClass2.newInstance(), <span class="string">&quot;chenym&quot;</span>);</span><br><span class="line">            <span class="comment">// 第二种，自己new一个对象；</span></span><br><span class="line">            setName.invoke(person, <span class="string">&quot;通过new实例后的setName：chenym&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行private方法,无参的私有方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">privateMethod</span> <span class="operator">=</span> personClass2.getDeclaredMethod(<span class="string">&quot;privateMethod&quot;</span>);</span><br><span class="line">            privateMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            privateMethod.invoke(personClass2.newInstance());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException | NoSuchMethodException | InvocationTargetException | ClassNotFoundException |</span><br><span class="line">                 InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注：getDeclaredMethod：获取当前类的所有声明的方法，包括public、protected和private修饰的方法。需要注意的是，这些方法一定是在当前类中声明的，从父类中继承的不算，实现接口的方法由于有声明所以包括在内。</p>
<p>getMethod：获取当前类和父类的所有public的方法。这里的父类，指的是继承层次中的所有父类。比如说，A继承B，B继承C，那么B和C都属于A的父类。</p>
<p>执行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">执行getName方法</span><br><span class="line">执行set的方法，name属性值为：chenym</span><br><span class="line">执行set的方法，name属性值为：通过<span class="keyword">new</span>实例后的setName：chenym</span><br><span class="line">这是<span class="keyword">private</span>方法</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://javaguide.cn/java/basis/reflection.html#%E4%BD%95%E4%B8%BA%E5%8F%8D%E5%B0%84">Java 反射机制详解</a></p>
<p><a href="https://blog.csdn.net/weixin_40007563/article/details/83118806">getDeclaredMethod、getMethod</a></p>
<p><a href="https://tobebetterjavaer.com/basic-extra-meal/fanshe.html">Java 反射详解：动态创建实例、调用方法和访问字段</a></p>
<p><strong>强烈推荐！！！</strong><a href="https://dunwu.github.io/javacore/pages/0d066a/#%E8%8E%B7%E5%8F%96-class-%E5%AF%B9%E8%B1%A1">深入理解Java反射和动态代理</a></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射API</title>
    <url>/2023/07/14/04.Java/Java%E5%9F%BA%E7%A1%80/01.%20Java%E5%8F%8D%E5%B0%84API/</url>
    <content><![CDATA[<h1 id="01-Java反射API"><a href="#01-Java反射API" class="headerlink" title="01. Java反射API"></a>01. Java反射API</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307141520910.jpeg" alt="a large group of rocks in the middle of a desert"></p>
<h2 id="java-lang-Class类"><a href="#java-lang-Class类" class="headerlink" title="java.lang.Class类"></a>java.lang.Class类</h2><p>Class 类的一个实例表示 Java 的一种数据类型，包括类、接口、枚举、注解（Annotation）、数组、基本数据类型和 void。Class 没有公有的构造方法，Class 实例是由 JVM 在类加载时自动创建的。</p>
<p>在程序代码中获得 Class 实例可以通过如下代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 通过类型class静态变量</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clz1</span> <span class="operator">=</span> String.class;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="comment">// 2. 通过对象的getClass()方法</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clz2</span> <span class="operator">=</span> str.getClass();</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       Class&lt;String&gt; clz1 = String.class;</span><br><span class="line">       <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;chenym&quot;</span>;</span><br><span class="line">       Class&lt;? <span class="keyword">extends</span> <span class="title class_">String</span>&gt; clz2 = str.getClass();</span><br><span class="line">       Class&lt;Integer&gt; clz3 = <span class="type">int</span>.class;</span><br><span class="line">       Class&lt;Integer&gt; clz4 = Integer.class;</span><br><span class="line">       System.out.println(<span class="string">&quot;clz2类名称：&quot;</span> + clz2.getName());</span><br><span class="line">       System.out.println(<span class="string">&quot;clz2是否为接口：&quot;</span> + clz2.isInterface());</span><br><span class="line">       System.out.println(<span class="string">&quot;clz2是否为数组对象：&quot;</span> + clz2.isArray());</span><br><span class="line">       System.out.println(<span class="string">&quot;clz2父类名称：&quot;</span> + clz2.getSuperclass().getName());</span><br><span class="line">       System.out.println(<span class="string">&quot;clz2是否为基本类型：&quot;</span> + clz2.isPrimitive());</span><br><span class="line">       System.out.println(<span class="string">&quot;clz3是否为基本类型：&quot;</span> + clz3.isPrimitive());</span><br><span class="line">       System.out.println(<span class="string">&quot;clz4是否为基本类型：&quot;</span> + clz4.isPrimitive());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>示例结果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clz2类名称：java.lang.String</span><br><span class="line">clz2是否为接口：<span class="literal">false</span></span><br><span class="line">clz2是否为数组对象：<span class="literal">false</span></span><br><span class="line">clz2父类名称：java.lang.Object</span><br><span class="line">clz2是否为基本类型：<span class="literal">false</span></span><br><span class="line">clz3是否为基本类型：<span class="literal">true</span></span><br><span class="line">clz4是否为基本类型：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="java-lang-reflect包"><a href="#java-lang-reflect包" class="headerlink" title="java.lang.reflect包"></a>java.lang.reflect包</h2><p>该包下包含了反射使用到的类，主要有：</p>
<ul>
<li>Constructor 类：提供类的构造方法信息。</li>
<li>Field 类：提供类或接口中成员变量信息。</li>
<li>Method 类：提供类或接口成员方法信息。</li>
<li>Array 类：提供了动态创建和访问 Java 数组的方法。</li>
<li>Modifier 类：提供类和成员访问修饰符信息。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 动态加载类的运行时对象</span></span><br><span class="line">            Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.example.basejava.reflect.Person&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取该类包含的所有成员方法</span></span><br><span class="line">            Method[] methods = c.getDeclaredMethods();</span><br><span class="line">            <span class="comment">// 遍历成员方法</span></span><br><span class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                <span class="comment">// 打印每个方法的访问权限</span></span><br><span class="line">                System.out.println(<span class="string">&quot;打印每个方法的访问权限：&quot;</span>);</span><br><span class="line">                System.out.println(Modifier.toString(method.getModifiers()));</span><br><span class="line">                System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;打印每个方法的返回值：&quot;</span>);</span><br><span class="line">                <span class="comment">// 打印每个方法的返回值</span></span><br><span class="line">                System.out.println(method.getReturnType().getName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;打印每个方法方法名称:&quot;</span>);</span><br><span class="line">                <span class="comment">// 打印每个方法方法名称</span></span><br><span class="line">                System.out.println(method.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>11</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>02. Java如何通过反射访问构造方法？</title>
    <url>/2023/07/14/04.Java/Java%E5%9F%BA%E7%A1%80/02.%20Java%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E8%AE%BF%E9%97%AE%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="02-Java如何通过反射访问构造方法？"><a href="#02-Java如何通过反射访问构造方法？" class="headerlink" title="02. Java如何通过反射访问构造方法？"></a>02. Java如何通过反射访问构造方法？</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307141521708.jpeg" alt="a close up of a metal object with a twitter logo on it"></p>
<p>为了能够动态获取对象构造方法的信息，首先需要创建一个Constructor类型的对象或者数组：</p>
<ul>
<li>getConstructors()</li>
<li>getConstructor(Class&lt;?&gt;…parameterTypes)</li>
<li>getDeclaredConstructors()</li>
<li>getDeclaredConstructor(Class&lt;?&gt;…parameterTypes)</li>
</ul>
<p>如果是访问指定的构造方法，需要根据该构造方法的入口参数类型来访问。例如，访问一个入口参数一次为int、string类型的构造方法，下面的两种方式均可实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">objectClass.getDeclaredConstructor(<span class="type">int</span>.class,String.class);</span><br><span class="line">objectClass.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;<span class="type">int</span>.class,String.class&#125;);</span><br></pre></td></tr></table></figure>

<p>创建的每个Constructor对象表示一个构造方法，然后利用Constructor对象的方法操作构造方法。Constructor类的常用方法：</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>isVarArgs()</td>
<td>查看该构造方法是否允许带可变数量的参数，如果允许，返回 true，否则返回 false</td>
</tr>
<tr>
<td>getParameterTypes()</td>
<td>按照声明顺序以 Class 数组的形式获取该构造方法各个参数的类型</td>
</tr>
<tr>
<td>getExceptionTypes()</td>
<td>以 Class 数组的形式获取该构造方法可能抛出的异常类型</td>
</tr>
<tr>
<td>newInstance(Object … initargs)</td>
<td>通过该构造方法利用指定参数创建一个该类型的对象，如果未设置参数则表示 采用默认无参的构造方法</td>
</tr>
<tr>
<td>setAccessiable(boolean flag)</td>
<td>如果该构造方法的权限为 private，默认为不允许通过反射利用 netlnstance() 方法创建对象。如果先执行该方法，并将入口参数设置为 true，则允许创建对 象</td>
</tr>
<tr>
<td>getModifiers()</td>
<td>获得可以解析出该构造方法所采用修饰符的整数</td>
</tr>
</tbody></table>
<p>通过 java.lang.reflect.Modifier 类可以解析出 getMocMers() 方法的返回值所表示的修饰符信息。在该类中提供了一系列用来解析的静态方法，既可以查看是否被指定的修饰符修饰，还可以字符串的形式获得所有修饰符。以下为 Modifier 类的常用静态方法：</p>
<table>
<thead>
<tr>
<th>静态方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>isStatic(int mod)</td>
<td>如果使用 static 修饰符修饰则返回 true，否则返回 false</td>
</tr>
<tr>
<td>isPublic(int mod)</td>
<td>如果使用 public 修饰符修饰则返回 true，否则返回 false</td>
</tr>
<tr>
<td>isProtected(int mod)</td>
<td>如果使用 protected 修饰符修饰则返回 true，否则返回 false</td>
</tr>
<tr>
<td>isPrivate(int mod)</td>
<td>如果使用 private 修饰符修饰则返回 true，否则返回 false</td>
</tr>
<tr>
<td>isFinal(int mod)</td>
<td>如果使用 final 修饰符修饰则返回 true，否则返回 false</td>
</tr>
<tr>
<td>toString(int mod)</td>
<td>以字符串形式返回所有修饰符</td>
</tr>
</tbody></table>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>假设类Book中，有三个构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    String name; <span class="comment">// 图书名称</span></span><br><span class="line">    <span class="type">int</span> id, price; <span class="comment">// 图书编号和价格</span></span><br><span class="line">    <span class="comment">// 空的构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Book</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 带两个参数的构造方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Book</span><span class="params">(String _name, <span class="type">int</span> _id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = _name;</span><br><span class="line">        <span class="built_in">this</span>.id = _id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 带可变参数的构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> NumberFormatException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &lt; strings.length)</span><br><span class="line">            id = Integer.valueOf(strings[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> &lt; strings.length)</span><br><span class="line">            price = Integer.valueOf(strings[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出图书信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;id=&quot;</span> + id);</span><br><span class="line">        System.out.println(<span class="string">&quot;price=&quot;</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.basejava.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yamon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023-07-13 15:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 动态获取Book类</span></span><br><span class="line">        Class&lt;Book&gt; bookClass = Book.class;</span><br><span class="line">        <span class="comment">// 获取Book的所有构造方法</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = bookClass.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; declaredConstructors.length; i++) &#123;</span><br><span class="line">            Constructor&lt;?&gt; con = declaredConstructors[i];</span><br><span class="line">            <span class="comment">// 判断构造方法的参数是否可变</span></span><br><span class="line">            System.out.println(<span class="string">&quot;查看是否允许带可变数量的参数：&quot;</span> + con.isVarArgs());</span><br><span class="line">            System.out.println(<span class="string">&quot;该构造方法的入口参数类型依次为：&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取所有的参数类型</span></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = con.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot; &quot;</span> + parameterType);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取所有的可能抛出异常类型</span></span><br><span class="line">            System.out.println(<span class="string">&quot;该构造方法可能抛出的异常类型：&quot;</span>);</span><br><span class="line">            Class&lt;?&gt;[] exceptionTypes = con.getExceptionTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; exceptionType : exceptionTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot; &quot;</span> + exceptionType);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 创建一个未实例化的Book实例</span></span><br><span class="line">            <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (book == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="comment">// 通过执行带两个参数的构造方法实例化book1</span></span><br><span class="line">                        book = (Book) con.newInstance(<span class="string">&quot;Java 教程&quot;</span>, <span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="comment">// 通过执行默认构造方法实例化book1</span></span><br><span class="line">                        book = (Book) con.newInstance();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 通过执行可变数量参数的构造方法实例化book1</span></span><br><span class="line">                        Object[] parameters = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;100&quot;</span>, <span class="string">&quot;200&quot;</span>&#125;&#125;;</span><br><span class="line">                        book = (Book) con.newInstance(parameters);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;在创建对象时拋出异常，下面执行 setAccessible() 方法&quot;</span>);</span><br><span class="line">                    <span class="comment">// 设置允许访问 private 成员</span></span><br><span class="line">                    con.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            book.print();</span><br><span class="line">            System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实验结果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当通过反射访问默认构造方法 Book() 时，将看到如下所示的输出。</span></span><br><span class="line">查看是否允许带可变数量的参数：<span class="literal">true</span></span><br><span class="line">该构造方法的入口参数类型依次为：</span><br><span class="line"> class [Ljava.lang.String;</span><br><span class="line">该构造方法可能抛出的异常类型：</span><br><span class="line"> class java.lang.NumberFormatException</span><br><span class="line">name=null</span><br><span class="line"><span class="built_in">id</span>=100</span><br><span class="line">price=200</span><br><span class="line">==============================</span><br><span class="line"><span class="comment"># 当通过反射访问两个参数的构造方法 Book(String_name,int_id) 时，将看到如下所示的输出。</span></span><br><span class="line">查看是否允许带可变数量的参数：<span class="literal">false</span></span><br><span class="line">该构造方法的入口参数类型依次为：</span><br><span class="line"> class java.lang.String</span><br><span class="line"> int</span><br><span class="line">该构造方法可能抛出的异常类型：</span><br><span class="line">name=Java 教程</span><br><span class="line"><span class="built_in">id</span>=10</span><br><span class="line">price=0</span><br><span class="line">==============================</span><br><span class="line"><span class="comment"># 当通过反射访问可变参数数量的构造方法 Book(String...strings) 时，将看到如下所示的输出。</span></span><br><span class="line">查看是否允许带可变数量的参数：<span class="literal">false</span></span><br><span class="line">该构造方法的入口参数类型依次为：</span><br><span class="line">该构造方法可能抛出的异常类型：</span><br><span class="line">在创建对象时拋出异常，下面执行 setAccessible() 方法</span><br><span class="line">name=null</span><br><span class="line"><span class="built_in">id</span>=0</span><br><span class="line">price=0</span><br><span class="line">==============================</span><br><span class="line">Disconnected from the target VM, address: <span class="string">&#x27;127.0.0.1:44308&#x27;</span>, transport: <span class="string">&#x27;socket&#x27;</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>03. Java如何通过反射获取成员变量</title>
    <url>/2023/07/14/04.Java/Java%E5%9F%BA%E7%A1%80/03.%20Java%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h1 id="03-Java如何通过反射获取成员变量"><a href="#03-Java如何通过反射获取成员变量" class="headerlink" title="03. Java如何通过反射获取成员变量"></a>03. Java如何通过反射获取成员变量</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307141522641.jpeg" alt="a lone plant in the middle of a desert"></p>
<p>获取Class对象之后，使用下列任何一个方法访问成员变量时，将返回Field类型的对象或数组：</p>
<ul>
<li>getFields()</li>
<li>getField(String name)</li>
<li>getDeclaredFields()</li>
<li>getDeclaredField(String name)</li>
</ul>
<p>Filed类常用方法表：</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>getName()</td>
<td>获得该成员变量的名称</td>
</tr>
<tr>
<td>getType()</td>
<td>获取表示该成员变量的 Class 对象</td>
</tr>
<tr>
<td>get(Object obj)</td>
<td>获得指定对象 obj 中成员变量的值，返回值为 Object 类型</td>
</tr>
<tr>
<td>set(Object obj, Object value)</td>
<td>将指定对象 obj 中成员变量的值设置为 value</td>
</tr>
<tr>
<td>getlnt(0bject obj)</td>
<td>获得指定对象 obj 中成员类型为 int 的成员变量的值</td>
</tr>
<tr>
<td>setlnt(0bject obj, int i)</td>
<td>将指定对象 obj 中成员变量的值设置为 i</td>
</tr>
<tr>
<td>setFloat(Object obj, float f)</td>
<td>将指定对象 obj 中成员变量的值设置为 f</td>
</tr>
<tr>
<td>getBoolean(Object obj)</td>
<td>获得指定对象 obj 中成员类型为 boolean 的成员变量的值</td>
</tr>
<tr>
<td>setBoolean(Object obj, boolean b)</td>
<td>将指定对象 obj 中成员变量的值设置为 b</td>
</tr>
<tr>
<td>getFloat(Object obj)</td>
<td>获得指定对象 obj 中成员类型为 float 的成员变量的值</td>
</tr>
<tr>
<td>setAccessible(boolean flag)</td>
<td>此方法可以设置是否忽略权限直接访问 private 等私有权限的成员变量</td>
</tr>
<tr>
<td>getModifiers()</td>
<td>获得可以解析出该方法所采用修饰符的整数</td>
</tr>
</tbody></table>
<p>实例;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book2</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> price;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> isLoan;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Book2</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book2</span>();</span><br><span class="line">        <span class="comment">// 获取动态类Book2</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">class1</span> <span class="operator">=</span> book.getClass();</span><br><span class="line">        <span class="comment">// 获取Book2类的所有成员</span></span><br><span class="line">        Field[] declaredFields = class1.getDeclaredFields();</span><br><span class="line">        <span class="comment">// 遍历所有的成员</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">            <span class="comment">// 获取类中的成员变量</span></span><br><span class="line">            System.out.println(<span class="string">&quot;成员名称为：&quot;</span> + field.getName());</span><br><span class="line">            <span class="type">Class</span> <span class="variable">fieldType</span> <span class="operator">=</span> field.getType();</span><br><span class="line">            System.out.println(<span class="string">&quot;成员类型为：&quot;</span> + fieldType);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isTurn</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (isTurn) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果该成员变量的访问权限为private，则抛出异常</span></span><br><span class="line">                    isTurn = <span class="literal">false</span>;</span><br><span class="line">                    System.out.println(<span class="string">&quot;修改前成员的值为：&quot;</span> + field.get(book));</span><br><span class="line">                    <span class="comment">// 判断成员类型是否为int</span></span><br><span class="line">                    <span class="keyword">if</span> (fieldType.equals(<span class="type">int</span>.class)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;利用setInt()方法修改成员的值&quot;</span>);</span><br><span class="line">                        field.setInt(book, <span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType.equals(<span class="type">float</span>.class)) &#123;</span><br><span class="line">                        <span class="comment">// 判断成员变量类型是否为float</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;利用setFloat()方法修改成员的值&quot;</span>);</span><br><span class="line">                        field.setFloat(book, <span class="number">29.815f</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType.equals(<span class="type">boolean</span>.class)) &#123;</span><br><span class="line">                        <span class="comment">// 判断成员变量是否为boolean</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;利用setBoolean()方法修改成员的值&quot;</span>);</span><br><span class="line">                        field.setBoolean(book, <span class="literal">true</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;利用set()方法修改成员的值&quot;</span>);</span><br><span class="line">                        field.set(book, <span class="string">&quot;Java编程&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;修改后成员的值为：&quot;</span> + field.get(book));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;在设置成员变量值时抛出异常，下面执行setAccessible()方法&quot;</span>);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    isTurn = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============================\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>04. Java如何通过反射获取成员方法</title>
    <url>/2023/07/14/04.Java/Java%E5%9F%BA%E7%A1%80/04.%20Java%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="04-Java如何通过反射获取成员方法"><a href="#04-Java如何通过反射获取成员方法" class="headerlink" title="04. Java如何通过反射获取成员方法"></a>04. Java如何通过反射获取成员方法</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307141523503.jpeg" alt="a large storm in the ocean"></p>
<p>这一节主要使用反射中的Method类来获取成员方法。通过以下中的任何方式都会获取Method类：</p>
<ul>
<li>getMethods()</li>
<li>getMethods(String name,Class&lt;?&gt; …parameterTypes)</li>
<li>getDeclaredMethods()</li>
<li>getDeclaredMethods(String name,Class&lt;?&gt;…parameterTypes)</li>
</ul>
<p>Method类的常用方法：</p>
<table>
<thead>
<tr>
<th>静态方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>getName()</td>
<td>获取该方法的名称</td>
</tr>
<tr>
<td>getParameterType()</td>
<td>按照声明顺序以 Class 数组的形式返回该方法各个参数的类型</td>
</tr>
<tr>
<td>getReturnType()</td>
<td>以 Class 对象的形式获得该方法的返回值类型</td>
</tr>
<tr>
<td>getExceptionTypes()</td>
<td>以 Class 数组的形式获得该方法可能抛出的异常类型</td>
</tr>
<tr>
<td>invoke(Object obj,Object…args)</td>
<td>利用 args 参数执行指定对象 obj 中的该方法，返回值为 Object 类型</td>
</tr>
<tr>
<td>isVarArgs()</td>
<td>查看该方法是否允许带有可变数量的参数，如果允许返回 true，否则返回 false</td>
</tr>
<tr>
<td>getModifiers()</td>
<td>获得可以解析出该方法所采用修饰符的整数</td>
</tr>
</tbody></table>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>如何使用Method类的方法获取动态类中的方法信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.basejava.reflect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yamon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023-07-13 15:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book1</span> &#123;</span><br><span class="line">    <span class="comment">// static 作用域方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行staticMethod()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public 作用域方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">publicMethod</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行publicMethod()方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span> + i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// protected 作用域方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">protectedMethod</span><span class="params">(String s, <span class="type">int</span> i)</span> <span class="keyword">throws</span> NumberFormatException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行protectedMethod()方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(s) + i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private 作用域方法</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">privateMethod</span><span class="params">(String... strings)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行privateMethod()方法&quot;</span>);</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sb.length(); i++) &#123;</span><br><span class="line">            sb.append(strings[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.basejava.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yamon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023-07-13 15:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Book1</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book1</span>();</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.example.basejava.reflect.Book1&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取book1类中的所有方法</span></span><br><span class="line">        Method[] declaredMethods = aClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;方法名称为：&quot;</span> + declaredMethod.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;方法是否带有可变数量的参数：&quot;</span> + declaredMethod.isVarArgs());</span><br><span class="line">            System.out.println(<span class="string">&quot;方法的参数类型依次为：&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取所有参数类型</span></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = declaredMethod.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot; &quot;</span> + parameterType);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取返回值类型</span></span><br><span class="line">            System.out.println(<span class="string">&quot;方法的返回值类型为：&quot;</span> + declaredMethod.getReturnType());</span><br><span class="line">            System.out.println(<span class="string">&quot;方法可能抛出的异常类型有：&quot;</span>);</span><br><span class="line">            Class&lt;?&gt;[] exceptionTypes = declaredMethod.getExceptionTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; exceptionType : exceptionTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot; &quot;</span> + exceptionType);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isTurn</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (isTurn) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123; <span class="comment">// 如果该成员变量的访问权限为private，则抛出异常</span></span><br><span class="line">                    isTurn = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;staticMethod&quot;</span>.equals(declaredMethod.getName())) &#123;</span><br><span class="line">                        <span class="comment">// 调用没有参数的方法</span></span><br><span class="line">                        declaredMethod.invoke(book);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;publicMethod&quot;</span>.equals(declaredMethod.getName())) &#123;</span><br><span class="line">                        <span class="comment">// 调用一个参数的方法</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;publicMethod(10)的返回值为：&quot;</span> + declaredMethod.invoke(book, <span class="number">10</span>));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;protectedMethod&quot;</span>.equals(declaredMethod.getName())) &#123;</span><br><span class="line">                        <span class="comment">// 调用两个参数的方法</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;protectedMethod(10,15)的返回值为：&quot;</span> + declaredMethod.invoke(book, <span class="string">&quot;10&quot;</span>, <span class="number">15</span>));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;privateMethod&quot;</span>.equals(declaredMethod.getName())) &#123;</span><br><span class="line">                        <span class="comment">// 调用可变数量参数的方法</span></span><br><span class="line">                        Object[] parameters = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;J&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;A&quot;</span>&#125;&#125;;</span><br><span class="line">                        System.out.println(<span class="string">&quot;privateMethod()的返回值为：&quot;</span> + declaredMethod.invoke(book, parameters));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;在设置成员变量值时抛出异常，下面执行setAccessible()方法&quot;</span>);</span><br><span class="line">                    <span class="comment">// 设置为允许访问private方法</span></span><br><span class="line">                    declaredMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    isTurn = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============================\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">方法名称为：protectedMethod</span><br><span class="line">方法是否带有可变数量的参数：<span class="literal">false</span></span><br><span class="line">方法的参数类型依次为：</span><br><span class="line"> class java.lang.String</span><br><span class="line"> int</span><br><span class="line">方法的返回值类型为：int</span><br><span class="line">方法可能抛出的异常类型有：</span><br><span class="line"> class java.lang.NumberFormatException</span><br><span class="line">执行protectedMethod()方法</span><br><span class="line">protectedMethod(<span class="string">&quot;10&quot;</span>,15)的返回值为：25</span><br><span class="line">=============================</span><br><span class="line"></span><br><span class="line">方法名称为：publicMethod</span><br><span class="line">方法是否带有可变数量的参数：<span class="literal">false</span></span><br><span class="line">方法的参数类型依次为：</span><br><span class="line"> int</span><br><span class="line">方法的返回值类型为：int</span><br><span class="line">方法可能抛出的异常类型有：</span><br><span class="line">执行publicMethod()方法</span><br><span class="line">publicMethod(10)的返回值为：110</span><br><span class="line">=============================</span><br><span class="line"></span><br><span class="line">方法名称为：staticMethod</span><br><span class="line">方法是否带有可变数量的参数：<span class="literal">false</span></span><br><span class="line">方法的参数类型依次为：</span><br><span class="line">方法的返回值类型为：void</span><br><span class="line">方法可能抛出的异常类型有：</span><br><span class="line">执行staticMethod()方法</span><br><span class="line">=============================</span><br><span class="line"></span><br><span class="line">方法名称为：privateMethod</span><br><span class="line">方法是否带有可变数量的参数：<span class="literal">true</span></span><br><span class="line">方法的参数类型依次为：</span><br><span class="line"> class [Ljava.lang.String;</span><br><span class="line">方法的返回值类型为：class java.lang.String</span><br><span class="line">方法可能抛出的异常类型有：</span><br><span class="line">在设置成员变量值时抛出异常，下面执行setAccessible()方法</span><br><span class="line">执行privateMethod()方法</span><br><span class="line">privateMethod()的返回值为：</span><br><span class="line">=============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>06. 反射的具体使用场景</title>
    <url>/2023/07/15/04.Java/Java%E5%9F%BA%E7%A1%80/06.%20%E5%8F%8D%E5%B0%84%E7%9A%84%E5%85%B7%E4%BD%93%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="73751622194ed3fd11926673e8b42afff285584f59a80aac10f6860b3a073462"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>05. 动态代理</title>
    <url>/2023/07/14/04.Java/Java%E5%9F%BA%E7%A1%80/05.%20%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="05-动态代理"><a href="#05-动态代理" class="headerlink" title="05. 动态代理"></a>05. 动态代理</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307141524186.jpeg" alt="a view of a mountain range with a moon in the sky"></p>
<p>动态代理是一种方便运行时动态构建代理、动态处理代理方法调用的机制，很多场景都是利用类似机制做到的，比如用来包装 RPC 调用、面向切面的编程（AOP）。</p>
<p>实现动态代理的方式很多，比如 JDK 自身提供的动态代理，就是主要利用了反射机制。还有其他的实现方式，比如利用传说中更高性能的字节码操作机制，类似 ASM、cglib（基于 ASM）、Javassist 等。</p>
<p><img src="https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javacore/xmind/Java%E4%BB%A3%E7%90%86.svg" alt="img"></p>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>静态代理就是设计模式中的代理模式：主要为其他对象提供一种代理，并控制对这个对象的访问。</p>
<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p>定义Subject抽象类，包含RealSubject和Proxy的公共接口，这样就在任何使用RealSubject的地方都可以使用Proxy。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RealSubject定义Proxy，代理的真正实体：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealSubject</span> <span class="keyword">extends</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;真实的请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Proxy代理类保存了一个引用，使得代理可以访问真实的实体，并提供一个和Subjcet接口相同的接口，这样代理就可以用来代替实体：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">extends</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == realSubject)&#123;</span><br><span class="line">            realSubject = <span class="keyword">new</span> <span class="title class_">RealSubject</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        realSubject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>();</span><br><span class="line">        proxy.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">真实的请求</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h3 id="静态代理的问题"><a href="#静态代理的问题" class="headerlink" title="静态代理的问题"></a>静态代理的问题</h3><p>静态代理模式固然在访问无法访问的资源，能够增强现有的接口业务功能方面有很大有点，但是大量使用这种静态代理，会使我们的系统内的类规模增大，并且不易维护；</p>
<p>从本质上看，示例中Proxy和RealSubject功能一样，Proxy只是中介的作用，这种代理在系统中的存在，导致系统结构比较臃肿和松散。</p>
<h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>为了解决静态代理的问题，动态代理思想提了出来。</p>
<p>以示例为例子，动态代理在运行状态中，需要代理的地方，会根据 Subject 和 RealSubject，动态地创建一个 Proxy，用完之后，就会销毁，这样就可以避免了 Proxy 角色的 class 在系统中冗杂的问题了。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307141427188.png" alt="img"></p>
<p>动态代理属于经典的代理模式，需要引入一个InvocationHandler，它负责统一管理所有的方法调用。（其实就是一个接口，这个接口就一个invoke方法，参数固定的三个参数，下面会讲）。</p>
<h3 id="动态代理步骤"><a href="#动态代理步骤" class="headerlink" title="动态代理步骤"></a>动态代理步骤</h3><ol>
<li>获取RealSubject上的所有接口列表（执行invoke()方法的时候要用）；</li>
<li>确定要生成的代理类的类名，默认为：com.sum.proxy.$ProxyXXXX;</li>
<li>根据需要实现的接口信息，在代码中动态创建该Proxy类的字节码；</li>
<li>将对应的字节码转换成对应的class对象；</li>
<li>创建InvocationHandler实例handler，用来处理Proxy的所有方法调用</li>
<li>Proxy的class对象以创建handler对象为参数，实例化一个Proxy对象。</li>
</ol>
<p>从上面可以看出，JDK 动态代理的实现是基于实现接口的方式，使得 Proxy 和 RealSubject 具有相同的功能。</p>
<blockquote>
<p>但其实还有一种思路：通过继承。即：让 Proxy 继承 RealSubject，这样二者同样具有相同的功能，Proxy 还可以通过重写 RealSubject 中的方法，来实现多态。CGLIB 就是基于这种思路设计的。</p>
</blockquote>
<p>在上述步骤中，最重要的有两个类，一个是InvocationHandler接口，另外一个是Proxy类。</p>
<h3 id="InvocationHandler接口"><a href="#InvocationHandler接口" class="headerlink" title="InvocationHandler接口"></a>InvocationHandler接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只有这一个方法。每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个Handler，当我们通过代理对象调用一个方法的时候，这个方法调用会被转发有InvocationHandler这个接口的invoke方法来调用。</p>
<p><code>public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;</code></p>
<p>参数说明：</p>
<ul>
<li><strong>proxy</strong> - 代理的真实对象。</li>
<li><strong>method</strong> - 所要调用真实对象的某个方法的 <code>Method</code> 对象</li>
<li><strong>args</strong> - 所要调用真实对象某个方法时接受的参数</li>
</ul>
<h3 id="Proxy类"><a href="#Proxy类" class="headerlink" title="Proxy类"></a>Proxy类</h3><p><code>Proxy</code> 这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 <code>newProxyInstance</code> 这个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces,  InvocationHandler h)</span>  <span class="keyword">throws</span> IllegalArgumentException</span><br></pre></td></tr></table></figure>

<p>这个方法的作用就是得到一个动态的代理对象。</p>
<p>参数说明：</p>
<ul>
<li><strong>loader</strong> - 一个 <code>ClassLoader</code> 对象，定义了由哪个 <code>ClassLoader</code> 对象来对生成的代理对象进行加载。</li>
<li><strong>interfaces</strong> - 一个 <code>Class&lt;?&gt;</code> 对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了</li>
<li><strong>h</strong> - 一个 <code>InvocationHandler</code> 对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个 <code>InvocationHandler</code> 对象上</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>首先，定义Subject接口，声明两个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String str)</span>;</span><br><span class="line">    String <span class="title function_">bey</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义真实对象RealSubject类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello &quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">bey</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Goodbye!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Over&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义动态代理类，实现 InvocationHandler 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvocationHandlerDemo</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 这个就是我们要代理的真实对象</span></span><br><span class="line">    <span class="keyword">private</span> Object subject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法，给我们要代理的真实对象赋初值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InvocationHandlerDemo</span><span class="params">(Object subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 在代理真实对象前我们可以添加一些自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;call method &quot;</span> + method);</span><br><span class="line">        <span class="comment">// 当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> method.invoke(subject, args);</span><br><span class="line">        <span class="comment">// 在代理真实对象后我们也可以添加一些自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after method&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，实现Client类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 代理的真实对象</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">realSubject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RealSubject</span>();</span><br><span class="line">        <span class="comment">// 代理哪个真实对象，将该对象传进去，最后通过该真实对象调用方法</span></span><br><span class="line">        <span class="type">InvocationHandlerDemo</span> <span class="variable">invocationHandlerDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandlerDemo</span>(realSubject);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数</span></span><br><span class="line"><span class="comment">         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象</span></span><br><span class="line"><span class="comment">         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了</span></span><br><span class="line"><span class="comment">         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> (Subject) Proxy.newProxyInstance(invocationHandlerDemo.getClass().getClassLoader(), realSubject.getClass().getInterfaces(), invocationHandlerDemo);</span><br><span class="line">        System.out.println(subject.getClass().getName());</span><br><span class="line">        subject.hello(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">bey</span> <span class="operator">=</span> subject.bey();</span><br><span class="line">        System.out.println(<span class="string">&quot;result: &quot;</span> + bey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">com.sun.proxy.<span class="variable">$Proxy0</span> </span><br><span class="line">before method</span><br><span class="line">call method public abstract void com.example.basejava.testproxy.dynamicProxy.Subject.hello(java.lang.String)</span><br><span class="line">hello world</span><br><span class="line">after method</span><br><span class="line"></span><br><span class="line">before method</span><br><span class="line">call method public abstract java.lang.String com.example.basejava.testproxy.dynamicProxy.Subject.bey()</span><br><span class="line">Goodbye!</span><br><span class="line">after method</span><br><span class="line"></span><br><span class="line">result: Over</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>

<p>输出说明：</p>
<p>com.sun.proxy.$Proxy0?</p>
<p>为什么会返回代理对象的类名会是这样的？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject</span><br><span class="line">                .getClass().getInterfaces(), handler);</span><br></pre></td></tr></table></figure>

<p>可能我以为返回的这个代理对象会是 Subject 类型的对象，或者是 InvocationHandler 的对象，结果却不是，首先我们解释一下<strong>为什么我们这里可以将其转化为 Subject 类型的对象？</strong></p>
<p>原因就是：在 newProxyInstance 这个方法的第二个参数上，我们给这个代理对象提供了一组什么接口，那么我这个代理对象就会实现了这组接口，这个时候我们当然可以将这个代理对象强制类型转化为这组接口中的任意一个，因为这里的接口是 Subject 类型，所以就可以将其转化为 Subject 类型了。</p>
<p><strong>同时我们一定要记住，通过 <code>Proxy.newProxyInstance</code> 创建的代理对象是在 jvm 运行时动态生成的一个对象，它并不是我们的 InvocationHandler 类型，也不是我们定义的那组接口的类型，而是在运行是动态生成的一个对象，并且命名方式都是这样的形式，以$开头，proxy 为中，最后一个数字表示对象的标号</strong>。</p>
<p>接着我们来看看这两句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">subject.hello(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">bey</span> <span class="operator">=</span> subject.bey();</span><br></pre></td></tr></table></figure>

<p>这里是通过代理对象来调用实现的那种接口中的方法，这个时候程序就会跳转到由这个代理对象关联到的 handler 中的 invoke 方法去执行，而我们的这个 handler 对象又接受了一个 RealSubject 类型的参数，表示我要代理的就是这个真实对象，所以此时就会调用 handler 中的 invoke 方法去执行。</p>
<p>在真正通过代理对象来调用真实对象的方法的时候，我们可以在该方法前后添加自己的一些操作（<strong>与AOP切面的环绕通知类似</strong>），同时我们看到我们的这个 method 对象是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> io.github.dunwu.javacore.reflect.InvocationHandlerDemo$Subject.hello(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> java.lang.String io.github.dunwu.javacore.reflect.InvocationHandlerDemo$Subject.bye()</span><br></pre></td></tr></table></figure>

<p>正好就是我们的 Subject 接口中的两个方法，这也就证明了当我通过代理对象来调用方法的时候，起实际就是委托由其关联到的 handler 对象的 invoke 方法中来调用，并不是自己来真实调用，而是通过代理的方式来调用的。</p>
<h3 id="动态代理总结"><a href="#动态代理总结" class="headerlink" title="动态代理总结"></a>动态代理总结</h3><p>代理类与委托类实现同一接口，主要是通过代理类实现 <code>InvocationHandler</code> 并重写 <code>invoke</code> 方法来进行动态代理的，在 <code>invoke</code> 方法中将对方法进行处理。</p>
<p>JDK 动态代理特点：</p>
<ul>
<li>优点：相对于静态代理模式，不需要硬编码接口，代码复用率高。</li>
<li>缺点：强制要求代理类实现 <code>InvocationHandler</code> 接口。</li>
</ul>
<h2 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h2><blockquote>
<p>这里只是简单介绍CGlib的动态代理</p>
</blockquote>
<p>CGLIB 提供了与 JDK 动态代理不同的方案。很多框架，例如 Spring AOP 中，就使用了 CGLIB 动态代理。</p>
<p>CGLIB 底层，其实是借助了 ASM 这个强大的 Java 字节码框架去进行字节码增强操作。</p>
<p>CGLIB 动态代理的工作步骤：</p>
<ul>
<li>生成代理类的二进制字节码文件；</li>
<li>加载二进制字节码，生成 <code>Class</code> 对象( 例如使用 <code>Class.forName()</code> 方法 )；</li>
<li>通过反射机制获得实例构造，并创建代理类对象。</li>
</ul>
<p>CGLIB 动态代理特点：</p>
<p>优点：使用字节码增强，比 JDK 动态代理方式性能高。可以在运行时对类或者是接口进行增强操作，且委托类无需实现接口。</p>
<p>缺点：不能对 <code>final</code> 类以及 <code>final</code> 方法进行代理。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://dunwu.github.io/javacore/pages/0d066a/#constructor">动态代理</a></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>理论一：对于单一职责原则，如何判定某个类的职责是否够“单一”？</title>
    <url>/2023/07/15/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9115.%E7%90%86%E8%AE%BA%E4%B8%80%EF%BC%9A%E5%AF%B9%E4%BA%8E%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99%EF%BC%8C%E5%A6%82%E4%BD%95%E5%88%A4%E5%AE%9A%E6%9F%90%E4%B8%AA%E7%B1%BB%E7%9A%84%E8%81%8C%E8%B4%A3%E6%98%AF%E5%90%A6%E5%A4%9F%E2%80%9C%E5%8D%95%E4%B8%80%E2%80%9D%EF%BC%9F%20/</url>
    <content><![CDATA[<h1 id="理论一：对于单一职责原则，如何判定某个类的职责是否够“单一”？"><a href="#理论一：对于单一职责原则，如何判定某个类的职责是否够“单一”？" class="headerlink" title="理论一：对于单一职责原则，如何判定某个类的职责是否够“单一”？"></a>理论一：对于单一职责原则，如何判定某个类的职责是否够“单一”？</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307151448354.jpeg" alt="a black background with a pattern of curved lines"></p>
<p>经典的设计原则，其中包括，SOLID、KISS、YAGNI、DRY、LOD 等。</p>
<p>看懂”和“会用”是两回事，而“用好”更是难上加难。</p>
<h2 id="如何理解单一职责原则（SRP）？"><a href="#如何理解单一职责原则（SRP）？" class="headerlink" title="如何理解单一职责原则（SRP）？"></a>如何理解单一职责原则（SRP）？</h2><p>SOLID 原则由 5 个设计原则组成的，它们分别是：单一职责原则、开闭原则、里式替换原则、接口隔离原则和依赖反转原则，依次对应 SOLID 中的 S、O、L、I、D 这 5 个英文字母。</p>
<p>SOLID 原则中的第一个原则：单一职责原则。</p>
<p>单一职责原则的英文是 Single Responsibility Principle，缩写为 SRP。这个原则的英文描述是这样的：A class or module should have a single responsibility。如果我们把它翻译成中文，那就是：一个类或者模块只负责完成一个职责（或者功能）。</p>
<p>注意，这个原则描述的对象包含两个，一个是类（class），一个是模块（module）。关于这两个概念，在专栏中，有两种理解方式。一种理解是：把模块看作比类更加抽象的概念，类也可以看作模块。另一种理解是：把模块看作比类更加粗粒度的代码块，模块中包含多个类，多个类组成一个模块。</p>
<p>单一职责原则的定义描述非常简单，也不难理解。一个类只负责完成一个职责或者功能。也就是说，不要设计大而全的类，要设计粒度小、功能单一的类。换个角度来讲就是，一个类包含了两个或者两个以上业务不相干的功能，那我们就说它职责不够单一，应该将它拆分成多个功能更加单一、粒度更细的类。</p>
<p>举例：比如，一个类里既包含订单的一些操作，又包含用户的一些操作。而订单和用户是两个独立的业务领域模型，我们将两个不相干的功能放到同一个类中，那就违反了单一职责原则。为了满足单一职责原则，我们需要将这个类拆分成两个粒度更细、功能更加单一的两个类：订单类和用户类。</p>
<h2 id="如何判断类的职责是否足够单一？"><a href="#如何判断类的职责是否足够单一？" class="headerlink" title="如何判断类的职责是否足够单一？"></a>如何判断类的职责是否足够单一？</h2><p>从刚刚这个例子来看，单一职责原则看似不难应用。那是因为我举的这个例子比较极端，一眼就能看出订单和用户毫不相干。但大部分情况下，类里的方法是归为同一类功能，还是归为不相关的两类功能，并不是那么容易判定的。在真实的软件开发中，对于一个类是否职责单一的判定，是很难拿捏的。我举一个更加贴近实际的例子来给你解释一下。</p>
<p>在一个社交产品中，我们用下面的 UserInfo 类来记录用户的信息。你觉得，UserInfo 类的设计是否满足单一职责原则呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> userId;</span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  <span class="keyword">private</span> String telephone;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> createTime;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> lastLoginTime;</span><br><span class="line">  <span class="keyword">private</span> String avatarUrl;</span><br><span class="line">  <span class="keyword">private</span> String provinceOfAddress; <span class="comment">// 省</span></span><br><span class="line">  <span class="keyword">private</span> String cityOfAddress; <span class="comment">// 市</span></span><br><span class="line">  <span class="keyword">private</span> String regionOfAddress; <span class="comment">// 区 </span></span><br><span class="line">  <span class="keyword">private</span> String detailedAddress; <span class="comment">// 详细地址</span></span><br><span class="line">  <span class="comment">// ...省略其他属性和方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于这个问题，有两种不同的观点。一种观点是，UserInfo 类包含的都是跟用户相关的信息，所有的属性和方法都隶属于用户这样一个业务模型，满足单一职责原则；另一种观点是，地址信息在 UserInfo 类中，所占的比重比较高，可以继续拆分成独立的 UserAddress 类，UserInfo 只保留除 Address 之外的其他信息，拆分之后的两个类的职责更加单一。</p>
<p>哪种观点更对呢？实际上，要从中做出选择，我们不能脱离具体的应用场景。如果在这个社交产品中，用户的地址信息跟其他信息一样，只是单纯地用来展示，那 UserInfo 现在的设计就是合理的。但是，如果这个社交产品发展得比较好，之后又在产品中添加了电商的模块，用户的地址信息还会用在电商物流中，那我们最好将地址信息从 UserInfo 中拆分出来，独立成用户物流信息（或者叫地址信息、收货信息等）。</p>
<p>再进一步延伸一下。如果做这个社交产品的公司发展得越来越好，公司内部又开发出了很多其他产品（可以理解为其他 App）。公司希望支持统一账号系统，也就是用户一个账号可以在公司内部的所有产品中登录。这个时候，我们就需要继续对 UserInfo 进行拆分，将跟身份认证相关的信息（比如，email、telephone 等）抽取成独立的类。</p>
<p>从刚刚这个例子，我们可以总结出，不同的应用场景、不同阶段的需求背景下，对同一个类的职责是否单一的判定，可能都是不一样的。在某种应用场景或者当下的需求背景下，一个类的设计可能已经满足单一职责原则了，但如果换个应用场景或着在未来的某个需求背景下，可能就不满足了，需要继续拆分成粒度更细的类。</p>
<p>除此之外，从不同的业务层面去看待同一个类的设计，对类是否职责单一，也会有不同的认识。比如，例子中的 UserInfo 类。如果我们从“用户”这个业务层面来看，UserInfo 包含的信息都属于用户，满足职责单一原则。如果我们从更加细分的“用户展示信息”“地址信息”“登录认证信息”等等这些更细粒度的业务层面来看，那 UserInfo 就应该继续拆分。</p>
<p>综上所述，评价一个类的职责是否足够单一，我们并没有一个非常明确的、可以量化的标准，可以说，这是件非常主观、仁者见仁智者见智的事情。实际上，在真正的软件开发中，我们也没必要过于未雨绸缪，过度设计。所以，我们可以先写一个粗粒度的类，满足业务需求。随着业务的发展，如果粗粒度的类越来越庞大，代码越来越多，这个时候，我们就可以将这个粗粒度的类，拆分成几个更细粒度的类。这就是所谓的持续重构（后面的章节中我们会讲到）。</p>
<p>下面这几条判断原则，比起很主观地去思考类是否职责单一，要更有指导意义、更具有可执行性：</p>
<ul>
<li>类中的代码行数、函数或属性过多，会影响代码的可读性和可维护性，我们就需要考虑对类进行拆分；</li>
<li>类依赖的其他类过多，或者依赖类的其他类过多，不符合高内聚、低耦合的设计思想，我们就需要考虑对类进行拆分；</li>
<li>私有方法过多，我们就要考虑能否将私有方法独立到新的类中，设置为 public 方法，供更多的类使用，从而提高代码的复用性；</li>
<li>比较难给类起一个合适名字，很难用一个业务名词概括，或者只能用一些笼统的 Manager、Context 之类的词语来命名，这就说明类的职责定义得可能不够清晰；</li>
<li>类中大量的方法都是集中操作类中的某几个属性，比如，在 UserInfo 例子中，如果一半的方法都是在操作 address 信息，那就可以考虑将这几个属性和对应的方法拆分出来。</li>
</ul>
<p>类中的代码行数、函数或者属性过多，就有可能不满足单一职责原则。那多少行代码才算是行数过多呢？多少个函数、属性才称得上过多呢？</p>
<p>实际上，我也可以给你一个凑活能用、比较宽泛的、可量化的标准，那就是一个类的代码行数最好不能超过 200 行，函数个数及属性个数都最好不要超过 10 个。</p>
<h2 id="类的职责是否设计得越单一越好？"><a href="#类的职责是否设计得越单一越好？" class="headerlink" title="类的职责是否设计得越单一越好？"></a>类的职责是否设计得越单一越好？</h2><p>为了满足单一职责原则，是不是把类拆得越细就越好呢？答案是否定的。我们还是通过一个例子来解释一下。Serialization 类实现了一个简单协议的序列化和反序列功能，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Protocol format: identifier-string;&#123;gson string&#125;</span></span><br><span class="line"><span class="comment"> * For example: UEUEUE;&#123;&quot;a&quot;:&quot;A&quot;,&quot;b&quot;:&quot;B&quot;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Serialization</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IDENTIFIER_STRING</span> <span class="operator">=</span> <span class="string">&quot;UEUEUE;&quot;</span>;</span><br><span class="line">  <span class="keyword">private</span> Gson gson;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Serialization</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.gson = <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">serialize</span><span class="params">(Map&lt;String, String&gt; object)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">textBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    textBuilder.append(IDENTIFIER_STRING);</span><br><span class="line">    textBuilder.append(gson.toJson(object));</span><br><span class="line">    <span class="keyword">return</span> textBuilder.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">deserialize</span><span class="params">(String text)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!text.startsWith(IDENTIFIER_STRING)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">gsonStr</span> <span class="operator">=</span> text.substring(IDENTIFIER_STRING.length());</span><br><span class="line">    <span class="keyword">return</span> gson.fromJson(gsonStr, Map.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们想让类的职责更加单一，我们对 Serialization 类进一步拆分，拆分成一个只负责序列化工作的 Serializer 类和另一个只负责反序列化工作的 Deserializer 类。拆分后的具体代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Serializer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IDENTIFIER_STRING</span> <span class="operator">=</span> <span class="string">&quot;UEUEUE;&quot;</span>;</span><br><span class="line">  <span class="keyword">private</span> Gson gson;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Serializer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.gson = <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">serialize</span><span class="params">(Map&lt;String, String&gt; object)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">textBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    textBuilder.append(IDENTIFIER_STRING);</span><br><span class="line">    textBuilder.append(gson.toJson(object));</span><br><span class="line">    <span class="keyword">return</span> textBuilder.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Deserializer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IDENTIFIER_STRING</span> <span class="operator">=</span> <span class="string">&quot;UEUEUE;&quot;</span>;</span><br><span class="line">  <span class="keyword">private</span> Gson gson;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Deserializer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.gson = <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">deserialize</span><span class="params">(String text)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!text.startsWith(IDENTIFIER_STRING)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">gsonStr</span> <span class="operator">=</span> text.substring(IDENTIFIER_STRING.length());</span><br><span class="line">    <span class="keyword">return</span> gson.fromJson(gsonStr, Map.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然经过拆分之后，Serializer 类和 Deserializer 类的职责更加单一了，但也随之带来了新的问题。如果我们修改了协议的格式，数据标识从“UEUEUE”改为“DFDFDF”，或者序列化方式从 JSON 改为了 XML，那 Serializer 类和 Deserializer 类都需要做相应的修改，代码的内聚性显然没有原来 Serialization 高了。而且，如果我们仅仅对 Serializer 类做了协议修改，而忘记了修改 Deserializer 类的代码，那就会导致序列化、反序列化不匹配，程序运行出错，也就是说，拆分之后，代码的可维护性变差了。</p>
<p>实际上，不管是应用设计原则还是设计模式，最终的目的还是提高代码的可读性、可扩展性、复用性、可维护性等。我们在考虑应用某一个设计原则是否合理的时候，也可以以此作为最终的考量标准。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>面向对象</tag>
        <tag>单一职责</tag>
      </tags>
  </entry>
  <entry>
    <title>理论二：如何做到“对扩展开放、修改关闭”？扩展和修改各指什么？</title>
    <url>/2023/08/03/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9116.%20%E7%90%86%E8%AE%BA%E4%BA%8C%EF%BC%9A%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E2%80%9C%E5%AF%B9%E6%89%A9%E5%B1%95%E5%BC%80%E6%94%BE%E3%80%81%E4%BF%AE%E6%94%B9%E5%85%B3%E9%97%AD%E2%80%9D%EF%BC%9F%E6%89%A9%E5%B1%95%E5%92%8C%E4%BF%AE%E6%94%B9%E5%90%84%E6%8C%87%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ae70dfd5ffc36d8d180db08f15fbe4977335fa3a05ce1c1bd91f5b833b9e2096"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>理论三：里式替换（LSP）跟多态有何区别？哪些代码违背了LSP？</title>
    <url>/2023/08/03/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9117.%E7%90%86%E8%AE%BA%E4%B8%89%EF%BC%9A%E9%87%8C%E5%BC%8F%E6%9B%BF%E6%8D%A2%EF%BC%88LSP%EF%BC%89%E8%B7%9F%E5%A4%9A%E6%80%81%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB%EF%BC%9F%E5%93%AA%E4%BA%9B%E4%BB%A3%E7%A0%81%E8%BF%9D%E8%83%8C%E4%BA%86LSP%EF%BC%9F%20/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b9d6262de08dc3747c92a0626ccfe14b76cbfe02f76008fc3a32ac078b818f0c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>理论六：我为何说KISS、YAGNI原则看似简单，却经常被用错？</title>
    <url>/2023/08/03/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9120.%E7%90%86%E8%AE%BA%E5%85%AD%EF%BC%9A%E6%88%91%E4%B8%BA%E4%BD%95%E8%AF%B4KISS%E3%80%81YAGNI%E5%8E%9F%E5%88%99%E7%9C%8B%E4%BC%BC%E7%AE%80%E5%8D%95%EF%BC%8C%E5%8D%B4%E7%BB%8F%E5%B8%B8%E8%A2%AB%E7%94%A8%E9%94%99%EF%BC%9F%20/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e07660fd0cf3cfa98b31bc76cfdb2ef662e82440157aed4352bd4f17eaa6ba97"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>理论七：重复的代码就一定违背DRY吗？如何提高代码的复用性？</title>
    <url>/2023/08/03/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9121.%20%E7%90%86%E8%AE%BA%E4%B8%83%EF%BC%9A%E9%87%8D%E5%A4%8D%E7%9A%84%E4%BB%A3%E7%A0%81%E5%B0%B1%E4%B8%80%E5%AE%9A%E8%BF%9D%E8%83%8CDRY%E5%90%97%EF%BC%9F%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E7%9A%84%E5%A4%8D%E7%94%A8%E6%80%A7%EF%BC%9F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4f00acdcf9922f76ed4243118a2d81539c1c84e07cabadc17c0c6339ac17ca24"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>理论五：控制反转、依赖反转、依赖注入，这三者有何区别和联系？</title>
    <url>/2023/08/03/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9119.%20%E7%90%86%E8%AE%BA%E4%BA%94%EF%BC%9A%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E3%80%81%E4%BE%9D%E8%B5%96%E5%8F%8D%E8%BD%AC%E3%80%81%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%8C%E8%BF%99%E4%B8%89%E8%80%85%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB%EF%BC%9F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e2744e5a4342dfe694eadef75cf40ddf4dad1d717ebabd59cc4de943ccc2e6c5">3881b6518ad03aa0821a5135712d4eb09f1ebf8b0f0acfdf2fc2f3a4c530ddbc11ddb4d3141d41b3aa14f23ac32e9fd447c75c01c2e2315345acde29f2e3ac6b09937e2c6629fdfc8b3f7a8534ee2dae74bed69bba096bb91715be80af5a197d416896a1aa1b1c2e0e8818db9788fc97f08bab0be5e532528da146906a10e242a0906f95f50d4a0e70e0685c3fd0049522870be572cf54dad081e01c7f4103c9e2cfd3835cdf85428f1ae19d133a22baa820a0595af97d96744d7714509d92685ee4ce7b27461bbb58dd42c304523a47f1fe9587b3755507cbfca1ba47f744ab3b2098f58fa97e2837930860e7350319a9907e5351c88092ecdcf15a39e11c817d2c7ac5201d024b756db0b4e04080a921e4f639534a1aeb163de32b81d1bfd685eb1970b66e9bf1011e671e5fd47f739602c6dc38d8c458bc906ba4a09d859c6bf0de1daad5a3f51ba6bd60b8eb45ce57e4822d6e04f62f7aa9ba7e835fa3b28de52c4508e6bd6abe0c412acb06f765d8da9ac3b116cb8800821c59909c7f2676203f8a1b316358c69ea6db491e8d86c5e39c77699878b232367e8cd8ce80a41f7f87ff4aeeacd9315072bb824e8c7295f05b5e9f4a7447b8d70fe1a8eeafa5afbe9adbe1dacb015e2e86ff9e4d6297fc8b8f627540aef0c1a9887ec822629647bdd3e8734955c44f63f54f1be342e82adcccfa9ccee98f8b1489d0c797b41fa5874fac35bbfe6d0da18257d64853718827fb349a0301c40c2e3dd322751599526e79acb41a12e7fe9cecb3795ffcb3da44aba83b4ec602dc13bb1e8a42cb666dd9ed7122bda5d6d819f649e85553534d5f6bf773e7f5958c72bbeba89f644c40cfa7963b11aaf3d499f1b00c3820056492137bc227ad0387b4edd7247894c029a4d23cc1022377f2a48a0abcf10e3bfeea499916b8343db5d05a4a01d80b6b4c8e1f4016871b97980f2244ac6203d15095707d0397ed10dde00daa3303b2ead14f38670ecacf2889a45f7d0a3fed6889c16f01b235c7c5e5196808f076bfdab76695686e63440b6b68367a2df7831a5efbdaf663982d8c197f21f91334ba0f3751a6261cac9020fbac5db0aa34c1c37300032e049e62469ba1c0724a0b98402545313eab4c8c9bb47666ffdbff3f1eec2c3c5e96f1f674f30f4345ec72d12bdc1feef93eab9df52d4c4f9d7d6305bcdcb3654bec91a38fc278105a9e6c226f6f7f8b6a036db943fa6119802be2a8be4e762390c35ca69a0e8f96f4d259cb61d99c0d189ab277bc740f5042c489729bb9d4124cb3f952e22ac7a0b258490c229028b28f598ee8fd8e4b0ad9f0c7a20e247c02ad4ad13a11342cee3bf5191c4decb0e6a4d1cfa2d3a14a1a6b7f6fa59bf38724e2ac25c8d5dd68121edc1a8f596264eff90d45386b8b107e0fab9aee5c05a1cdb1ffd6f87eaf21da9983bb61269b2366a8fd3bad0f3d3d88bd5148693b48cf4328337d27cefef09f55752fba34d5b9294448377e55ab0e311e253d674aa0abb825161c1dc541508f2611895aa74fd66639b75ccd581acfb6b511d58c43c3b30b95a79e34aebf6a1a28b898e8faa2e1e762b4458c2147b883501ee1d97c0aa40f7f18b72820cf0c3043db55ee13a961bf71d6a7b80b078ce87fc338b9b569f0f539af1e45b5ed249977b880bbb4f28256c9bbff3a2106689ec016ed3a2cae9dc0140ea206caa5101c41144b89b4a94f3743f2950c1114dd9d8081648e56785d1464403b97866381570a2fdec97b411c3bcf88ce15b4cdec341ee58270394c3a3fa1002379ec6a431d8779a2da4d3c43cd9161a799c9799c1657671b967cb43f6dfaf1e6e211c03548e88a8c67f6f17df55bf5fc156d09d27637db0bf94781881112a519d70a8021e5fa7633ec6b81bc4758d2d13de07668988b4b18a33ed8403bb0c8f494827c1d552fbd88e008f41ad8b93f140e052c9e21bf4ba091f8477493e2afcca2b1ba72df731e33eeb28f5334305d32b6251b8fc5d3aecb88a775091fff1fc70deac00c518cf094d0d2954cfa8dba4fffe56d15f6fe3eafe8171d6ae26b5bcf5a88162a9e25ed8bf6fe8491d97fb3ffb2d7ad2c2f2e42a9c92365e612126fcf4db739f0e09bf06fe0fa95cbaf18652706e7fff004c7ea1c0fd7b8acd319de9491b283c5d718962f7d141b5e2fa6b5c0d9ea5b4fa85cf2255e2d2b9a827398b33c726de6ac527b6766f4a8876072552352abeb6658e52e2c2b161b66ae481ae96d9d3d2d18e5947e92e8eef8628b2ca1636514949f43b1c4663bad3e517de84dc3e33f9ca196b62dec28a6e2c8e8dda7b039a05e00095846a7002e1c42dfce95d7af877eded443dd3c3f9d896f4990aa8efdc7eac389dd54fdbdebc809d6645f8989a6059b2c3ac80bdf819188ac68511f45d9ccb75ccc3ec66a86793d4e4f42992e93d5e745848757d889402a4a5eadf424b12f2838586446f2f0534d30a7fdbbf27488d37f9fbdf5090a38653647dc5956b845c08e63923391dce1586f227d0d7462d9e47db2a6b117489cf8831fbd886078c773a85dc5cc4b084338a0e24c66fc0ac9ee452fe1fad773f55f72f09ef3d957bf3d8fd9023e92184dbbfecfa128495ecda9e03acfc5aaecbdf1957bdb9fff5fedb46172ce4e8eeede6d5cf2bee379475d2a1bdeee738fcbe998a6a05c7780f2e3f9ba0ce0b489464f35651c1779b362cb38ed7f3677d9663c1dcecd1d0bf4efbacf134c26eefc76504334ee41fc8b8dcfecd0529c828eb60cfd881dcda45d72b8089d7b8aa24efaf4e37664b156db8690513894210e76adf02dc194b392886693b1597f9b2e52f24c37f5094e9b2ba5354ea390b33e0c89629811d10501239cb934bdb001dde368ff94afaabe62d355d1c182da286807e1345007a5849392ce34e53ca0596caba2e4d11c86fb716ad7ab46727e2d2e31d6cf0d25c638fef768a9ea61f899df7b65096f12cbdb58f6e1174f4413c3bc6cfb652784cf818cf58e0a77888dd9ca743ab810f929731f9e22993284a07b6cca1e36ed7c1ef07ecca8b3169add959703c3d9ae6e6013e97927298c8392d74e53332a89ed124ca59bb8ded69e338df401139e7ffc3246e37dc6b5255d9eaa25625747d70dddb113df703d6609e141c5b1f64a05bfb003c208c719dfab80e5bcef9f88478595fc3e116ce2b41cce0c16779fb764dfe9731de022ef6288494930828ef3af5077a2eafb6f89d0a75ed74d8f0208ff53e4b9d0caa154024b04c7ddb595c7082be038c7a7c890e51847b14ebf25728d063ee66e9a8c9f8ab7b2ffbeea1d6dde6ad07c44ee16b181c0a1f13a4190a03854710c2c9a2507612b35773f97c6faeafe123ec14ca986122cf04d26b8f5ff05f382b0f138bf6793c2ee575911034d83bae02c0bc405578991cc67456057779c4c5d6dbad603ff5a0b45b83de82fc7c3e9ac73f5f102dd655f35141f801499e551e4d4354f6c352bc4456d505d499ed00b6b93fcb53c7bdd165034b22376a0d1aa5a8b147ae125e88999031f1604e0172c1a85f8f2c06b14ac207d670b2b75b91d84148ca35454deaca99e81552bd22152cc0e914ba197ec83b384cdcbb5f958da6305ccd8022b86fb225a4e592916d8802bfdd303c658ee7f4c080affc1fff4a4d9aa0ad7a9254e01af83b694c897ceeea31ef4e19f7ac396413d90e75c1806f924541064f52dbfb780648939288706c3788274362369199b3d3d2c1fac0686058c8d31a550ae5b7f12d25dedb569af415200d30067e8bb8bc59bbe703fcad8374da9731c05a842fa827a16e4dbd47d6037da13af784bf1d9879f96be7f0ad6eb605c773e5201316f5c3b3b2a3a3e5b0da4db1e73e7569063673b7dba5f12e7f7469a471ca3a5ab334151aafe525aa5922947192d455c059a5f64c21b8c2e955c81995b820a115d1d3d0fd5e854c275f27fbc5a15f799d3270d081af229a8a85a8009d265693a5b992d7d6ecfb5fe3992a960deb78f4a89acb5f94a5c33db5de27d0206a01dd4dfb26023c3ab9d61c8cbbfdd74a62e45fc29a2a0611b7577683472a79da05b68efbcab7f4441a4aee15b6056d25fb34153419f637170061df151d41ebebee55b0804658658495203ab3c9e43b325ed8b80cee0f83ba4f655447d95754251b5d4a6ea13156d75fbb454765676880099cf2a0849292a20de3dbb43a02e29042468c014e106419c97df280ea6efa3a1e89abb091d71db57cea6f9715fa7a5ed7376724e913d7a61bb7f4f1df0f35582a62ecb19c6fdd57239ad9417a3cd23460b737785eef571ed67f4bc9bcad80967e411e78c543d9eee9fbb4f5a8731aa4443554046ac3c633bfa5650d11bf102f3fa785ba108c432db410d02240fa5c89d2d01bbbdbae97b086d849fd601d5d8b2ca05b4fae8f5f9d165d07c0f3d80325de507695189710ba08adf87b3c57d6600f778c7435b189986767ec35bc8e87dd741db1238ebc93dafbad410717e4aa3f9b82e604456c86d707ce020bb361ae5ef09ca5a5baec7d9cd972acf7696fc6f1fe40f3c2ee63ba9cbbf929828f3083b8e8d9e2bcdccd59627e80f1b110b71371c431def51d3552e43499b7da10697ec9074cf6e0453cd5236ef35ff39a2b4f88175456422444427c7c50af6e0081d2cf571aebf463b1abaf67a6e5554d3d922943f909a6804c9d0f086c6d6a14727e867d7fa337c5df45f53670c0b4458c6e91c73a42091ffff78047ba17300919bf1c97d6f9720af4ec3bbf078012fdca760b30586d19af054f80b8bd0a9b058d5ea1d9f76f1829a01258296f6e65cb50cd4cd15c35d685550d52283a5d57353b3057b6b37d8bdc843a9748a58489078454a4d4211049e407ec88b4a11dcfd28d56b84f951c8b588978abd0c4c0f84ebda80486a7b79aa27b5243bc8714770af46c760296471b9565fc6e7dbfe44714b6ba01db4dd7b6c186d5adab7be9cdc3951d481d816fed5e0fb5bba246b3be4149f95e94d6962bed4c2d75cee10960a6c885a1cca6b9e73e62e0ef66318826f5a8c7f12e458a5ba00343ff2d370bd863ab96b7d51007525441099117df0758b2dc9ae42915473f98cfe93f02fdf01d613bca7d8853a0fe892c0198a78ca055a5f815fd758dc89dcc1ee0252f12e62c93b891f0de5d6d633c9d1bc094ff82edaa6a8e6fb3901a3fb8d05d3fee6993ddded6525e0ea74b194ba45a53ac158b5011d5e2fe76316d094fcc2a0ec5154a8a83d9ae9a43ed3d3d7ecc43ae3f9238430b313a4ad556f9ca666406f803222af5bfd36339fa4dc13802a6b97d9e3b925507cbba3a6116ce13280489dadede1e3c5e6074153b00d4ef5907346694c9f96820d257d43f03d83a633201a9e6d8d7df33dc81494b303f25384eed5e78117af42a1d949c0477dfffa1a44d450ee179ebb2c70ef5186bdf765097c94489eb6fab7231a63829d956b7f173641ac30645a24ca26392d080a6b24f104f88674acebf79aa03616933d1c881e324cb4848a09eb454c658d15af4e19317df1802be836ef1eea82f01ab098c7696b773d0659c5210a720b5a5128c8788f9e6e0c3e1db093536e08c22814d14e5dc079e8c97f1d1c806b55814b38ddc2cc5e250f145159a67e35a4f62cd811ac164ac20a15032d80f068aa60be45258c20dd02af0e4f523e4ebdbfa44b22e8900638082b845710c5440c565967b4b062107b1dfe7395c12e90b5b1090fbc05c20e247bd740fbe4f4e12c0285cde428405a3ecc809601a8f1d11f97739c8d06eab6a7042e55e7f378cbef0143f8ec242a9971bc9c69491234789281888f568782e1b914bf08ebb0ad2035eeccab56712341c86ca5f2ab1f35a1567161290310d27434c9e909a2f9bbbf4f9373d73f31cf4dc7c53e27eb8e540615beda74c1cbc36ace2ad45c38b2af618bef1db95bc31b00e49d2a5715dc997d10d76c5ac928447742eab013d351b82530a82be6f6761bbc02e1784dc8d1b4552ad929025d080fd825429a9313422dfe95c8bf57bdb62124a483c3c03d8c3c01916c30711e02b2693085326ef975c95a57ee6e8f67f21c465c94b75a376b44751ce687fbb5052017cbb3e224fea206936c7867283dd227997944a0965b699229db52f87e9ac9cc0be9d3b87d736764464383cd08ee0e826af7ad7483cdd6c6ce8303427ce0470d0c469035cb82f23ccfa193a463d630fc5890f1ce50761a2b47a8cea7bfa7153e4ede857125f517c53b60c9f6f18c140a0e905b449ebafececef7c990d88bde280cbe765cf19f7f7ee2d642e60533ba564616920ee0f634f41979437a597476f34cfaae886ab15d09874ba40472d60a6d1e3673acd7200c6efc1710c68c4b4f8f97bc0cd765d58434956487007b3e4baee9ffadda90cffb13a0c14da32f12e56cb82926d1cc2546f742be85251569de4330e4f6671b16cbf9c63c0367d7be99ff68e3a923aae26080586a2c570dc6da2e56b8a23342e0cf5d2f0d125e79cdd0fda1b03560ac4bb89cbbe5abc6e68a310ecc27b305a0b858ad2ecdd6e0a200fc53fd9c10615d3c3240e0dca640d8415790318a9b1451e897bd761dbf28edc4577d78726ad7b814bde858907cbf8a7b2de7c9a217d4d5d9f3477749d2da95f16dec6711b0e98c1f4a6993461ae082cfb49066b1fc0fe66948241bd8e3d580ce1e20096b8edb48ca2074637fa7bc2ff355e5e6e206943b46d38adba16b7147d49de2500672f85f5f7964c46d558af6f55d74205b141d10fbfbad94d92c4f1001a847e17af3d026c4754f8c7548387513276f0857ffdd3b71104f32eff4fd544d9d22f49018aebad6a49a2a3fff2c981379e09afdf60e12f619515d0baf2f5013eb57a5bc15bb0aa5aa49880c172c95c5280accf124afdfb5186e2e3bff107c6169589322af1a082fad00bbd0347d9bb1d9f1051a34f5c6bb9826d61b08824655dfc8067d37f273f0d89808ff4bd71dce3472e61e28d3511cd30aecf20987c40a1060c578b7dc61b79061bc33b890b40db8c132e06bdb5cd1af6cb640a39eb3244ca5732554e8cd4a30d60703cf786ebaaf1c25d043ac80b12bc1478280bd5d79709fef6b0d43ca390ad04a0e73e24caa7482341dfb116ceef00c96935b3b91a511d426c51a8cacab63087235ca5c92d04717ef420a8e16ce04c3aec0824d36173f2102cd3d5471667c86ef44050934fb0d833819490243272977a8a1269c5dfd88920764d1ec38f5f2f5a0e67883dae59901233219381f7f6486f8a640fc7b96a067bb8846e0c031a83993f09703220a4b06860ae2df31304af473fce23affb8f8b9251a51f787f3d81b92c44fb8fa3227bb42af16ed063bb33eedc615a3f147c8d902d2c9ab8782a031691c8bd114ecfad8626dc21e7e363607c478cf19d0f21200d4e56d1d1a3313b38d0e0671e80113701d47c851ffcbbdf4535da53f160779bfb1bdd178ee91758d20b8c2623b5b3d42b04e5e82365c6add328635a0e0cbf855f39c6885244a449db3f871ec92ef61561083f71675b76ef6e4e23768a177c8f625c59ae405a561768771e57b7065c14b8ac95cb70d93af6686d361d996e751c74e7da3ca933fbef378f21980fec5d477b6a4ad2afaad4cbaf74ce414bf97e728d7f6587891966abec0becf0b15316686f09687b3873da49c50cd44a6b95c009f0e1d396113ca257a5c9d2806e8b9908316329c4c224fa8c84b55c0f17ffe4fb326d1b6ae0f91d00f1bf9ac689c8e0084fcf1b4f369c5883f7d78a6b2f09a2600cb85bd051ced330ea6025b2ad6765498906aeb0aeaa7f2cbec78c87d83cd6ab31af72609d3c477fc87feb560b28f29d9a35b1a4f19e7449167f45bf338acf88a973c8b7468e35c369cd4bd4fe171303d52ba41ed7ae7362e38fc030870a4efc1ce8bb74207f94f6afe89ee395156805a7b1023c88ca34b854e62e0e93eb947860d6739a0bfda30813b9a4871f70b1b60b3d364dd2d26fd282840c59b7b2aea80c68fc01f626efa44a8023e5bf2c959db06d9531a4293e7331c904822cd153b422f14d92ebde1e1ef68445d63a388524265550f9772f647877f74ffb7b5d9b6694006bba0aab7c4398040ca1ad422ad00f19c82a9922d786fdc9a5b1bfeee36a0303377f2118921502d67001999533ec97880b49ad74c36e841c3e0904ab747d2948e1f88b3d33ed46f1428c6be7d7219aa4785e4321d79bb0125da9cb77155fd39ac14a1e2b3d99c6bb30896ca3bb9b5a072dfe5b5f94f9b69c296bb141c10bb4b3455ff3ae40b23876587cfed00660fa3c63b88b40ef2c9b372aa0daaa8615483206edca87e55f6811ff41b6462700014e35a257aa2430ad52e77650945308a3f28cdf4fabeee92340814571494414bd0386ec2f4e0afb9d7814c76460ee0f462292c790aabfba3840807a573ca52e04feaed96425eb7913816c853c00804fd5a26e690b813aab5a59ee7757545a30dfe9862f755017792508884c2a4f7c30ac16bc55ad050d1e70249c1daf53e1be90b30ae5de1cf56a150eef28c2c3791801bf26dc7f304fc5865e9b172a9542e4a85d0eb8339df8105539092383e4e3bef8040813f2ad36bd10a2c6e8b0a714cb3eac27ff5b3162c1c83de56f14f7e40d1b3fa9fa21bc4ba87fa1b62805f58d7431250c26e3ee77776aacf34ef04e9e3b4672586a957cfb864788c4f260e4be306df44a39d420fc55fd4ebd47829f336fb3146cb3b5e245c1a7e786101b8ad41e84925846658d923c908af0d1d9c1abd7fbeac54c4312447494c59078f835aadacab9df1f85d83c6709ea6ccb473c15c55219cf88dcaa1a28e6677cd0f6e348f9a0b984a50164716c5b3aff2348e8e348c7740bda388a77f5443bd37467114c746904fba7ad9883181e706f97d8e3837c26509df1981fc03949a87f995c89539d85ce14df4e89f174e5644e0a388eb02bf8ad7cc90f66e6924e7e799f55d2fda5f91883d7d9cd817fcb0521768bf2e010243187aee522562b0a7ba361f50ee9c31d880e227118df8a4fe3bcdd5064a50764efd70952a90a3d35e8e82de8867d47b757efc2bc8fb42094e5681d8a042a50100465f1b4c6914bc3e643d1da92b25c91580a40b55f3a6923c28ffb4a817ce9fd8572f6f839f7b2356cc40f93e16563b91150362a195c7b7fdddff2234d9fe00fe86c9021b1331f2fe277d83cf22e402179901300b732992d918e59091c05302cbece5b96e69360570995d59e2d3cceb3a3f8b2ae8d76e0cd12acff3f69827e1432b2ccc54fb9310fd666c0fbb0e888af858207e91f7faecd34a5026dc0315f375ce1f131ff3243939f5acdbd83c6c5a5eef0d1031a2057cab39924fb2a3f9c6e9d11976c813643734138a6601cd66dfa7aab546043752db871eb8f85f73757a448488d4284d471ea0d1dcef9782c51ca0a17f24082acf95fe59dc2bae1f4c6dd952a8f43e3c33b9c01451252f10fbaff9bb62e032043342da13ab504047c9056f2f3f00a26bf410f85c6c3f2a4ee92a4cf6961b3d6fbcf3efb1cc2df40acdb41f65bf0e22463fec031e61148b8c41682c8a03428476d2a5152448f696e78f55ea69430d1ce9693c4b201a354d85982c6d9f8601ebe0dc78c55191b5d582cda332137fe87d313d7b9568827ed32f037ffc0e0f5c8d522697eeec52fc866191b745d6f8cf4e31f17970aad85814b0ad8e35c93b0bcd10cb96a55ed4e495562f0aee7b5b68110ad0cb390ed69e82417ce23cf675ab7ec2ee4def66988b93e3ffce974e32ce1a2dc7ac21fb1979bf522e0413b4c629e7346c81b00d22ad60071f9a22f25e38715c0cec90a396c7879f1125114e7cbde4e482b884007f52d91da2ebcdba48c90666819ce7310ca1c041d55f9a8a0c7b613fd1ee95977a02eff7a78aab1fcd681a933f934074327b61e0831a2756f2d984f02ef2684d14a66af7cdc3994219547371b1cfd4ca3618456458a9092674c4953e84dbfd6d131f7746e218915209d1ebd2a1370fcdea15e32ac10210f7bc62b9b6ec664fdc1cf6eb7821a33539c4791fc420e43da8feb3dbc4d3bef21ec768bc93e93f99479d4efa367a8cde5e9098d9bdb0a5b81535f662b44e0f201141abd16a8a85f6ea12a0cb8acea56eae7877f8934e003c6fe5b51c8eba5862f5dcbbafb2a6d77fb40116460a17ce6e4638c4d0b89df572ed26e0f7e794bd241388492a95c5ca9b57816f19e63eb53508b7e8664722a8cd814e2984b886dd8a648a80286b043e4433937aa32976d4771d1b6852ddb63f0d90f52ccec1b55e4a2aef293b12fa652d32b70fdb4895ba008f66caeabf925857fa8d1fdcd5db67bff1f7cfedb7e19d7ead5d3485cdd71ae2085f8a67e67a0c7a5db932cf52ba6a2abcdd1d5b09b56a67b5047aaf64ee5ed3b9a3e603fc4165a315e50467118be0480730490059997f4b9488e738c50d1a46684851d3814f1b4fcc181e037df066189c04632460452f6ce0d77207d1e139480fdcd2e92199dc1adb111035f919acfb8d0550d62491aa71fb9ae01db5251010017bcecb91ccd2d03f7816a8c52342baea30998593d13c5cf3c52d93d205b35e9fbd02189bffa730e4f3da719303103f59f1cd4fafb47ccb87d42391ae9bad470a17ca8ee59c23defde39a2d78913484c39a1e75bc09033f51ceef1e73eb82055cd361f5131e009ba5bf9b7c35e9af2e7e4a00e3d6ec6da7bf16339c3bef49985384143007c8397424705d2337ddc4eaedd047a55a7fc655d33590ed569d7ccbfdc128fa922e5b6daf23519207352b0a33aa4d55ac5408976c4ddfbb6bcb49a3b288452d057a1c5aafc17888433f15c68dad01e169baa4599fcfa76242a9ac9ad8c7245d732e3cd9bacdd5f2e03f88d309b65078e86d6ad13f74844aa1c856e4f43aee1d67629b8109c01f7669e8f853a694013d2412ab47825e9b0ad8e995df9ecaac6fed25506669a173044557c4363ecd3dc3055ede539f255f902d3d94d9089488a208f20cf7140797f59d316845afa767ef13d01067fc338aa2faf2411a6bda3dbed45d5413e41ceaf09c21b644891578a3b1a63026646f4392bba40f799ca5af2e830754cbf60fbe3784d013e46ddb95d79e22cd9492db25a8cd099ad4c7d0a1a5c70d20d23b378183e3db5324438042424283e141857166995ae4404e4f63826193b86aff5e83cc30ff18d6355f2e423130056b40e55afbdc6016a70c1bdf509458f9dfa90642a39fbd70eafb00ff8967ab2e521dc40db216be4ba36374393a59f6c4a325418676eb37aec9625839accf298d6608e47aadf7e52f0536ffce0cb9545e825749ed4f59792c118de94b0fdfd8528db15a03f2c39b5b8989cb3b6ad3f4b9fc7a5326ed71048740390b08f5e8bdd41b405649cac39a6bbf18d70345bb1c69843ac47bab39ae70bcdebcd5edcde26803a1f3f77aa3341da1c7f90fd8d16ea54e998c22fe7f0ad151a6b00c39d667ce9a905a2c2f4bc95d2fefcd0cce442d18498c29d7f45842daf3fe16c7b6898dd6984fbc24c341998301da0be7fbf50a9c49938fe4a109ea58b4786ba059c6e72482cb05cd4b8e45a5c4592b7359a7fe6f63f9205d1e05f557a2a4b6304184c645785e3ba8741aa6adfdb1d53bcf18609cf902d017a0019a0db34eae845b6714d22eb38e05915f1ae8c3caa8c7fd92624e7d262f7248dca0b8bf0e0f90828731c3b8a0a46f41b7928e9fdc4fafd0dfeb8de2e2389fa663a3876a1b7d590d070b63f9e88fa9a339db3e534e641fe6159fd0b3939225a444a8802cf68ea3721aa0621b3b71ed06b05417ba0a885acd24472a39cce96432c20a261fbd18180056866adda2be461fc010fa5f89627649cbd6105d8d2f437defb4c2dd626ae8a22a38025b4cd9634e1eec4889897532966d05f2db27bd2ace91b4912fe1a2d27b81cdcf37aa853e49672395519ad2820fd45d0f788e8c185c297f3cc5598ca2633e719f081f513d26b368fb1a21f2a612a1eae9e47c51a39537d11e09a5960c924f4110cadceda5c0bfd8a8c3f49a52d4672d3357f7541356e78a922357815ea0057eb4604e7faadfd5ee15496d7787c0b3e22c625cad64a02b9df5bb2fd96da5347c70602c73050e9a3ac30babf46436ec912f94eadaee09a8fc2dfc2e6cc361f1ff313f48fab2ebf5f5b9f2a158d7cd16e536c5b709c918d714266d2dcfc073218f5859a35f7e807cf7c7a39c16f0a1e6c06ef27d7d8a6b1ff1904d262b5f68f958f1baec20c68ae31068995892de9b385d4cfad3c7296539ba41fa28b93e4fd4b500876b6b2213f268762196bf1a1dedcc5aa3c2cf99f66e5e838c65ae8cbbd36d2f99d4a12932e4b3e7a172ed983df7375dabdc80a1f651edf68cbddc686226d2c23e895998200b5c0ba9bbf1d1d47fa6764d7274748cd6601c80e20613d58eee811d6aa5218ef20b8ad8ad10ae54829f12399012dc06e7030185ba583f61e8f7a2fdd7319ea651985162acf21f3e83a125c94737c891781fc1d98b3c09d8253ba27a822d6620633598a0d6abe9f9bee9c8063df77377a8b12956ae7a580d650105c97c5fa616a15268d6191ea5f87da910db3a64dcd35c3c7683a082ff444a3db2dd3c992813198a8d93607979c5b5349f54ddc9a38a29d846a98aa0aac4676af00c1c939d0803b2289f5697e5343fa449f548d26fd32a4c57f9e788a5d23dd8e89fc532be2c04cfc0767d9c436d52a279d34d8586c46367fd68f0e4a907d8d4c9aece25686aa185979a589f00038dc7698a1984ecb4281afa378d7885eec59a36f09170985e3784e403962f36c121461627c1ca25b7c82b2b9909cadac0d0780b2caa1bb5cfc433217a0b6f59d9dfbee76c30b4d0a67a4e3eeb14ce2e4a57e7aadd80e49d893b30c0e6b75469c9944a31bc4497c9807122ba868d2a8dc6bc1461d1405354fe09468e1ffd0e1b12619ae611d647354819f7db53f10efcc4693c91f61f79553e04f226c3bbc16a2142bcd4976204f09b2035a30844dca8fc9c10474eead77fff85158dd910c91134848c041ea0c9a83ca3d757855f203323b64eb0a19938982c56dfeb9d6ff278b4f684533af8a817437631e966fdc5e91768bbaaf11946f1f8c912c4553ce70cf14e6f664ffd656979a0c147c9c696c4997a8fa394b186124be2e94e0cdeaa33424e5accf11baec9a2e4e3770db71a66e953f415594fc8c59ba23699e4425a1c536bdcf75c0be9ca1e9222b4512ec7284e0084808ba10721d2c105a64500557f1a1a80047a8716badd141a8ec3354b085a13affd9bf410797935d3b64f459195d8caae82caee72f4a56cd6142f09057f91a1e0e2dab612d86cff81c966b38fe51a7d2cde4e520c7a5e814b891b372d76dd569167a67aaed2600d7b6d0480c2925f04b0507d01a075f47263c3004848bbdd7551615d28d7240bc21b71500e04f0d6af68d01954e4cc18a98f8ace9039655c8fb8a69c882263c0a26370eba6d1a21150170fb9d986ede1913b4ce12197225f3832f610848fa59db579813ce2ca80217e7678f2875e7f972ff0523522d611cb14d47d76ec47fc1f5bfd361e94efd848fd2956410ace35033e648d781ad9f562bc3d0538218d045a8b82b8fa74e21bd0631f5c61eaf2cd25b3f49166b86cdd4e373e2358ff5bfd66928d4ae48d981481e615e2a7bcc7f267d55fc79788cb1bd8aeafec7a1cc161d301977c9a2ba18371fc8d809a5745140f86745aa9259564f0628c235cfe0c6b7cfdeb6dc36727af8af654af60d29629dc8ce1e524662f938c4dfd229b35026283d16dcc416e5e756a52f7f87100af0724074653c731648f6b784c0b78d78166f0ec675050faa2485c85ce5365b356c7a359eba7a20da59dab135c0e7f9b934a7181bdb920a1092f2a5c6d784096b1e179592914f7d30800b0ed484e0d43bdede7c146e8def000ecd34651177181545cb1cf172d08c51b9ae63c920b1d7e70030c828946cd6a458150223c6be0ceb2bee2fa7399dd527d4c350a448cf46daceee5af171e13ddbb064cf465ff2fdacc8b6f60227868b2265da84baad207a373e4225c52d333fd1819209d78ac55a387751ad310ca1da6eadd0a1a5dd42175154932e61630890edb900bb0874f00f5a80827d0ffcf9d274d7004e7de1c84e15c16804ebb6d6530d33506a3a59c5046012a29e2c91f2c0e9005fcf296ae15c3ca2f92df4b067257a00a3f58395011dbd10a6087d251cd76073d5845e1ffbf93e9a97fb2addc8ea2824a2c4f66b735ece739338b044f87f913c025533e606220920e8d657d829f901b486e7775fa3d8110ff9c51d08c1430751fa8fbce29b6281de2ded67c5f3bec95ddf977d10cd856f7331ba21f5a982a4b6b7172f048c753fa5c9cf7f0cd147d572a883f5ba37919ee4b17dd0545113eb5747f7435b57742699ade108e27c81db40baa6d4ffa419bc64e0f6927d26a8b26a44d164e7d46bf6cdd550a9befa7f894a482880e2d04fa0c1bdb369dd1bce897ace8c7914c3b7599d10d49f54e9a2e0f62cfc798160a6b454979531df4e0fc28b4d804e6f36034c367fca364ae71fc2cd441c1f0a103c5b173891e863ed109d6c6c5998565a38170fb28f42740f2308f2580538ce9f011f38997787e4776c9f06fe23c1eb44b2ee6e084e95ac74c1d70bd0f511ee824e75b2d6b91c759aa8384682f4299505d4beb9173d8a2b5f27302c873603aa127a34e484156d91f119315e06e98977fc20e9edf91a4a6f429f07c87921f40413eb4554ba22b3f1add3ef65f540848a79a38cb6587fe04e05f268e2e566397057564d924bd691157be3b61a428ea20831f865d6e49b22f1115a6639b23014bbe4c61fa9c49462b35a691b7fbcda7f8092ee2bd4cc26a7bc29d6b12e67c4df7a3c77c84c460e48e86e332d05a771ddec0c3049ee9e3c58ab1383945b47fbe04c0553616a063faf493cc29de8ef6da92e45a47fff3a41633b43e6f954b665badf01c38a6345fb2241d56dcd6ce604f6d657d1e4228490ef4fa71e20b64df45d210e3b0f287580a86129d25342fd02a8f00a74e017ecd791ec1d1d6894fb26f04843e20d396ac85add265c1f6c814016b73c7dd97bcc9a4dedf44b9eddc89174de646f7cb7fcbb11b9b16559dc23bf1e7b2545b4e3f4dc19c007da3e8e3126d43d74349306ee0e56e3951802a954679cead1e01e6ffc0601724405523f3f5500f129ad26aaaa7e90183a2b43f84a159fa9b45d358f019c23462a3fdf4e47a4eaaa41b137746627bc93256879d5b956c3ddc1ec1dea93af65f49c26398b83d87304af5da9a67b7266bb22a9aca3b83c00e9991760af01fcf1b1d2ccfda5d4fc9d85ed5cf837c60cd068aca7c77f5251cd17a2e9550037206b55b8209a3769f617748bb753847b479fcc6499e8b161ec4d21589cd69270c3ecaa03fdc5205a8f7e25c0e487acbee0b05d98a333ae937ace4c369fb1a221c0e2994b6b055dbe3ae5a1b96a01ed48dceb974e7e02c9125be98c1cfa989703547594cc16a30a5415cba7c806c0d51bd2fc8a6f3ccf5a5c15478e196fc67e643ba1505c87a137c146014ff4652252ed4b3f0fc4c315fe27edb6892cd0001169cea8a3a7b42104b96cf5d3cb6d240663c2feb330b2b5cf6221a97c01f073479d5e64470c1e8b69f3945f16e7f0f128ae16cd9b9dd2990acb56a7a87327f200fa163b3cecc94acfaf4d046143c0a44c64718904f17fa1be14d87355e713379deec183ae5e40281372364530ca61f464737a4c43a78636a95b48cdd39e35b92e61492e3b1a0e11718d2f8d39c59dc4e2022e2e03f338e283c8cfe67b29563fb7875632dc6eb9f7e1b29af3d649581979d39cc9fd10d756edc8ee9c229e56407761ed74d37a59cada4cf56aad5626bb09362abea64050d68cccf5ee915819650b2f5f7299a68dcc8a1dd21fea2cf716accc0b2d6662878d06dce4494f496dd6e3664830cf53588d99dc0120e35857016fefb4b7f1137d81596213065aeaed96024ca8fb1cf102be79ef61c589e0b40e53dd12a404b97b834a2d3f8fd6434df5af909bde1cc66d6648ebc83c5179b1332db7993f2db4ebc768cd7730d2598fde1772a073acbce77c567993d25df7b169fe1b421ed5c61715e3d0b078cc1c4c79c601a29eb176e14da1a7c4f4e6b83247cb4c4731074abfee958dd77fb30536bd885855de21c49e81c34575eb4a7fc7a6422b7c5762d633dc60dff4085c37a1781a94a6fc0982c11c28ae6d253583e1659e392971656f08bffdb7057a4a61f5f7440acab6d62af44f8091ad545662a4c3d5a372227ee0f2d12fdac8d0bb3b01e35f9904243e1259868e5e8da4e9898049ad392e8e367ef750e1f9cb0114fa33a1308773dd4bd6f748b16d260f6b8b8ddb3d147cc4c79d0fc1fe9b6e9706c0b067ea07bb766a509148ae926a5c58c99c373d97f37c425272d767ba666b245f66efc422623fdc4676320d5e8de8017828668740319d0122df401674e786a81053cc0a58308e90fb11270ed65f15e2dff041d5c6a3cc13af47ed53ebedd2124679d15dcc70a5f53b546f62c260ed5613be97bd2c8cd88592bdda8eb06fe04781bce3bad1b1dd38871464601e17b3d9152363b5f9ef8a69df340c3f40acaa86aad3b66cf801e638970235923dbcbe9bc474d0350a7b828757ce4fedec1cc2735a7a1804be0a60e0466433e1e9181ce8fa962e1288b5997187048bbaed58be048679328d79dea5000c9da57de6dd1eb297daaa61ff9d180b0337a098346fc4938480177872880a6bbbeaf370bbbccfc39e3c6241a192fa56e181e092bbbc8e665ce28c1f1ae3cfb9e8b50778d4fa50dae7c207bd78eeeb5953469ff09be8a8daac88a5586618b0a8188bf3a6167c3142d74b838b85693e205299115ec01e127b6b84f4b7b4a6f88ee21f6a0373454a157aabdf5540c4a1499afa2840738c10387f1d11f32658386161268bac6d9b6d6da6c67ab90db58dc00177afbbfc0d7a77d28b48dd837e70d2858239162563ff6fe6e36832c26753f8d13dbaf77968650e1d610f79bf297cbd6a84f6272ba269d81cafc6a45f76e8e928258cd19f009d64254f4fc82b084fb5b8fa0b63791a61c8dc4e6f5754fef41df7378522c5d70606475aef1a804ed78c2054a7e1712e00f16c77e1bdc5f71e97af07bb85e6245b86c1be0e562818423eda839f6c0217ffc05b1a4d14fa272a3c0d4c52cd05fe869ab8f60a794fee039213fa2a81491c02312b40e09e234b22e4fa55d52fba5052c1c83d8c2937deb9fc7955ee42ec2798a86df7e7aa7f722b36f472f9e63074f94d39b38d6b9438dd6fd8a4cd19892743274f736c5d234eada0cda3917a4855308fc09041de85b18f17577e18e85bc1e71e170181ab6c45796de549a5b0a1b084b47df4ac805bd7316f8fad2d55b2ba35e68b67b066c7d2f9b590936232952123cfcbf2484140951d279fcd47a2690841e6483946a8b183c7e789d969c64d9d687fba3d2378852a6e17f049767d56b4f320cb87a936426e24ffe07301a1b6192b209b67c3277d0d40d8c6027945684b7b1fba16f65a6d217e59e402b4903438d4cca4c3bbc59e5739f5523d418acd2f138bb7393f2ce9190835d6ed929daa073d2978ba50ff398a566268dd7f602eedc06348aec4c32eb5f7dfdd9a73312f8c7699f96205f50d925cd303fa940e772cafbc51155d37d429c410e3c00e72985bc78605f6e3e57f12e584550aedce38d0066c0c6841fec8237a579a310cca1e4d77ff03fb71e8d50f14d3d9451d2d6d21e0c2a8199243cabaf93bfd2e8d43d3e66a8a9e800aeb8a76b3e0d1ac9dc98606d4c9c09155b47db07fb966d04e206a2995d32296114f7cc6d492f1321791d6db30741074afc975186128625394d1448e33acb1492ff1eb207e021dfb19d40f8d3807cd92637785c899a75dc2708917312717ca9031d3a8c3078d9fe90f6d25e4d3a71f7d3635a1771a132f46e346edead30e104d29f4c8845bc9ad28774c3bf14fa8a5adbff76e830500bb10a49b61dae2dd112a082a2d73a8401fabc0645a93e25c8a3d81eba081ebd4348bbfcb1b36c76a770d419984baa793dd7e3794d4691668bb8f5edd48b7424340ea0eda31379c5cd4c8abc827d72fa11f63d28a340a6cff91f0d97a16b8891a57a2694deac26e116d9c8c9c3bbb8a872fb10662f93a8cd10f00ffa51c614ba00ae60942a9d7ca3c961b812cb39b4bb0b12092504bfb4e79bc2d8f579e3fc9103db1a3d3fb7dbf3c3bf6b3720ef185b86431ba2c4126bd9dfb119290e9584d5f98f2f4cd1cbaf5218cda6cf0152750e1435c64d6a6cecbd32a8caa973208996c17641798c8810a85d3f0b216c856751d064db7bd97514e405315d07d10ea616e6ca11b18aa04407a4cfc5260d071bc20178ec4d625112210adcd3cb0d1aed21f803fc559156ff8d090d0d77cf685533395bd4de3dced6d092f3e1e0a9195c009c757fd95ebe195cda0c8e36eccded07896a69aca36dbfb4780911e75ca60b910856303dc3b6991ceb2e35ae31506a5700f874cdb572c3d416a2c096f06a67892acd57401a65ea6d87662adccbeedeef22b8ab3bac20580f3c45d854fcc8aa3c8d8e6ed5052f0add5edc8a10f3bef1a56aba3170c3ac8fcb679a110285715545b67740629b065a0a7408d09fe617cf8232ec9c1b44731bf55c95f4ae536fb6216a888bec36082b0ba4e616904ed708fa6834992eaee28ff9103f8e495961bb81180453e56a306e7a0cb86e9f74f6cf881e2d9f6f1a880376ebf32bb501b3414f1743ac4b26c0f3f5d54e01e15c8bdb9ea4d150be8b099fbf3923ce88f891f8dabb938c9af8285964da9d1bec35fdded036bee8a7a02ceef1ac4d113db0fe0b466cd8cb8254a9d06fab1c7ab296d403a09b5c469e4b90d67f555efe765de779c29d7c92f822fec102aee09b3e6cc594091e5532d368d2b2eaf73cfcaa534ba3e49a6731c09ca96e0819b0474fb26a48cbde9aa6839a1df93ac921550267477e3ea368ac869c736c25152772fe9fe7abe5650557ecbd7ab01bc735c089e9b32a544505d9412823b91bb18adeaeed268a01fdd1e0294423b121f70c8cd78f9b7a3126a40a9094e87f84f97cc58c32f4f38ac8fb833e1ae3cccfb39eaced3ea8956e7983e0001b3b0bc44a70ad1431e7f1630565b3962ee6db6d7cc3f4a22440758ba91057a0e1fc4cdb40479179954aeba4da94931e852643390b5de329eb862981b9bde7352c650bcb3d2a90a41a948797aeb56d4eca3d02f1c3ecce4105332fa95e96ed9b2691e0dbbc5ae2f28333c4bf7a43606e5422de628267c479d0b244bde33552252376466a60486de0a93f24ab5e174c67844deaf44f0324f1b6d3c9e1c667f9c02846a2869ee960787ebfe8ab0e00135bdffbf921098f0dd6cb830095854094813d19fdae1c7a74c29be229052589b9ab1e1a3d2b408f8f74481e2a528314d516b64d061b9f682a129f730a85aab80fd2c04a03f14dd4693388a32b908b5813e22bc8faa3124c7ea67b981791d961c13f8b2e2c9737ad4b67ce7c6da8404adbe329b6ebe474afdf5dd99631d6e8559480b47aa0b8e208b408162e4bcd89bf4b604fb7b254c9c4975c0d58e6b704b8e0bf0ee72f2b9fd7c80b3801beebda036f1ef5c699781e6c270b712b30732dd5cb77553976c53bb2923a178a03bf4380aaabc687c8fe12107054148aae87c961d60d42884762e447f24c705cb7031a8b0bb90db09a6dc468fa66acefbdd7821e63fbd6382909f474c3ae62d9e305cd65b9945ba2878c0b6c188a0e0915a080ed859eb483c3e9f6788eaaadb8d802c50f6edb988135431a20f79fe7126a0164d0e9bc058050e5f47e065c31241f0f1ca61edaad48932087720e797d1e18f2f7ce3c6758e2bf9978d322b772405ff1e4bff7e716c46a4c5d8e6bcc861e899724466b52cd707477cbb06908d7e33625c5517db3a7595ff851dba4ceeda8e65d80952956675d5e6b41ca7eaf7c82b001a46324c8d9a79a8e3425973906b42368f95bf1631292d22feb0659f24256a1bd390b7eac286235159dd5a71c79f1178cc2ce37fd7a06739f1a6d2adf13668f96d5b3e43d1750c26f8cafef059cde5971d7310ded0dca5278965c53f504a4c8d3545a6dfb88983e39bd5cbc3d080a027bd0d76c6d69aff13b052df2b484caf3ffd6b86a0e7fe9de8d1323569ec9fc7d5a44e8cce1230eebd8e40e6fe82b6f6e096a5d354c35669fb6cf149afc3d4cfeca16e245ec546e8d6a29a8a5e096d2be180a9b671907fc934127653bd159e933c60feea2297844d09c925032856503d0b92261063bae7f239941930141b2dce59a92d3a6f3a047c41491d9e3e90ce91586ae137ae860e3ea5c34d71d235362da3d9057b17a60f2a0e83e1160a73ca167cf59d44c198d80d9af1c3fb170f8e87959f3ee2fb617ce234c9ff0d2b80af6919ed0e6edba6e8bb77cb53de0fbad36c15a5937917ffbf19cf1c66c5591075864e1db98facd7bcd0106b34ae7d0cc7fe3e9de21472ca7b7886041e0ca1753d53269b03c8341c560a597fa80f8fc200bd93ae3d3cfe5ef7196ef506008c23dff1a47e71157e3420f999c83866645631991a9ff42b97d1af9f3e2364372dc9041ef275246014f71f203c59cf96c4e7c4ceb9394755e5a96aa35f2fd1152a2c8ce01fd5643857139f9c34e21a4357054ecd829fe255da0e268dd5afb3360745ffec0dd78c4cff3eb1f6a0eba04da6f3558ea10b391f1f8f515cda96708459c1c1776893833ee09ed8fb13025e81ccc0b4cec1cb33c4cae51ba208ccd7b5ed3f703d7abe67bbcacf3a8d20bca1b4738332f93363b1f53994464649ada0c1c1a2e51eb8b31c3a651bc5fa0b733500578c20a72d3958d33206d95cf876e7d8fe644c7c8162f26458f2fdf5c215c3877872dd1d692ae39cc7b357b4590e6a0b281bc68eecf687751297f4052ef5daa1829021926fc71b63f674dddfe1c8df6e29850c942ead8d9f0b0c3830e0310c12f8e7d07fce1ba197808e1ce4c705ebfc0978ec2aac0a4b510fb5e2855b6f3bae1987e087f2e75765b8cb09f9a48925b2a1348a8763ba1930bfbfe29a8f6ee42f6e2f42804213530e9157ffdfa3eb2d9c1c8ccb3b452ab68076b3ece489ddecac0b88bca103011dd47dc95a9c12ceee9a677b64563dd17799188ed599a6462e839e8f2fdd6e34674f411b14f7749d2a5c5402cfc8fb0ea2e8b389a1692a70c2b877e74b3f31ad4faea5b7f62218b297b956549490a55bc3b77972917c76c24843e8cd0b92ea3b980a3cdf587f348e2bdef263fda2382d9c4160e2a3a5718d938164bb2d5e62e165324715bff94e5e687b6a077fc53c68428f963040aa021004fc239a88e7ee37153557f8a0d871a326e988c1f89a66e32056b3beb7db3881927942d5fa5bb26dce7ac71011dbe92a0f713ccf026a623a4de1b09de22763cf1392620d789608f78c521610b34af84411eca792f7a2f3952eac721362da27fdf3d585e2c1e1146f54e200062ea032abf7d72dd76f987c5a08fbcc5f9b1b2dff6a31f532c4666fe266e59fd9d5eb3476634fa697e533ed3e9b53d1f038849e50e14e673c2692519f74a7c3ba6e322a9d11fcc35799f2be164fa271fa486add019f3d062fb8b125336bbf5bdf2977567762ea7effa30bb48093b55f90fd586799f9541b511ed1cdeada4a1be14d8a9ab478af1b0687769ed6f51c3927ac812e0ed20723aad66518f65b8ca2dfe54766569ce695692d6a8380dce71feb825f0f234e2224f07ed1ec092d7035543664acdaaff15722940b8b7743466d409e17603db8e11a1db7b6ed445a5ccf0a8a171336685592a73e0d218620ac6bfa799b4bb6e8037ee979c6cfb767c45a974a825386b7a22721b17e6aed7c8aa28a007905b12ab15213d4a1ab290b1b30da981b3e4dd261a1844a8d2d8ecb3a6cc893687326c8316660fff677e77fc2b2242de5ac0db33a18cdd7389ea62bef47154d48c94869725d62c04d6287cdd4771b9256a1e17656f19fa79e805ede585d1f58889e24b0a1f0783648f96455fdbe6f99cd3dd2565c7a960fe784af1d824182d6b5218fc0063efc82fbadea7344d70c47f95a148e0d6b50cbf75fada1430f7a5946734d76c31b5008634fc00b24c2e2ad34587e4974a78cae65d1939cf5f0364569c9103b70995d1a8adb6e78508d7a973f3134f4797bdef6e59e1b185488849710c8dc7b259bd3536b6ca86d41bd4a01ac91c2a0d073c15ed6267f0d40c3b5bc106f7327004fe83451119b5950cb6eacd6972c95f11f5754168c94a5f1eafc2ab4d81cd6a6ce1876abbb1cabba526c3dc53b921473024686a8d66047f9f950fcfd66eb6bd6344ef482f02fe8cfe5ed856b7af7eb98b448a9755fe344a130fe9359cdc8c78daad3c97a4637abcadb74c19fcb82e79c4dd59f474d4680ea976c08b4f6a38a0f263f8b73bad1063eb4d6cd9adbaccb71faf73ab342a8fa09df82ef4a9b86a6da1437bca14123813c7a69c10ab28482968c1af00009488fc04528ba54e855b3f1ee5eb2333eee5b79274468df23bc4127da58fe6172ea5d961848df2cc7f8fbe3d4a0327029b79006ac2ac9708693587f0234126eab5187b3af8e4772a598d080b8dfdf8f2def3989418d6112b7352f1606428787d43703991f3bb86c7b1175cb9e7800c4755123d85cb6efb4471e36d7f6faa915d0426fecfa2a906cafa6abde6c87d180193798ef9918c8fc666fc27bc6bd5ab44c6e03bb4286a5bffde9585fb5e3ae1d687d96a96a0dac6314db49f4a31abcdcee5fa30a90803447c02dd3b0bed0de20a84902b9fe7992c76107310293b9af2845c36de176070916961d7dbd72ff2d7bdd48cfbab62b2ce463e340e2a478bf324f8990073d1b7a20205e729d048273203071340b473618064258bb1494d593f3b074a909ebef3d10c41967d089378f1ae84074ed282d692bc02ce17da6ee4abe46a5aa8c837da9065daa81c8c7eb7c5d7f8b99232e3e8025582400df4007040e89ecdf1f9c3b7fe91db0d5fad2c70fe9bf5a82adcbd68757ac8c53880db41c7b3f0406bfb86e3af9d5b36c9dac690c7d44c8dc17394cbd7c5f0fb512569beffeb5739b7541025802bc8e77052bc06e8ec590ca21f3cfa43ae4f8fa33aac51e49e393055549b43be21f529b552343a46244d623329bcc9f4078d878fa217f407500b3dbae6c759849b85a32ce836ccd7fab55550fb9bfdad16f53a11ac6f9bc98508157abf9da1760a4e1d57223ec18ad4973f5fcf50d29e24bdfefab1b22fd73ebe57e8925ed4b289173fdc0c07569b3abc0d107aaaba4702e7d5b1789f30adce992f33817fd2fa8e019145c76b3bfdfe214a8bbfcea2e3bfdaafab3452823029bcc38d7b61a8633e5b50f87e699cb2327d09c27d0aac396315a9478877962e8dcd886903a8e64b1a45edf2ece35a266eda63882b1fe6d179a84f3982a122b074efb2473d59ca2cc420f7bf193a506b5669e45e9f17b4cf36e179e30927d4a6caa6ca8bf1698e2af4fd29c3a8ccc65a20f5ad8f173e5645bcc7a99a4472f07432fd604988130c24fc6b395032e380d3d2c9fe81ff604cd8c87a09e4dcc00a4ffe25abaf8c1b2324e0b7a9c51f2a9861d6270444b5967f217c4b95184de6fadd22627b30d0831c248c9c27d39ee6d030f2730a7ef53b4c26a7a6bb87f49ef8da735a67bd13081e172acf4f2597603365f9507304b74f41c4ecf7dbb2313237826068c813bf09caeea5dcf5d1b0002a0af2e166724e42dd37c48bae0aa4a05a963365dcb84c4b8fcb5a6a0ec9d980786006304f0436bbb25da55e1dce74c2774bf7ab6b94c5e03c5affa4025ccd37580ca164fe9c061f8772c2eb36be1d2cbac38e0973f8fa8d64b29ccd5784e6b070b8b434bcfa8c26d213e8aa5c9b777ceb28aa53dfc1b2f72b4e4bd1eaa1e429eb980186a3392629e2d0cfcddcc984d11c5dabb85a0d1b4baeb496f8a2544e6fab579502f2f09f5e3b88d5809a95fede76fadf25d1c915e757ba71f478fc95585e3be10783daa373fab0b437d042e5fbca6be3c6abb337af21525148ab8c9f457fd207d16a9fa57ae68d29456abc3b019c9a61217891fe7f94b762a7d5f76571bb208f1b7ae2d52ae19d79c8ea47eaa52dcf1c0e4461c865e06c22d279298028e2f03600f0c10bbc32d673db5516be944218648f4b53fd45af8e4e5d63ecd21e19704a6af01dfe4efeaa28af6b0139332c7dd57fe7dc4964f139fd10753653916edbc41c284fa73188a235168c18eb7afe6bf8983b5d1220544471b6643102c1bf72d4374895f007b71c7f9d7e722fb288b679718a4ad3030a5718d9eab240fa71ff51cef248c7aa8da8bab473c1e9052d44dc2deca0953bcfc98f2691328aa142545be405097a3e3aa3907853df21e24960f59b9c799e9d245dcf6f7e73a8a2d84d1ded8fa5560c7cc31d4ec35720474fdab231de526d40bda4fde951474804685cf2f7aa1d5e8ab8f436a7f309769e68cab0f78a836b17aef3f58ffd1c1b686b433415b2f3cbad937f627551ca36b48261f36735ab15603f81d5355fc45ff14fa29e07ec4e55759581e3383091e69c7bced3b052fb5f69384cbcbd160cb4a1912ba56b4cd21b56eefbb86335602612db77817a610448b6b51c2643130aa558a39013562950e7ae7b517127da69b54742e76cf516f9dea67be978ddcd2c228a1f84b23911edad30786a5b2172251ac3f78f34898f88a6daf505eadb906a68f380d88142b3326748b5064149018723ac74179a3cdc04aebbc3af2166f3d3186856cd2785583504429e869db8f24851440c3009eae53d808f549b05a7a714b24a56d3942fd73d376931eaaa28d50525e7b64a7da5478e5990ed0fbd1f78a6357940eb0ed5f720986c4132d400b7731adb4500ca67312f7b1a5ad0a211ab4a5666cbf1f88e36404edf1ff4240d7c3e94c696e0c282f55e17e9d175f936d14c3482381686622cd4f51c146a49d6c55e76e2205617245b1754ff5d93fc3fe06fc277d8a7b0b8a7562ab4c9cbd6a086394a15374c66f76010ebedc24cf7ea47ce5e174741644f98022a7273d9a2006dcd38dbbc5656f393e3cc54a0a18de867c33b660b14c248103cc69d8dc24d510cce5cb86d98a5fda9afd3c99d8fbe492380f0ecb5055ed0cfd88b7f3b59568048e88c4638e7955864128b1bc34660a32f6e327d2b40b48fa89b44345750c1109569cc29cc33e9b029ce5474f60ccaa6eff4f3f172c12f3961b90d19d4c57929a2480d8f48596a637f0ea347481e417b80372b973191ed535dd8492aed81255f95547cd48b48e4cb50a6594d086fe73b87fc351581f7f4fc35ec3331f164b5ad59d46e141d3ec488800c057490557a7bafd03f73948bd6701f40c177433bc7a56c019369f2ddf04e46cb0bac80f805239aea02e1beacd0866f3885f3731a414e42e2823d2275958637d83576aea67832beb65f0a45158ddc5a4246a0d45cd1fcde2d63acb8c4da3cadf25ac617d0cebfa0603084cbc8a332719ac89454be68e189014380fe415c3022b0ce2c10a01b79faaa37f1baafb25322b689ea00581d22daa4902121dd90361d04cc387525cdfd2f3304a453c3513763ef3d3072301426707a3160a08e1511db67a27b1e0b31f7311e882bb9f364fb9ec8cea9679fcc687b30e1f4500c9e0225ed018cc94f8ab561fef072c3f013e0a08b83a8c574e66316aab1a12bfb950adf820e26b8d39e08660524932e88f257d947dd66247075ec2399caf4eeb2bdc3fdfe8f6c26f4c5393ca0ad4a643a7ab430c117a41d1a005ae37d57997da7c3f25c5b6b6bf45cfabf12c0acb05553b3d31a2a4a9456d1145d410ac92b0646753bcc9e8ef634145737d57aa3af02dc17769bb936385eb4814eee81f76ca131f088e07d119b345d7f69e2f5bada5e2e54cf17e8d91faba3ed460de9c1d9211ec9c5ab8fdae51988c82787fb8ae39e58476f1782487b54d5132f63df01f961f5aec7ea3661bdd81aa88193d12319dbb3f8764ef78970569d51ee2db469adbe618da44149595f91c88eef3f97ebc43fd585c4b9f82ccd497fc1194f833ab5fee39a8df3ee28d89c2879b38c8103d3dae3728173caec0a73ebd2e8f965504f656277f394cb917a57f2547071f362c4493d4633e2864d5c45640bb9125274b8cb425d0794c446123a46777a0978b4ad29550e79618d1758673997bc844c12fbc72c5195dc948e71638c3a4c4ff7b192d659b6e19a2dce5e2eee34d5b7c6db0b2627efe72bfbbdb4c89e05caabb2f62a0eb5e36cf9b85b34d7d9e830f40cbc4922251f3b81816c91c160c93881267ec06439e9f00612652f5571f1bdbb7f239ab7006f815e6629281370499724569a0e7d83d685c7873318717e529c5777661fca9a8bb50a517a0c0a09448a286071f41f87f7ba082e0ad5ccc90ba3abc0dd0c1146c51f75c4d5b9c48df6db2cc4b9f50eab916d2257472cab8b8466977309d6bc956d38532df8eb08fea7bb48bd0179de6d83658bceea82c2b64b76f7c15d61b7c7c51d2a5230255921f732195aaa4f3cebe23a6cc5d6ff7813a5b59b2d8c2e80ff32359aa831a75ed26e50fcdfbd0316061dbc75128964424170b27aa9dae0c506d4538dd0aa617d2ffc173f27fedd03301c7d5c7347b7dc22d33341ad094c9bcd9e49d076748631d2c4294385a8f4ef27fc96a292fa739910bc1aa8cab10a125e9b6e4b8582e0a81805634041add758197a8dd68a4c698ba496688abc845f8e7eb14bed671efce3c934d6303cdf38aa8ec3258ae0b6e4fbc7a3c19fc59b2d15ed11795218acfeff5d5af1a739883ddcf8d3e730aa8c14d2eeebcff337861f40420a1b8946b6f12b23999211494e0aaee0efec1d7d637e370feeba562cf2366d9d326e54b69b93ba8e4eb25d4eeed8c23ccf439086609369a39cf4ed4886e6865f2bc9ad7e2af6758113b08c408e1aa876b5ee7b02a1e327357466acc3b82039f4411c9775dcae38a96d5bf76e2b963087aa41b5f5388c387b23fdaed43332cdafe14ea9f6fc28d9b1daa118994c02c8513cb77f455f70d592fafdc53e4646f2c853c48e4ee4c519de9f301d60c3ef35b31d8c9a6cf88da8fc89a19ce63886e4692e071f1a3e2dc9e738484365fc119cf9564c35b344ef70442a1115d47d0cb9bcc2fdc7006e67afe69ac98ab46d8226d989727b910d9bd1124dae40c1adafb45b1057bc5fcdf731a3575b8c03f6369dc119e8d39ebf32250e167ffddd37ffb80a2f7f161040442286f8148269ffb75301b00a9be1813cff7d8940f1f9fe3ac99827ee97f5b07d566cf8b207fa6d29fdb933163e956955718b4531dfc5052a47b5f20bf130b9371f43770c8d059bce263dcecda94c5a0fd87f52a7b7ad33e1395eb522230dcdd7eb2bb74797cc73664cecfeb879db35003adbd83b74523be9b5a9d7009f06620976a90e3f0ab06d6e385579bd8c0ba0d88c242f9e9b2458c36943179cd05b2def7b5e84d6e2c9ea6777c98944107f76d5610264c6f44f8401a6e2619028827e66dcb090a95a1ea9ac14e8ef2b2b27f45a405c0333a64a44f7202711ba517d1afa723a91a886a30e6a123bf11f64e6b74e1adee0f36321b827e6bfe88c58fe615e07047fdd5d9f3ffbfea8831405b5f8fa76682d4f1403b55cef758db7d855a484a1a21962691fd69d46ec7b7014c10e3e6579c99058434b6e5f5dd4cbefd58d922706bce8a0117b700c7df5f201f99accd7d6db14854b579277f5fadc2b30bdc38a94e5467636588f8ddeddc2adffd71168b683f2c37b17ce907ebad8ffa8b265d14cc21b83fd2857267d0c723a4ccb6dacf0dbd9479ed3dc442a74f56038e3cb2b9ab3b3c780f1001859b546da485c21a8b18b441cea9b0bf90608e502a2744c0116d0ceab2ee44d185ead0193ca6480fe296f18e8b8dea9cce11abd08c5470009a4eaf52e40250538126f21bd489841360edab63c9e6423488cfb99a4c62908615fc1acbee5fe05c116a53155b2a0312f6ac6c8544451c325af6c161e01df4fca70ae5cb42cbe8baa821ddfc692660fc95eb732502ef31b14c3503ca3cbe99be0e27e0d9ad2e219c7419eb93f1b373657241bd529abfab16b3f013b40273704fcefdff3e1b6a5e089a9724f1bc2cefa4bb6cbf1b1afe3f471e54b42ce9173b80d03b5fdaad33729e96a004ea7acabcd9c697ee6e44f231fe6b1c216d5e3cc6e89eac037949c28416389b4534a8d7d9a0ca93a00414c2631770ded4dd9ab56bae2498339b40c3e2a4cad6341087d6833f5f0117e35add7c1432808f77d4c1f000607e65a89f396622e0cf83d2a9fcf3c7c1e22817c4286ff712aaeb17af16780f87538dc6869c9f3731003e610a7eb0e8000c08074f4cd2bd911aa933b6855022290ba55750f9e8c301e0df56d9319626f0b61b47933e99f31240d599f1999f038aea4c6ce997f88fdbc9937f1138cf5b5d993d014da22ac5ae3a53da95278d4d5dcb2b35fb1a109e15e1bc4b229089f57f3ce437617fed8a2ea283314a8bac54d30254c0a8f1682994451eba09f15c1275da0c10068207e1ebcf7998b2f277ac23c992c76b1180646961046f12224eea15766f9b82f8432526ce074d1a104c0cfa4f4dae19465a719abdae054975ea25f8c10c28ab3791bdcc4765285e674e29e5ac16c3f26522f05b018962c69be0826c5ce83c3e9bb8c59e72c7a3e8f17b3d4498e020b08877eafdaad67621deee5775e5376b5ae96140e7356e6ee81bf84bbb2cd91f7ad0d29333096860c6963ee6df6218f7dfcf3841cd994633649547c7cf5520653e21615cd4613105ec994bc855677da560c46016e4b052dc32bf1b19d90f0abc7cf059f2f5447aba79e1928a068fe7cf585bcdee7c57658f9f26637c3a6236012f3e09f29ff27c51298caac97f3774ec23b998cdaf4a3ebdc0158923b77d65100102fad6cbfaf5f3d0b0aa536f2dfe7b18501fb6dad6e267b3b40808f7cfcc06fba1fce74beab18603e8cc97a90c5946c840b66798c7193d8c9088454694326282be0915a7a8de2737207e9c3f87475ef19fb70ce73ac4314accb58aff45d3cea014d6d9e7a94011f40243bf72ed33904987ad75f401111de044f7067a4476b4cde7757d390221306f95172e1023bc087a5695805f47154896d3b09f3b3a7684becb08bcb4067e046cb4e9819bdd7cb640690e0777aafc5cba944b9f601f1060d1b24e41e0bc1c3baf53d3813ea7832a4311e697d4948a594618b3396cf48c1d27fc3abe4feb3ee970a60794962e4607608327a47be259a692482dc788e9acfff304898ce3376e5f6e11952a3d25b5120cc3b6d348c9eff82a403d893e3072ac39c5a2b6fcba8a1e41d43e1d5c82bf54cbc193f75b2e0e0c7332c51b97def88824aee09b674aacc917544b222f46abf728acc0c4b04eda3d0803029db73664f3e708395e6fc0a74bfce80d5d40b32b8c2ad5026f3107e43e05827785ea77726c1e74eafbd90c1ef3f84b0f6c98f634b4f4653cffb95b6d8b3715dc79ad5c96c8d044415aa1a5a8fe0c036564b26eded99d6074b3b34809a46dce29e954e55856a1da673265def22501d14f4075c4216bba358f178d6595253eda828fb609d1c067a0a054a8d961c6c568fe4cb68d8a468e4c8c5a97e0a9f15a807566546ba991dd2d4b32bab9a1f4fafafe0c8cffce51bf6389ce15e0425966fbe9c7b07a91000d4208ade507a3660bd609ada02f430065fef1bbf2e17c818d9ebc64af6c483d7a0fefd05af5fee4e6984b90367ff89cb01aa3f100365af892b484b3aada32151b8ad6dbcdcdf42d31f23f301ea1aa2e069103de75a87e62532b9ff0f4f03e1869cb60cf648463a4327d0adda234ddd6a23c119c6389243f447aaa67a962fad5f6a3b094f5c1342112086d4190036799261ebaa42931f91b50bb74aa995fe10857aba57f6299ede06f45e788b803d0f689caffbc4ca51dcdb5fc7b7a03eb3dd4e6183ac6f3674d296a212fec49f5c8a4604a69a8fce9b557561027b296a2214fbf24d227d5dcbe4c7af98789ebe60223f553a27e8791d054de023ea42d5b6b7873b73165d0bacdde6950d8825b3d20461d3b8f8aa2c6a87936b03459f3aed751af6cce7703b7edee07d393267b2811cd4529053f91f1a6c36f607a0c225bd755a28deba8ac7f3fc0ab14c2ad9255e09ba78a3be50fd5c8a9a80b16f15c2f97bba756b50f0e43b13b1fe81b23ee1c47f5416f2f6e6e126c1312cd0633532dc4072c691eec4f2a0f2ae572f57e7b961d6967608c37251264cea880c9779cffa6b0b7922e41b43d59db3baad8df158ddbc975e8fb6d6622cf5c680f7cb5633460c4516bd28476d11253fa0505bc1599cd52af748fcba1279765108f26c56ce9ec1fec98d7a6e8588403625bb15d17ce96703e41e7592df1f52e50dde12025b7b461b9ee22a0eb26c7b87c05497a40c109feec2fd205d646170098fe5cbbab6c071d0ae0580da013883d1d7043d5d2b5b5ade71298bcded956faff06b025c827d682f9eca1b2a7aa85528d43b9b82474df4263c8032da63bf7df8c8d902c5c58ddb4d842a3b32b9af087efcfc2915b63a9fd736fe03c5a93a9cf4e462cb43d8fd0a5d3c292e82be541afdf013c07ccc6861adf4239a426328d5e25787ed2976eef337fe25db29991cdb57f5dd4efef69cd70e388e01c389ab3f7933d614992d501c6fe8c3de569a509d1b2298532df838587941739e7f9079c649c8ff9f1418390340f3ab6747946db14e54e137cc0f33a7f126f63cf7932e9fefae819c4c28f649c7801322ef47839d0014d24199346d8180a5f5e8052ace13207b6b7436d992fbd5979478d1f4352c08c2f5ed140668259d226614034398d0f636854b618deb298ae66f03ade41711d8f024913bcf850b8ca76d030ced039568b64d6bfb93faeb160bfa3a8d9f4ed44c248154b6efe2d070878865d25dced62e38cd160cf451ae4816998e051269308e60828a2c1b1161e29717592207f4815790be8bd44111da42a45194b91bc72a9df6560b32270a9a92264e303e53f37ac42baf04da80bde61c8ecb011c5cbdf62f069851a1d250129aff09932b4c1da801570eb4cf9fc1aa014bf7e00f894bbe3d874f15411ed7105575157f8e2c809f7ded2ba8e68e5fb088d86fa71774f758a6b9516648392a41bee32f0b572454ccc6a7c83ded65f516c7dc92217c3e964ccf9d67a289e31dc557b490bb5f54493e2978a4c4a2fedc54133f2ca816073164f6a7e1a0fc1190b5cfec451b98dac16f04b2ef9588cd1b2d4f97d2e95f38e64d92a9fdcef002c6a13bcd70a1309e20118c7409fdaf077335f01167ea4a836c03b571aa47346ad0e05002729604409f7b57816d2aa659e5433b13a96d52f3a60a071cb3a01c29ec0f6187ca2c3d2c07583ab33eb295fbf1fe50a7d87babeca0ba0934874be063325480e5787c2222c45ca14742edd5f3707216a7b8b1bbce349fc139fd9ce9e00e2d34eb538c091b6fdfb627fdf13d4bf3bb1725e1d0e966448e80fed857eadf7ab1a3455c282a1d7f24d545f980136915f965cb5b68965e280c25fecdf4ab343598121f5548d358128e96939116e219723b44751461f493aacf4271153b1579236e7a05ccbb49999305a6938b1d1c139310570a4eddb1e737db1d975caea91c9d02f489efd3ef20531238d4fa9548b09217817076c3347882c7c538fa99a8d24df02ab2f1b0db41f1477d4d4f83cf5fb23af9555242e5aed80ce62a921aaa21d9b401d5f421f6dd8dd73f4eb2dfb05cfd00ddd996f6e10fe8a8221747d8a0e47953f70b64047a7d6f15b6bae208c541c20eb3b2cbaae71ef62f8f3fa1f1bf0db76df9026244304f925952a68ff22014</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>理论八：如何用迪米特法则（LOD）实现“高内聚、松耦合”？</title>
    <url>/2023/08/03/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9122.%E7%90%86%E8%AE%BA%E5%85%AB%EF%BC%9A%E5%A6%82%E4%BD%95%E7%94%A8%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99%EF%BC%88LOD%EF%BC%89%E5%AE%9E%E7%8E%B0%E2%80%9C%E9%AB%98%E5%86%85%E8%81%9A%E3%80%81%E6%9D%BE%E8%80%A6%E5%90%88%E2%80%9D%EF%BC%9F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="777dc7aed8a9d9afef4b9750eec62cf208bdcb1504de87ea60682632be7a42bf"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>04. 理论一：当谈论面向对象的时候，我们到底在谈论什么？</title>
    <url>/2023/06/28/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9104.%20%E7%90%86%E8%AE%BA%E4%B8%80%EF%BC%9A%E5%BD%93%E8%B0%88%E8%AE%BA%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E6%88%91%E4%BB%AC%E5%88%B0%E5%BA%95%E5%9C%A8%E8%B0%88%E8%AE%BA%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="04-理论一：当谈论面向对象的时候，我们到底在谈论什么？"><a href="#04-理论一：当谈论面向对象的时候，我们到底在谈论什么？" class="headerlink" title="04. 理论一：当谈论面向对象的时候，我们到底在谈论什么？"></a>04. 理论一：当谈论面向对象的时候，我们到底在谈论什么？</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306281645110.jpeg" alt="a person on a snowboard in the snow"></p>
<h2 id="什么是面向对象编程和面向对象编程语言"><a href="#什么是面向对象编程和面向对象编程语言" class="headerlink" title="什么是面向对象编程和面向对象编程语言"></a>什么是面向对象编程和面向对象编程语言</h2><p>面向对象编程是一种编程范式或编程风格。它以类或对象作为组织代码的基本单元，并将封装、抽象、继承、多态四个特性，作为代码设计和实现的基石 。</p>
<p>面向对象编程语言是支持类或对象的语法机制，并有现成的语法机制，能方便地实现面向对象编程四大特性（封装、抽象、继承、多态）的编程语言。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">面向对象编程是一种编程范式或编程风格。它以类或对象作为组织代码的基本单元，并将封装、抽象、继承、多态四个特性，作为代码设计和实现的基石 。</span><br><span class="line">面向对象编程语言是支持类或对象的语法机制，并有现成的语法机制，能方便地实现面向对象编程四大特性（封装、抽象、继承、多态）的编程语言。</span><br></pre></td></tr></table></figure>



<h2 id="如何判断某编程语言是否是面向对象编程语言？"><a href="#如何判断某编程语言是否是面向对象编程语言？" class="headerlink" title="如何判断某编程语言是否是面向对象编程语言？"></a>如何判断某编程语言是否是面向对象编程语言？</h2><p>只要某种编程语言支持类或对象的语法概念，并且以此作为组织代码的基本单元，那就可以被粗略地认为它就是面向对象编程语言了。至于是否有现成的语法机制，完全地支持了面向对象编程的四大特性、是否对四大特性有所取舍和优化，可以不作为判定的标准。基于此，我们才有了前面的说法，按照严格的定义，很多语言都不能算得上面向对象编程语言，但按照不严格的定义来讲，现在流行的大部分编程语言都是面向对象编程语言。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果按照严格的的定义，需要有现成的语法支持类、对象、四大特性才能叫作面向对象编程语言。如果放宽要求的话，只要某种编程语言支持类、对象语法机制，那基本上就可以说这种编程语言是面向对象编程语言了，不一定非得要求具有所有的四大特性。</span><br></pre></td></tr></table></figure>

<h2 id="什么是面向对象分析和面向对象设计？"><a href="#什么是面向对象分析和面向对象设计？" class="headerlink" title="什么是面向对象分析和面向对象设计？"></a>什么是面向对象分析和面向对象设计？</h2><p>OOA和OOD。</p>
<p>OOA、OOD、OOP 三个连在一起就是面向对象分析、设计、编程（实现），正好是面向对象软件开发要经历的三个阶段。</p>
<p>是因为我们是围绕着对象或类来做需求分析和设计的。分析和设计两个阶段最终的产出是类的设计，包括程序被拆解为哪些类，每个类有哪些属性方法，类与类之间如何交互等等。它们比其他的分析和设计更加具体、更加落地、更加贴近编码，更能够顺利地过渡到面向对象编程环节。这也是面向对象分析和设计，与其他分析和设计最大的不同点。</p>
<p>面向对象分析就是要搞清楚做什么，面向对象设计就是要搞清楚怎么做，面向对象编程就是将分析和设计的的结果翻译成代码的过程。</p>
<h2 id="什么是UML？我们是否需要UML？"><a href="#什么是UML？我们是否需要UML？" class="headerlink" title="什么是UML？我们是否需要UML？"></a>什么是UML？我们是否需要UML？</h2><p>UML（Unified Model Language），统一建模语言。</p>
<p>实际上，UML 是一种非常复杂的东西。它不仅仅包含我们常提到类图，还有用例图、顺序图、活动图、状态图、组件图等。</p>
<p>类图，学习成本也是很高的。就单说类之间的关系，UML 就定义了很多种，比如泛化、实现、关联、聚合、组合、依赖等。</p>
<p>UML 作为一种沟通工具，即便你能完全按照 UML 规范来画类图，可对于不熟悉的人来说，看懂的成本也还是很高的。</p>
<p>UML 在互联网公司的项目开发中，用处可能并不大。为了文档化软件设计或者方便讨论软件设计，大部分情况下，我们随手画个不那么规范的草图，能够达意，方便沟通就够了，而完全按照 UML 规范来将草图标准化，所付出的代价是不值得的。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>理论三：面向对象相比面向过程有哪些优势？面向过程真的过时了吗？</title>
    <url>/2023/06/28/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9106.%E7%90%86%E8%AE%BA%E4%B8%89%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9B%B8%E6%AF%94%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E5%8A%BF%EF%BC%9F%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E7%9C%9F%E7%9A%84%E8%BF%87%E6%97%B6%E4%BA%86%E5%90%97%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="06-理论三：面向对象相比面向过程有哪些优势？面向过程真的过时了吗？"><a href="#06-理论三：面向对象相比面向过程有哪些优势？面向过程真的过时了吗？" class="headerlink" title="06 理论三：面向对象相比面向过程有哪些优势？面向过程真的过时了吗？"></a>06 理论三：面向对象相比面向过程有哪些优势？面向过程真的过时了吗？</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306281722422.jpeg" alt="a close up of a palm tree with clouds in the background"></p>
<p>编程范式：面向过程编程和函数式编程；</p>
<p>面向对象和面向过程的区别，<strong>总以为使用面向对象编程语言来做开发，就是在进行面向对象编程了</strong>。而实际上，他们只是在用面向对象编程语言，编写面向过程风格的代码而已，并没有发挥面向对象编程的优势。（说的就是我！！！！）</p>
<p>这节针对的几个问题：</p>
<ol>
<li>什么是面向过程编程与面向过程编程语言？</li>
<li></li>
<li>为什么说面向对象编程语言比面向过程编程语言更高级？</li>
<li>有哪些看似是面向对象实际是面向过程风格的代码？</li>
<li>在面向对象编程中，为什么容易写出面向过程风格的代码？</li>
<li>面向过程编程和面向过程编程语言就真的无用武之地了吗？</li>
</ol>
<h2 id="什么是面向过程编程和面向过程编程语言？"><a href="#什么是面向过程编程和面向过程编程语言？" class="headerlink" title="什么是面向过程编程和面向过程编程语言？"></a>什么是面向过程编程和面向过程编程语言？</h2><blockquote>
<p>回顾面向对象编程和面向对象编程语言：</p>
<p>面向对象编程是一种编程范式或编程风格。它以类或对象作为组织代码的基本单元，并将封装、抽象、继承、多态四个特性，作为代码设计和实现的基石 。</p>
<p>面向对象编程语言是支持类或对象的语法机制，并有现成的语法机制，能方便地实现面向对象编程四大特性（封装、抽象、继承、多态）的编程语言。</p>
</blockquote>
<p>面向过程编程也是一种编程范式或编程风格。它以过程（可以理解为方法、函数、操作）作为组织代码的基本单元，以数据（可以理解为成员变量、属性）与方法相分离为最主要的特点。面向过程风格是一种流程化的编程风格，通过拼接一组顺序执行的方法来操作数据完成一项功能。</p>
<p>面向过程编程语言首先是一种编程语言。它最大的特点是不支持类和对象两个语法概念，不支持丰富的面向对象编程特性（比如继承、多态、封装），仅支持面向过程编程。</p>
<h2 id="面向对象编程相比面向过程编程有哪些优势？"><a href="#面向对象编程相比面向过程编程有哪些优势？" class="headerlink" title="面向对象编程相比面向过程编程有哪些优势？"></a>面向对象编程相比面向过程编程有哪些优势？</h2><ul>
<li>OOP 更加能够应对大规模复杂程序的开发、</li>
<li>OOP 风格的代码更易复用、易扩展、易维护。（原因：封装、抽象、继承、多态）</li>
<li>OOP 语言更加人性化、更加高级、更加智能</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>理论二：封装、抽象、继承、多态分别可以解决哪些编程问题？</title>
    <url>/2023/06/28/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9105.%E7%90%86%E8%AE%BA%E4%BA%8C%EF%BC%9A%E5%B0%81%E8%A3%85%E3%80%81%E6%8A%BD%E8%B1%A1%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E5%A4%9A%E6%80%81%E5%88%86%E5%88%AB%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%86%B3%E5%93%AA%E4%BA%9B%E7%BC%96%E7%A8%8B%E9%97%AE%E9%A2%98%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="理论二：封装、抽象、继承、多态分别可以解决哪些编程问题？"><a href="#理论二：封装、抽象、继承、多态分别可以解决哪些编程问题？" class="headerlink" title="理论二：封装、抽象、继承、多态分别可以解决哪些编程问题？"></a>理论二：封装、抽象、继承、多态分别可以解决哪些编程问题？</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306281721722.jpeg" alt="a man standing next to a tent in the desert"></p>
<p>理解面向对象编程及面向对象编程语言的关键就是理解其四大特性：封装、抽象、继承、多态。</p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><blockquote>
<p>封装也叫作信息隐藏或者数据访问保护。类通过暴露有限的访问接口，授权外部仅能通过类提供的方式来访问内部信息或者数据。它需要编程语言提供权限访问控制语法来支持，例如 Java 中的 private、protected、public 关键字。封装特性存在的意义，一方面是保护数据不被随意修改，提高代码的可维护性；另一方面是仅暴露有限的必要接口，提高类的易用性。</p>
</blockquote>
<p>对于封装这个特性，我们需要编程语言本身提供一定的语法机制来支持。这个语法机制就是访问权限控制。</p>
<p>封装的意义，解决了编程的什么问题？</p>
<p>如果我们对类中属性的访问不做限制，那任何代码都可以访问、修改类中的属性，虽然这样看起来更加灵活，但从另一方面来说，过度灵活也意味着不可控，属性可以随意被以各种奇葩的方式修改，而且修改逻辑可能散落在代码中的各个角落，势必影响代码的可读性、可维护性。</p>
<p>除此之外，类仅仅通过有限的方法暴露必要的操作，也能提高类的易用性。如果我们把类属性都暴露给类的调用者，调用者想要正确地操作这些属性，就势必要对业务细节有足够的了解。而这对于调用者来说也是一种负担。相反，如果我们将属性封装起来，暴露少许的几个必要的方法给调用者使用，调用者就不需要了解太多背后的业务细节，用错的概率就减少很多</p>
<h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><blockquote>
<p>封装主要讲如何隐藏信息、保护数据，那抽象就是讲如何隐藏方法的具体实现，让使用者只需要关心方法提供了哪些功能，不需要知道这些功能是如何实现的。抽象可以通过接口类或者抽象类来实现，但也并不需要特殊的语法机制来支持。抽象存在的意义，一方面是提高代码的可扩展性、维护性，修改实现不需要改变定义，减少代码的改动范围；另一方面，它也是处理复杂系统的有效手段，能有效地过滤掉不必要关注的信息。</p>
</blockquote>
<p>抽象这个特性是非常容易实现的，并不需要非得依靠接口类或者抽象类这些特殊语法机制来支持。之所以这么说，那是因为，类的方法是通过编程语言中的“函数”这一语法机制来实现的。通过函数包裹具体的实现逻辑，这本身就是一种抽象。调用者在使用函数的时候，并不需要去研究函数内部的实现逻辑，只需要通过函数的命名、注释或者文档，了解其提供了什么功能，就可以直接使用了。比如，我们在使用 C 语言的 malloc() 函数的时候，并不需要了解它的底层代码是怎么实现的。</p>
<p>抽象的意义，解决了编程的什么问题？</p>
<p>实际上，如果上升一个思考层面的话，抽象及其前面讲到的封装都是人类处理复杂性的有效手段。在面对复杂系统的时候，人脑能承受的信息复杂程度是有限的，所以我们必须忽略掉一些非关键性的实现细节。而抽象作为一种只关注功能点不关注实现的设计思路，正好帮我们的大脑过滤掉许多非必要的信息。</p>
<p>除此之外，抽象作为一个非常宽泛的设计思想，在代码设计中，起到非常重要的指导作用。很多设计原则都体现了抽象这种设计思想，比如基于接口而非实现编程、开闭原则（对扩展开放、对修改关闭）、代码解耦（降低代码的耦合性）等。</p>
<p>我们在定义（或者叫命名）类的方法的时候，也要有抽象思维，不要在方法定义中，暴露太多的实现细节，以保证在某个时间点需要改变方法的实现逻辑的时候，不用去修改其定义。</p>
<p><strong>方法或者变量的命名的时候，要有抽象思维</strong></p>
<p>举个简单例子，比如 getAliyunPictureUrl() 就不是一个具有抽象思维的命名，因为某一天如果我们不再把图片存储在阿里云上，而是存储在私有云上，那这个命名也要随之被修改。相反，如果我们定义一个比较抽象的函数，比如叫作 getPictureUrl()，那即便内部存储方式修改了，我们也不需要修改命名</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote>
<p>继承是用来表示类之间的 is-a 关系，分为两种模式：单继承和多继承。单继承表示一个子类只继承一个父类，多继承表示一个子类可以继承多个父类。为了实现继承这个特性，编程语言需要提供特殊的语法机制来支持。继承主要是用来解决代码复用的问题。</p>
</blockquote>
<p>继承是用来表示类之间的 is-a 关系，比如猫是一种哺乳动物。从继承关系上来讲，继承可以分为两种模式，单继承和多继承。单继承表示一个子类只继承一个父类，多继承表示一个子类可以继承多个父类，比如猫既是哺乳动物，又是爬行动物。</p>
<p>为了实现继承这个特性，编程语言需要提供特殊的语法机制来支持，比如 Java 使用 extends 关键字来实现继承，C++ 使用冒号（class B : public A），Python 使用 parentheses ()，Ruby 使用 &lt;。不过，有些编程语言只支持单继承，不支持多重继承，比如 Java、PHP、C#、Ruby 等，而有些编程语言既支持单重继承，也支持多重继承，比如 C++、Python、Perl 等。</p>
<p>意义？解决什么问题？</p>
<p>继承最大的一个好处就是代码复用。假如两个类有一些相同的属性和方法，我们就可以将这些相同的部分，抽取到父类中，让两个子类继承父类。这样，两个子类就可以重用父类中的代码，避免代码重复写多遍。不过，这一点也并不是继承所独有的，我们也可以通过其他方式来解决这个代码复用的问题，比如利用<strong>组合关系</strong>而不是继承关系。</p>
<p>不过，过度使用继承，继承层次过深过复杂，就会导致代码可读性、可维护性变差。为了了解一个类的功能，我们不仅需要查看这个类的代码，还需要按照继承关系一层一层地往上查看“父类、父类的父类……”的代码。还有，子类和父类高度耦合，修改父类的代码，会直接影响到子类</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote>
<p>多态是指子类可以替换父类，在实际的代码运行过程中，调用子类的方法实现。多态这种特性也需要编程语言提供特殊的语法机制来实现，比如继承、接口类、duck-typing。多态可以提高代码的扩展性和复用性，是很多设计模式、设计原则、编程技巧的代码实现基础。</p>
</blockquote>
<p>多态是指，子类可以替换父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicArray</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> DEFAULT_CAPACITY;</span><br><span class="line">  <span class="keyword">protected</span> Integer[] elements = <span class="keyword">new</span> <span class="title class_">Integer</span>[DEFAULT_CAPACITY];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.size; &#125;</span><br><span class="line">  <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123; <span class="keyword">return</span> elements[index];&#125;</span><br><span class="line">  <span class="comment">//...省略n多方法...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Integer e)</span> &#123;</span><br><span class="line">    ensureCapacity();</span><br><span class="line">    elements[size++] = e;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//...如果数组满了就扩容...代码省略...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortedDynamicArray</span> <span class="keyword">extends</span> <span class="title class_">DynamicArray</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Integer e)</span> &#123;</span><br><span class="line">    ensureCapacity();</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = size-<span class="number">1</span>; i&gt;=<span class="number">0</span>; --i) &#123; <span class="comment">//保证数组中的数据有序</span></span><br><span class="line">      <span class="keyword">if</span> (elements[i] &gt; e) &#123;</span><br><span class="line">        elements[i+<span class="number">1</span>] = elements[i];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    elements[i+<span class="number">1</span>] = e;</span><br><span class="line">    ++size;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(DynamicArray dynamicArray)</span> &#123;</span><br><span class="line">    dynamicArray.add(<span class="number">5</span>);</span><br><span class="line">    dynamicArray.add(<span class="number">1</span>);</span><br><span class="line">    dynamicArray.add(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dynamicArray.size(); ++i) &#123;</span><br><span class="line">      System.out.println(dynamicArray.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">    <span class="type">DynamicArray</span> <span class="variable">dynamicArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SortedDynamicArray</span>();</span><br><span class="line">    test(dynamicArray); <span class="comment">// 打印结果：1、3、5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多态这种特性也需要编程语言提供特殊的语法机制来实现。在上面的例子中，我们用到了三个语法机制来实现多态。</p>
<ul>
<li>第一个语法机制是编程语言要支持父类对象可以引用子类对象，也就是可以将 SortedDynamicArray 传递给 DynamicArray。</li>
<li>第二个语法机制是编程语言要支持继承，也就是 SortedDynamicArray 继承了 DynamicArray，才能将 SortedDyamicArray 传递给 DynamicArray。</li>
<li>第三个语法机制是编程语言要支持子类可以重写（override）父类中的方法，也就是 SortedDyamicArray 重写了 DynamicArray 中的 add() 方法。</li>
</ul>
<p>除了继承实现多态之前，还有两种，接口实现多态、duck0typing实现多态。但是java只能实现前两种。</p>
<p>意义？解决的问题？</p>
<p>多态特性能提高代码的可扩展性和复用性。</p>
<p>利用多态的特性，仅用一个 print() 函数就可以实现遍历打印不同类型（Array、LinkedList）集合的数据。当再增加一种要遍历打印的类型的时候，比如 HashMap，我们只需让 HashMap 实现 Iterator 接口，重新实现自己的 hasNext()、next() 等方法就可以了，完全不需要改动 print() 函数的代码。所以说，多态提高了代码的可扩展性。</p>
<p>除此之外，多态也是很多设计模式、设计原则、编程技巧的代码实现基础，比如策略模式、基于接口而非实现编程、依赖倒置原则、里式替换原则、利用多态去掉冗长的 if-else 语句等等。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>理论四：接口隔离原则有哪三种应用？原则中的“接口”该如何理解？</title>
    <url>/2023/08/03/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9118.%20%E7%90%86%E8%AE%BA%E5%9B%9B%EF%BC%9A%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99%E6%9C%89%E5%93%AA%E4%B8%89%E7%A7%8D%E5%BA%94%E7%94%A8%EF%BC%9F%E5%8E%9F%E5%88%99%E4%B8%AD%E7%9A%84%E2%80%9C%E6%8E%A5%E5%8F%A3%E2%80%9D%E8%AF%A5%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%EF%BC%9F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cf19b4feaef9218d7fd133ebcf800e46abc547d92156feeea3e7921db7156c36">3881b6518ad03aa0821a5135712d4eb09f1ebf8b0f0acfdf2fc2f3a4c530ddbc040f9aab436607bc4e3313788b028308a4975265c660c771f98b4b04d2578e8e98664ccbd9a488d205f7fe7321b1c6b97d5c9797ac93bffe30bd274e9b6805cc2409098ba9970f9e3f70c78c9ebb63b4b9022bb121ee335cfb4a1cdc77d440ea184c2bdbc17b09b583519a42bd472b700c4ca5a5d00ddc7e62783396bc8169d84bca9632de51a6e715a321e5ce870a5349b7dad160e51fcaeab18a53a1849581a403e73718415ef29722e16cd5e9e5272113bd0d24d64c2c0380bbc20bfd7a146729e12d0f678b1e6adc3b780b0c898becde447b34008d846f35177a81c0af28ebc497df8923ed2466e05cdcaa03abb2db04ebab7c3b12d628c99d301e8c6b4e1783c2b8f144d65cc5da8d16bcbd9c6a3e1f05a45251e7a3eae30c1d0e758ae1fe71e2bc35805423bb407d1ef2b5ce0b37cc797fc4f342ba6993c03b711bde9a60714465ad33881e4a05c6266c063ec7a04a94668f2a5a2ed6c7138bcd7f3dae29c9cfd599c9e49f2a71ed43714b839431d36c8565cc56ffac2873b4e2399c050ba942e297fca74bfc62c47455f95df8e0031bf81180c2a2330a823c276e83bb608c603add4478c277c1fea9b7d1949e574da104c7da19e34668895738fe84a8ba3bf01ee17686a1cff3892b6829bf567ca526fa077a61deb11e276fa5acd484f8e6b248c79e33bdb6dbedc2fbe9771dd947cb2e63e25c66a715b4b3716cd3a09b6c87737fdc8d1ba0c42217aef376cebb3b6476625c5282d9736fb777337bcfbb54b425e9a0ed5e8233666ed46e9419aebbce7d91a8a91ee477d43ce9f2251850fd9feed0dac5e4e10611e1afca23f24ffecfa9e713cd0f6dafa78fadde53a2c18c6b85afc85b2ad9dee5a47c5063e70e3ee705e935f57eefacbca06447472310ff1dc58903226f5a3f7ace69093d9e1415276f376fb571aa425ca4cebc1d7bdd0b5c0e87e6f94cb0d84030353fbd22b4535b3f717f6595512b7ab0ebe486580c712b47f2de4332f7ff7da8e84adc1eb2678b4903a985cbbe94ecaba35c5cd00d29214921ca4584f3df4724deb06cc2f03a11d894a1545d3c369828b868ab02c463fac90444507a7e13c1f4a36676ce6ded0403c17bdbd367ac4df7d1ee8d65207d477a38cbfaf627c2842d41c584260028838392b01abfcf316dcdafbb5b003fb2f06f9c7de5cf641627e890f2bda5a18ced666d6e66e3f9eb288baf1742781539ba52f8eb3ffeddb3bf5be4ce21f2ee686e4ddad98ba4d7b8b7e9174cfc17c83a01d1e531df3a9823b0d41ca931b71142e02d2028f77c4f19b3782c2a5f9056ef054f877ac16196fba54f40506c31c7606487f533741ec503d53aac65f9c37385f79d93bf65afd4a26c6877d57a79bd5b0d692bb8763f666f7b21448ad946157852d909370db5e9583e58e8f19a72082b6253828f8ad04e462c3c927ac6f6561a7cea084377bc54a01d08fb202c7f609787d30b96bc58d6b726d96872b28b7b64ac60ba70cde5775688cc6be6d43bf485aae229b668cc70017961aa333123b884c8e37f2c76c69edfe0fc91168e4a69149341d1a4a18c2d6d6e822e7d540896a9d30d9e26765c0e146c0a037ec1385cc5a8a59ae911bc4f65ede99ee7672a28594421c1b253d4df217516fb20c67660f26059d51921951050063a550ab642b32d4bce9207a08c43f08158a073bd6546c19e3748403d57ad36ebd9b3e4079615906d5d6ab986dee403213cc197b40ea35b54edeb0bc3178cc98250c66277ed183f6c4d0a25c1a45e1b48e0cee2e8031d26129a6657d26de8cab667b2eeed084d702f118016fd484098b9303fdbdabfce071b97d4c75b6f2904c231d7647fca025a28f1b307a8fc2a3fe215e148df0e730d634492dbd7b7eccd21fd7502b75db31177d022f31cc369af5d2172c86569348c9887581e69bf9c5d1cce7c4ca7d1515526e8ccc1b8f0a2a4290ffadc49e6995fe5a6f52190132b258388df8368f464baf29e9bd67c8db969f0440ddf7bc73a1c641b0048ebe71a40c3060890fd619b97ed3c9e58e4ce01ac8990a4fd367b8a1519d11341574b153bde40009991a714ceaa22925fc0a2db1bfc346a00ad1592bab3bd36cf53b5ba3aebb597606ad4d326964b39cfa33de12c861eebe1d5977a6bbcf3aad58dba9acfdba28f1eb83f7cf5941c92a80783fddd9f36f5ee5f4e2cb92df303f5722d63b019ba51f2c00c634a3eb5899d27badb3a05706b6fe1d67a6a332485f5be6a5c98adee8e07a2bdca3ba70479147e71b7cfdbd4f3b0d5a8f50413f2315969e569b7486dc667c420f81622268911b951344dcf59085417fd3797fd64d0146156de32af216fcafe4cff2c7de44809886aebb88c29d8a8eda7bb8466ee020d77f0a1b2f7486adc43bb88c5137e60db3347b951c73ed82e44dd22ae34808212f9b8b6ee4b79f4b65e0ad16fd9c9f1d5510d94b870efc5e851de8b320ad9978038b02e73a0d56cfbbcf6c1c056197f50f890e5607d20598c03cfcb16742f3dbfdc1e3ecfae2293e7719707a3a73e593862052bc677ba8c0a10d8e5356809e414b26cd3a336005f6f8c01a7e1ef3e327103c1995ad401b6fb71a19bb1acdea28e6e0df07b5a81fc5e411a33b2affc35b8fdb9db4ec7dc2ef05379651d98ea1968667580c877273f331bf6aa6c35c99ba7f8f1f4c8f0958444ac3951cb34cb70c0a1f88aef07b9d0f07394bcbbffde57743594f6cdf39093e4d1ea1c55593d6f84828d7a48136f2cd44dcff9631258a0fdcfca18dab9dab30710c0e606d7ca9d3627e832ef25e87f513d8e8f5e3154c1563ba826c4ea5f9cf49f0d581b698ff98538ef52e261ec62494527163177dcebc26a088d5ce3bfd935e5ff90ef95928b08b032f520ab7adedbbde8af75ee894f94cbabbac05d86ba78deb7832a024a04d68c05aaed238c4463eb38184efbfb8ab2f5b741e205fe76a1fcd45b7161c4ac3935151ba371a1fc2e127ad80de90e477413ef476cf564c459d45671aa0bc4d51745dbb64e7ca275c52fe5bf256eb74916adadf226646eb9c4a8210f9117f3a20f4bdbc30727318ef930010244458c007a6c8cf3e872f8704853733dab18dc269688c46c47dab63884d854ce2ce14c120d04d2a47984a15b7d4f0b7d621b9392f504f9c8109e82debbec553de033e5134c32f86b8c53b2ff66fb56eaa1977cf3cabfe663b72a4d5a55da7e4d346edca17492ef1d653cec1b660932c2fca5ee4b9cb3a7e68b7820540588c52e504729c1ca6fa48cca828ad4dd3e0ea4191b87a61c0305da119fdbc417b81e9f5bb4c87bbe839252e8d285f967062764634691cea1f38853933ed0490447237ceb2cfd72c982ccd99be81d42a013d60c66e0746706c81071597795d6621b54e12731c52013b7e3a62aef1081df2108aeb37dfcd98ed377c31986a28f694538acf1c659bc4d82b9b18909f8b664c06646f1c2bb3b8fea935beaa1b57a752334ef6453999bb774fbb4b5fa9239bd7daebc27e985b53ae789b17b91cb2b753b1fd49956bb31132f4ec62aef481675bfbb6d9b405652bfd0c8c3b762c199347bb2536a31ce83c47a8994e80f99246bcf4c3f136fc6b8a9032aba7c6cb00a038962420a7629fff30cabaadbc5dbb323307eac70a4e31d07aa4b73c1bb764ab8b885765d739ce0ba203cd8620688f98b8f60570e2e47d37d5f0ac70aa221beb1046e9a5e0a5269652dc45bc69290731879c2388f1bf3338e605f32e4ee80d1a050685d5710a1904ae7be46dc22333b696d0d8c2ba32eec13b0e996b88b9c6948755e83209968e9bb3629fd3ef21f1f214390438a99884e16c40b192a0a7f026e788916b6a500de3dff962de4a444339a5216a2bc34b4b853668c492a0b9c96e5193fb81dd1ad41f6f797db6e384be0b38cb72818818c8bc86c1d0890ab3b9d12bb274c50b44c748cab5ba74395f1d82a0a1eccb5733c0f365acda0b645945602766f3a3959125cc64e66df9ebf0236694891389485be61cedca99b02f997b26269f73d00be807a6ab1ef60a92b304ba41f39e0aaa9f03638369bf7cc544deb7d27eae7952bc373d0985dbe70d1795afce02e18e855f992b2159c991bc350890cc635f66c83e01d66fa0ef42fedab062085efa68d04483fec4ff27f4e35a8d9e9317d38b7cf385c36c2483fc30a90002efe09f0d3c53ef5082b621c3ebf51c3c8405962b5021d25d3ec95ffbacebb7c95c708a27318217fd4124c37c3fa8981556aa2240351f632e08749d99ee989be1ca5106f7893edd064ddb9fd4ba45208f49911afb4b02060e9d9ff937c34c1efd290fc85d94851c50e992f7a7b3717000587eff09972ff2bfe925c8c6e72da18ccd61c815a4aced75cbfaca7fbcf87a34377834929de8cfd9ac8af3301f548984b561f8fa9fd5d70de1a5f028692eb5abc628a88f0dbd7ed4845cd4d37cfa5fab0a983db121c8de6d14369c29b6a0e76454cbd0673ebd38a55f7f3e42ae1af0adbb39d6a96b1831c9a4f9968b70b659b38443fcc68b618235f54053d39fa6682f59f0e04c6cbf099454e22db7f7be8cdd9b41fdb4db807b650e782d24d246788562561cbebeeea956d54a009f5ea4e373141352e622eeaf923ab3226b2591122f4b412f2874bd5755a5664cda79d036a144f64fbd40b40c7218fc46b4a064cf02e1e07fa19d7c3cab10eae846e45cc07823d69a519527350aa101415c04aba6bad691e23331c5d152e22fe4ee269714e5b514f90ff7a1f10c6692bb24348956bc3cac709038f82e8234ddb5ff0b556527d937bfd8ff86f0eae8360af6eb87f2e88fe3b93fa6797ccd09e4f0ebc2e33d0a9d608ff4e03d3c456b108ab20d41d6c3c2e4cd2057f17e72f07ecc2da548a2143ab94b99ac850b07534b4dae35054d1178d3f00f0e94ad04fb5ea7eac7050ec72a1cc0429914b03a34fc9914edf7c3e70ad4897dfd827c2a021281f39497cbc4dbc0dfd877015b346cfcbe414a8f5f51e3abae4e770f608c8d7a0e5bbd20d9298a6098ca15d7988d070263f7768b43f6ed30d6f82daa9a5498e23558317df2899537670d1118a34649c4d8128e99b246b5d65ec5b4776a599575e60aef0f6afefb360ac4e742c5ffca2ee6adf758fa482bca9834e81b242fa21928c41f60450ff0e0c140e64c70b4416022c3d042fd293e0c52631bf9d6c5d05e568a02592ed8d670f41e6ac44128321f6bb81218d69477666d51605d3c92c7a48d97897d02cdbb43e2cfbd39a440f9d571f7d0c63e5fe5d83ddf406824f52bb282216a958aae20a19cae9f731f854314e47fb0a0646ce43f0b83ecd8c8298b8d421cb47b2153b49c780d3bdabd04065eb217d3dba025b6543e5dd12873582fbd4400cc9a246699e67f6bb7b7efcc86cbef4e4a5adfe69e19942bc9d3342639f7b3af890e24c063cacae0fa8757520595af821aee1b716c5c1c6457a4dda86e2e379b90d0feabdb3a61bdf6fe6cb1b40030beffa1c6a6ca24c8ec3985b71a10a1c7241e7fbc40cbe364f3c5a10b722b8e3b5aee2110c9a4ba5d8f4f27642389028a846c56b78cfc0cbf8e711d3677fe3743b9a894f71a7253370b1fd39ceb785f1856111fc5f574f5740a6a47b526a15d5dba936aac00618f2ee644f862a7ed342ec2106f674e1d14dca1f52521a6c4a0b1aed22bbf93c9bb83034cc72016b6bf236ebb180f4d60e36547d0daa5857da6a0050f29a457aac81c77cb32ff146d1f3212f7a599ce50d3ba0cd13f0f8f2e61f6cd8e413bd3c4c60a4adc2772e761921bd465be8ee2f57f04852a735466944a133183f4dc69abc09e425b08c43509843796eac71601c07106d71dc993b4b82209a2cd867d2dfd2ebd23696dbc6d5175423586d307514ba46fc2c0721c4005fb565c8ca493796ba6b9f975d2ca76c69c469bbf51489fc5bb0af8441f6430c6e7fe98f4d072600060f03f5be501868c679f79f732e6dcadb561738f54eb8744ae1042e6487d4dd3231bca8683a926fa0eca096ee3da0ca4f317bad27957534bc87c97379c5f54902aa2611c50c73cba796cef59d8a21f95b4221538d9208c0e0f41b07e9a7a337711aeadd3c746064e526d0bcbbaee70405a8033df534f225317788d7f100d3e48dd41842f662a7218007f81fb47c210365f845170e1d757148d1eead831596880347a04d14da7cf27b4a3660f2ddc263ec19b9c3423e925a817cb08d53b6e9e98194ae4175f786d11a27f6edda2d3df27642d6ba53563f6d8637a7af54b3ce5b61ad1ea0597de2603befd5ec48401d96d55ecf5e8308c7be56d42f1b60c2cfd75b1a4713991cfebc79a30a0931c37a671e948728fa82688b151a9430940a0476c8b80cf5401929ef0c002efeca33e71213abfa6c4e7b519ab3bcd88ee72455ea91f7723bed2b7008fb4969030635f083acf6bf6ddb60f27267e0ed62c5bfb00030de14531060c1b5a0a389a63de1fbc2dffc631767d84edc693d5a3e9bb0cf0062fb07127798f5e2abde4d0cfe1ea74ad0cf8c78965a948a30d8a59c615a1cfd8f576427ee20f0070b2ca703a2532f8a0ca8c8271afdb915167e9127e4a78c60111276ab4b37631d017561f61b3a91ac0b85b53384b92ccab4f856a5ad93bfddf6b965d42295b7b8e449dc65e14cd0f74a049a3c810f0655b934d890839f242602e5e2f4db8c4f049b3a1c84a3ce56f79a8df9733ee8a42f275db29c0bad8ac770fb14375b6ab1f5017c5242864859a49e4a17796f4005b675e0415c0d7408bc922d20fe78ee684b6ae4597d2a82c48a567b68f8a7f8f4267e96d4ecc7130d931edd89ef0979f13137e4e552ada945a84d5215c8de5f28e768b423d0701d935a0ea1a0235653351beab5e2cfdc5b6104190221f8f3dbeb170c99655d6ee0bb7824af9abede11f1f73b1ae08eaea72d1b07505f72dd4aced466a22231e526b5c86a9ff5231fa46aaa0486861eac73dee1908476b3f5109f52f99a0c026e0a9282f9ef1991a866701272f3bf7eb7d02a235eda07de0f07c340e47cad5530f656d0183954fe2ed1788b4ed291a5c5f2f143d6e74d6676a0d4907a886306a587610e993deb3c38b2cf6404e30f70d249dc65ea03179921e06149e2398d210bc9814b4d4deac3bdc17cb54ef5482d295aa76d0a9e15dfdddb8d5dc732e335eae19bf9c870dc409d2c1c89600390f10f0a9b439877da215b4f15a62e5fcfeb465ce9722b44a309f54ace2db2dc707444548596b559908c927f13372c32546a83e676699e0720ef013be4130e84eb0baa701c250cadce5154d885a4b005cf89b580fe096e7bcb95984615423151668b9d09301af2b998020838033a21d460df4b36bf8f4628da04f56f99be036f20484065fcb8b4a18620b8cfbe824d859aa32d8edbc1fe937238c3c330f8aa5540884069ae5cc5ba84f49a0f6731dbc8c8eb77a9733c739d53e3ed1f5140632c8c309be61c9f021e9371a6c7e40e7a22133b423d4585119b95acec8934d3703252e5aacb628eb42097469c6ca8d87b1348c2753cb9644b1f08539426a226b045a9e815084036e1347e6740ed097373ab261198a269d40768fafbb43421f29b9755986330796880019daa977948ea8050db145735591f5b0527254af30170d29fd52b0113a8f21ea5c0e1eb948a5e41bc8b9a9b9be992f52838d64a7200eaf87e96125ec2a717d3acb47ece8390151e8d5efc8b54f67b1d99f5924b49369f4b8d187edf7a0a4c5a8da579495f8665077bb6c370f21fa1a0301fb7f2fa2056c607d10a45c25d9db2b38c57fc59b7ec8cbc7a28cb31f9635dcfceba4b6028df46c48b1e16a735faab836686d8689ed6f667085b814ddcc7b216257a4a6857d10151ebf77f0c12e493649a355226fafd508bf63cc43e8291ab0284b144344fd918a037fe3e30f57491bcf1d4698d9a84877f81a6745bef2cf6cb99dce9b477e9727bcd95feb6bf758a6c1daf44418e7b680e421f5931447ad7111466a65d71d1ad3362dd77d6122a3004be97b7278887a1c74dbab01513bb96a362ad488a4c4932b2ac151b76c98030d1de82fbc43cf396116bb61dbba636b237ba6a2270f79ca21d7de85f7226143e808ddc6bfa6c40ab6227e6d25f66bf2865ade136618cf31fe8bb9586c12bbd16943306a01aa10fb980d4adba6aa0b64f4c1175c9820b94db656cb9c38708354d621f3cba14187476951f4be48455c6f46bc6bc03bc100ecd6ae2170fb9b3a202075f2d87e72966a7fd09a8b0fa706753d841226b3e619339637505dbc775ac3d6347345a7d866deb39a32615690ade38328709947d6cf3b60ba5c07adcca83f77b4c89fde302bfa6e1b01ce8331f7a35e2c528757f2b8403cfd27e40371195e2856e1d76796475365aba914037fabfc925990344d2ce97f07158672a6835375decc6d0d67bec0893d2894f15351cb67bcfd0e3458f91c8771ac3cebe5b43b1dac07a1792ab49a924a7abbba692d603b1558c65957ed21503318b53a4eccedb81c486903c433a17be52071515c24cec716507bddcc8b68990b5bb5af5522220919fd40e2f9f633a15f66bee9f480363ad459265cb3ad2508a9aa68178618bc52d3ffacc5102f6584641f45c2ef017e9f67024016d64a7b482b568d96dbb5fc6becdcaca3b0b36aee9e1c19092558b55bbaf2ab0789273550791cd1cf28178eb3bcaa5ed52d5cbd3cf4a98f9b4bbe635831fbd25f46440bdc1e5497c817c941c489417bf18611ce8ebfc4212a156614dcecc56d406e623b0c1489120d493b1a781c8ae4a755dd19438adecb15cab12eb9953cc9633144920bbce99f85e5d9722c0a84db576354d49a606f74cbcddefc2ed3d33d61def76990371e3b866e4bd56e1222882db06f3b9039e876f9abd3497d166b1212db7293e33fa0a0e3c5cefa5475cdebe96726db5cfcd4c51035a375c5d3aa824a3b684403d26adb155b96eafc941cac976cfd9067b0ce864471e63e13873b9866af8a7ef207e2c8ab3beca0dbf939086e085dcb0887a4eed1af42ba95dd6247c6ba66803e1644cedc2c04809d0f0cacfb2943269a235f95d349da8316d954b300f0b3bd63c37edda11544c47898a384ca6b156c18c99882d764bfb3a93ee06ecc020242e33c074c8061569bb026072a0334b8516504fee67fa4ab77f66603d75480fa0c5877f68bc5c7ccf3925446e6530aedc3d1074861e722ba3276b1b45909869b8b7276aa0cc5f2b03983eb61d102e9b7fdfd24daa4611d5bfc4cca9eaf8abc9579f3e5134036f1063434988ab096cdb01d40be239ae45cfefd2d95552a9e55815d7fdcd8fb1c8277b4d884b5882bd4a3407b81fb67908eba9889cb56e3075d8b6c824f9b8a46dd642eb5043500b42c1cbf9f7b980a6bba9f961812e9f7c82b6e3dead0ed7dcb4f84156c733eb7b5b810dfdf99cbe89a8d5979c794a9d345e5419bec726e7a3a8ab3c4a862515a634f45a24548a6bdf9692a14d5fd557a161bc001918b4f6f650421dafffc6df756211838d26c17599f7a3e9f82a5dcf5c0af0889072dbe50384026f56193a8378a5aa8aef65d4c3f86ea6886e5b15c254ce056b574895d1209034c91a15caa9d6b3238d1c669176a181beb8ad2a60ece3ac71909346658cd1e46af897a0d8486e176144c4540327e6fa96488a9442fd8a6c7f00cdb195c764fe70e83d0a4abe9f82943121fb065003996d597dd4ef573239c2bd7d81c485629c82bcd6d24b27f2c336b438d973e13f2ad902032cafdeb202c386cc50c2d3ed2d0f0bf0b58b77615b7bd22016e15958c72161aa7855445297f1c4b701dcb112c1ce317916c05238997f3fdd02ed06de79429aa42a79de9841cc15ef8b1fa4a65ca59a3898f8b895f9d6b3cf83a88d0d83645ffd8ab531d9d3674da961dd1b2d09b0e193cafeee34bc16f980374852b17593e84578db79d2f2e374de46fe82ce082766bf33012e4ab173fd70c77493321fd504f8d08a4cced43a0e502eaec0bd001408073150376ee36f1c757ab3207f2952a9be1d7edc11af1bb2f26d6dbf15aab09616d036fb59bb74723308346cf2c9126bceb0e75e93479643f3845753006201cc6c567d9356b8e651a66890d6d3d0d3429a1b5f2aef1a654ecb079aa3e0b64c4b2637d49d6b5fcbd49e33ff63ffab0283917ac44c716be3053bf9e1e5cbabe6039ed82d3a4f54cd75c89eefaf3f1c8f4c58b00116227dd1417926532c6aa5aee8232dbe3a879cc4ea408b50039b8428a980019165d5639bc1a2026373bec034caf04845de8fe73f2cc6089534b0a68ea53aaa327c289b5bd365dc1f337fd6362b762fd5fb284ce7b9dd607df666597b978e156668409ded0f262b0ec2b8a853166909478f62795c149b8257670695b206079632721a877ce6060d41c1c77aaf7f0fba67d6ef51a1b7942dd7798816d4c39cf3ce5064eacbc77d0a4a11545afd12168aaf016c9cfc968bdf1d44feda22798bc0965b9755edd9f4d729d804348ae24f550e281d011b51de61ddfefa386c9df810ecb9db134a1f2110ff24efde5b36f194523cb82a5335b241c7d38c74924f59964a97282cb9e82420a74390e63c496f91470f852f12da291e43b9ebc8ecdc53ac7264c4ce3800d0720e46beb386220c6b96cc0b97223e3e2dedcaf6bb1aa0460ad3554994b2fdb95064a2f0a9c5d380381b5a17b0b48bf62cb81301417fce5d0aed519d4ee759c955bed80429b41959718756206a541c4e7d1bacf85b839a2b4d1ba176f8613fe3cc6e00dfb00f2be637dfffdf6f09eff1851f86b681e380a41f27be7275ddf718d735f96ff0939ff46fc16ba68fac9197e28cc36ec34e0502e1a54fd2bdfdc86ad4f066a784f0b14965f1cbb0500ae5de28c123559370e8a0e834542487a082656f7a5173a65b82b710869de8c7a4e63e1707d134f0bd55606f282d9b0406803ebc2e82bc62f040c02f5ba97b446879c5d6ebe5cdc06de7f114715f93d7585108600fba54b948f2e04d412626050f596ba70e65120b22567102bed7afcd93f17287f8d5d631c5353e43d32be1d44c7a6efec592c941f42b2257654250f3c9a2b06786cae3e87ddd65183556eb513a61cb5ca9b01193801530803d358720588bfc4029070c463bb70c85897fe5abf2123c0fb0eba2043aef3b98a587d921d663ed49238dc87e9e2e1ad1af7dc522ffccb742a985d221df9250d4653051d29d62a0fd44a7faa6290847bb11dfac77041f0db1c7682bb1b9e0f534329615c51f3185a552e77492d2484c5ea4941b3212b155593dfe164da8dd07cfd60c109234c8be609c323bae40b8e7420ee1fee51e2e11025a8518022a2adc140d865da36636a0fd5dfe47419718c67364781384a7c59a6fff9dee1012ae7a10f7d40c80ae09da160ac965e5486b6723d0118a197bde080d95b27afb7b52a9edd14cdc18dc4fc01cf461693ca1b7672af7af9d7d9663f923800c3f44935718dfc0221ee9b1903676c1c4db02f4c8feb16abe9412665787ec7cf809849992a0849c6533e9cb187c03ad88b424faa733e90d8fd689877dd9bbd574eba67c1dbca4622d0355aa9560873a9c2eb03397e3f0afd61081dfa20f79d5488bd8e6db4ee1d7599126d459eff9f6d2b6c021f90678053b6cde49315fa77730a5ab1b4955b917c605a376573474121ace90f277ef07dc0ecb28eb4a5850b9630497cb1857bb67526db253199d99265c83abb35a1e5d059f4d51285e8b463415afbe1651699a5318857325a92cf00f4cae86cd51229dadc3fc2f398b71dcf692fec6e44f138972ebf76078052e69ec17e3a895655c740e44270397c7576f9ee9d43ecbc0a7fcfba1d301ef65dc94eb6d3569e127b1cd2a432b1682523b5f73be6c793b990c1841b38c40d6064e5f7f646d773e679c9ec4be52ca1be6f05a6dbef4ff7466ad66ab277412e5fc2dfe7037552f8b6696eaa9914474a012c355e34961e15f69c6dcf339ab0d9abac645011fc1881b9b7eabd4f7b3d540d2c4bda5f6008bdc1f9e6096257c6b81f0d7cb07d51a23a682186911bc43990d562959f9b700ef080ce5a46a06a4e7a1218ceaf64646c003ec690db34c447dbc259600daf085f598b3135d91e8ae05d6b70f692e11f8bd68871a9b6636faa541d360f18544b133d37a5f2d3e665ff80c405f521cfefee710188f69849035dfa765d456c093191ba54a6f6417be5c5676e6be0c5b378130460133b46935d21d35d7cbc4b40621e21d951eb038aab70b8c2458c33a4b4d494536bae6a0e50fc46676728fa4a7de3758300eb1b553d67c9a009bad70e01a504076f5769c25850555062cd829f3ad031ed7ba672b55aada2cb758e701109be726bc6dd28847edee002a0bd9a265a02be85fc5ed3a4bfedaa77982edc617d9223c1b141292cd2cff8d50df66d8864a8e5ecaff0f675f6a2b9c9d897846f35728f6ce262fb70ca15e7e658a49dce1489c154c78882d4b8b3b4403365e30860dad55fa836bd602f67d00d86aab94bfaac27d16ea0d638329129eeeea5fc1033569527489dbea3e3c9b74221448d2e69b4bb6f0986e208c877319fb0bd14c90b6b1c4581ab7c35391a749a681a88f80402d1856b00cd887c8e33fbb3bb8bdbf71de8268d75fcfa6356cf070decfad02fbfe6287eec8122d08909ec94018aac551f6e55584f98b6779f9cafc54e5ac63a7163d9d3e45b7a149487bc30122a8f7dd23430ebdc937a46f8bdc77a20689e4851283ea6d8e1a529fb8cb165fa41fd92ea34827eea11897127564133cef238e697af893bbcbc17244ce2fe7b38a0593f9785f041bd33af33a690801a6bd4c1edda750720b978c64e154e36bfcd7419a5209184d224411e9cd26d4ae05dd2012f53dffe4ac391d0868559cebacf877e1d278ec27c24f2df8daba646f5aa63ae22a12541633f0e2532c2bd2bee2974744a3e784f5f8dabb51918e41ba45b0be1d3167b4345d5a0c258d514856f4965c196a9ae8ef20c322168db131dc004360e4732b978535402575bfb94d1481e98d1b8bbe70902475d4553c5ab54f08f7d2e52211f0142f0c3da7cf5a288ee34a8a9c16d73a3b9c17d168ffca085000b0c281fa404ef256fd5e608b5a03a4c749b054a4e6a48ad4ba2ff148164e7deacdc0a7b90b641e99adcd7c986cd3b0e9699d9751d2d6ccc596d710c5e610624f041e666a70a9be19577deb57bf576ce8713762307ddf1e3aeec26f8ba02951f1908bbaa86c9378e021e2280cc5987d0f943fbf8d6ae483375303c6e8f751c497853742d9e0be041557b43f6bf907ebbafa2f9b951330d34c7d52fa93e5a11f9886246ee8b25d2963430524587d19ff1092b626fe3110653a5f8afc037899709d55491a94ff3eab00da250179f7876c9d172078d9ddb53fd4f33a2427fdb3eb5d06d8065f52e53ad499e427532676a41ae895a9549db25555d4fa0f5e90d7cbd3ad1aed23552260e84631bedc6a916fad191c0fadadec95dcf1c520eca7a4ad3f58b047dd9ae6e75a506955611b387836d8c415af91b89a480177158c78c37fcdb4e683f4e78ae6ddce1ae898bccd43201957e4e9d8164081a1b64a5a20625a482f796f45dc6e8d30e8db2b5e1561a4e8547c6250eec062d6368f408afd9a87dc82f47163fa7f1849df90c16484345c3b3cdffe602a5356439df0ab5be95a9f753a19b6d75239f6a24ed9337ac6d4cdfaf64b132fd1a6efe912287347525f6b94582d643c0c4c7ffebac2adcf2b599dd08f450a7ece061441c587e3624dfe7596b69d67a5e07744bccb7e063f121f04b2b93174b58c3b6e4dd0557d9362061352b0772cb62fac2600afdb4c2573d83f38017b34dea03b678dc34fc991cf01d9b861d7e31d1103a7c5464dfc9ab4f5e1af75c75d668744cc23334f26a9b92516ebcdee2833cc86d568085241b9dd3fe65527a1e78e24b127650a44c746aa271326fb579384953cac6170d6972e038336a811065c1401233d7bd3990f59024576c796421e7c28a7a74d9c88596bbabd6f159eea34db6ff2ac309e15c8c147b00359ca354e8af4fd2595abc7074e7b9ce4703333a8a552d7af2d151818b4d22a519d04564bb9c67c65660fbca1a39b700d9dfa93ac02079d15436e46c3fe0ec847e4d4300b24b18f90aeab1da3666384c3ff32769b14d5c614051bc4650de917354c796625ce1acd781ca3985807d343b58e077486f50390001af13bf811c627fe9934270bdfb04e5bc4c35853fe7d386667a98e5ec7369888a030f770cd41c12613b609d217d928d49ea94562f6dfd4dda24dbfd92e5c65570c152c6f630b3188980d3f86a252d7bf78e429c01e83307c0bd73a052e60c27a60a24661f460c7c206c89b76147fd293b4c30a6acea025e4b6834200bae1bb390a46cd42562949f54782c85a1796177b7f5173d2c16e5b162b917b0831b1f64c3821fd95243adfe9a47cf2556cdf1712dd461873e1a404d80ea3988b33a2ee32b0b65db507f5c94f10d5d0dd43433e5fa00de2da648ec81a7f5c4967e6202895f6422d0f1cd3408b35c28ff2c3a71ed3f61353092320f25bb9aa7ef329c9b21403faebb9625d6d95621e9f0848363af8697a259f1b4feb4af118b86cc6e55f14d343203b0d56b83b6f9824c41908044a25ccce319b97c77bb2a1121c3267bd763e96057480b8211d8c740a1a148f41faa93295c20bf4421ba2120f041df32598b25c1fc963dfb78bebc6e8cd623154aa03789402ed7fc23d13670446c981bb02b9781f3b6ffb830b21674d82b08f67ebc5c43c8161f9079ab3dd9fb2707ea66defab42b7195e6ed6111dc7c6279d032f77b4dd9eec8be469085ca819b7d639043326d29b8955c92e2a1231eef74402513b3a8299e11d46c28a8bbd46cd1c25900a76ffbb9a2e190fd622aa3ce084e5d02b144436fe595a90d88b002b0c59821cb237cdb79496f469847b0b7b7e6e0b7c1f77d833eda5ee1ca3d58d39deecf9859d5823db28ba674d82034db9fae80c005472d45bbce30471e60f7b33fb977c76ae1ad870a52b75180514ca9980a9de0a018a62f7dab293caa64691a29859ede958a91e835a30867b66480f13320e8086a6ece5c2825c218d6ea9573256de599bf93578e986d352c9ff572f3c8dda2b866fd244686daeeff137285e4c633c9e6637cb0535a1675814d7dc859b3388984e2d81ad626aa0a60a0d5a144983c89bd956f506210bac619524c63df40001f762b6ec03dc9ad48b46f05fb9a9e477bbecd9d8aa490f77c62711204cd37f0a4ef2949d62ec81d8099ddb7314d6752204044381976e24fa44433d349e176f36b366e46ea8b97393572907596a5af53b1893db33659115d2b2d6dbe8133cd29ddc03f8b023e315ec8d1edbfd463b23da023fcf4c72022faa368ceb080d51dc78fb8687085f9a6c4568047c10044c210d2b9790dc45e09b10043c25107d7b9a890520b0fc6221399e5886f60b7aff1c00c2c6a0c92d730bf2dbf121e83838ff4d37acbbe06589c9fff5c74fbce6a3aff445f8769def51cfc1b11c47a3cf4365aead61d65bbddd6751b70efa559a4a9dde2e296273662d33bc1f4d33f24f835318ae115210198776399d58918f1414e5cc244e4bc67910e05e55932591489110363ae90838e5e6e321ce8f76431e4d61b7dddad32be09fdd9adf0aa7d25dcdc5b6d93ff30d9fc7493875472d909dbee3e3f8c91159131998884a2d7ce3865358f1b253727cdcb580c3dd9183c1abd7b71d207f35f4587d800b54a45ceabca3ab599e9c462bf61096e47faec6880d8bd93ef9f8d9c62ce114a71fa6eb814ae95f9cb2304d1b86024ebc9936440c4756d2ad269aee151ba4f0f74355965a4c647d1abacedf5434f279b5273ba2a184a31b5272c3632447953942ed62d058c852af4611a865054258770ef2a7f6a505840eb54975d8a764883960505b473afa080dea51febaf0159540bf36432927180d41ac95933c4305ec8a4ca708785bc76a6653649e5e641a5a2fc27928db867f026af2cb6e391438cd5c62046c738e243ccbb783d1cac398d3939b53ff8f3eb83a83a5f2b9a20ab2f8f890b5a4641dc5215323d6b3b2c257543b2e699dbeec7565b966494f778fb031a6705a6d45cf03c73b10220cd76c627c65893125bf8b633e165a3c045088490644b2beed3f9f0188664d699a45bf7a95eb68e0b6b58e333d3320654cc4f8406f9e5a7f5f75a3a7a13305ae65b98d92c02100846c2d80816fbd172865883be5395f469fa46de4d94ab2673268a0778dc75ea91e39481067051fcedf9971c4d25078e3f927e5bb220fa608ce3e132b116b7b5c2962039a7a6f2321c7e2acabd512f2e3b380b3c5d07f3aa7d4a55a420feac3443b1fd65ac6a9a2593d3e98580dff78fad4da2709b9c0049684c90ed672578c8d8ae34ae51e3034abc738b3878e8abcd64394304d74c72687b64da20f907e8ca8af79b795a412a7508422bf31583fa6f6185bca438e2cdb46311ce5c61b541b22c934437ee8e76df74184df53cfa82c99d1492fd58798ba4d1c935f1c19cc59d29a7cadae3d95e1a2165249e4426e1feab10c58ceff8c812a75b2a6d604271f764302bebd8fa2bd58e480f0e01e1189a77794bd5d48d8ef6941ed1e06f7a94562ed2a52a0ab73ccc031b148c50a63d0ed4859695c2d1f6e0943374d97afad56e8318fcc4c1d9262aa48804462a451090c89a07e3e9ff3f3d27bbf0ca9adcd7a6670d6ed0852e19056b372bbdfaf392989feada8220ac47d98e2f7525bab002675cb3374f6c1a4eaa9a10d3c8215aec81ac55310c3704047dc72d0e6df4f56f604407a9a857cc12932aa0f50a8b76619f6f63ecb4dc839690440a6bdbcf00ee2b3ef74b910028fdaecd4b9263529c38cc81c53495c176dcaa354f05ed79060a90707e9d62072874eae8a55f8c4546f835e8f7db21a19881c0477a553cb3274719afc69110c73b32ea6fe44f55fec97d9fa635753cee82d7539e723668c722c54e6d9c7c8995c4ef2b783e960bc65e6ad31703eca942cbe0a5928dd3340d24bef0d637dd58309adc408b4875042e88472f1885ac00c8f0a1756910a5aeaa7c2934789b898082c682dd42d8b903c09a90f8dc81b9022346679061a59f1983b5da6243be8a05ea75de351788dca220583d5c5be66124c83ccf260f5788f23ceb976ab9848ba21406034622946ec749fdd7285a398f079503b0f9f3cbad64dfc35d9b4cce70b3d3ca6dbe3b8c11922cd345b91263d490f9ab38b7c50ac7a1c2e8a03a785dbe4da1c0014562893e518d311f3cd769dc612e095b156149112aced2c6ace9ac969a0cc7aa5fc87ce96cefec2669ea699a0f0cdb60a21c10aed18e737aafa3de81d6d9108b322a6cec28703ac0c8d92fb2c46f90ab90745ca4b7b97d771dc44a23501ab46cc29463ab4ca38e5704c4828697af3b0870e45308fa4a1fdeca15f42e2215289256d17fdf01047a2a91c4d8b529353a2140dfa7fff741b00ad54bbcfa7462e3e12f8c001bd77ca91a6b1039c35b3e30496b94d40c2c769ed384efc610c23cf65d3b2b16c88fc8ca1dc9e7354c661e5ce1c9e59103d7647663b09df14da043f5349d8b263beb59045a3d5b719a1a3cd6343fa9cc06e8e08b5d0fbca4aa794a73cfbe24c9e7e9779c094a94cc9ea00d75ebd0c770c1e26e49a1c22329bb830bcf90e5dd4b4c348797fca9750993048ebb86de346b655e994be473ce696bcd00edae26b38b144494cd4b2e55b2f4db9204bd6943aa0ead64d882a2d05f3ba587d9345ffbe5dc817444ef4bb4a73e05ba1b505f3e98e2eabae53cacf3132d797dc6f31da5816fc73055b78d67417b23bd35bf060631c81e68546d761fbe4129d14bf090903bbd9b8a20d622c4828d2ebd19d4f6d016cd68948ca2f3c7b10cfeb5cb924e6cb601f2b0162aa21a7c5071fa102d282a60dd894c5c3d4f7ea0b8e050b19558e1ba7b9db2458c11596aedfb4959c954107dc98d781ed2719344b1d906f7651d84bf4a0f14adc0554f0104d8a72c1e55b4d5a04d4de41199fafff05f329679245effa6e5300ecb95bb346b9a5d715ea3dcff982aff72aba1c3b669a0be42927688ab7caa6df74ade0279ddc9bfd4a47ece4ea427afb37b939da11a8ad7b042fb32cc3ce0972b20da49dde9578c248ed9fb72e7e6bb5ecb699e18913257db12d2e3ec01a29b7e7e4338b2b1720a37b49aad3f70ff06a9a8ec9aabb7784ace457bbdc96db193ef68f33e1c0a477aa4a5a3fd1aea64d6ceb93a3cf1dbfd78e0b05f6c1e33284682d0035ac48e7964928d1902bb790d8aeb8f6bf6c528df017865e046873eb17941ede0d397135ab13db0b1bb69b20778f57e0fc59299b448f2431a82a542712b4123561522d645389a28d634058830fbf6611730b5b127d9b4a5eb32f9b105cc60b8a13f2e50d5cb717be2374b085678ec09697823d7e2a7c6fac72039600c3635c7f335d4cad5e2b41875851fdcadfb73b695dce667413917c4989dbffe306701e3c5c9e23011c252b67073786cded406526822049d14f72ae6528331f6e2ab6e416fafd84970a8b696b3fdbd0ce39d7744b1eaf814e546833fa60f1ae7947b1b2e34c1b93573c9ee1a8f7f56d92a62de15f33e77036eaf871976819f0ab0156485f29d9640628837b182e5a4cf0b7fb76bd6a51050e475228a2ceba3abdf30080ab0347e1e30e0422a713c63af584cb01cbdcd6c60bbeb123cfc02abc7455046db125a0dabda83e6a4e7e4f65f43a9ad2dc1f576076d0bb875f88590b83b506f995203ada90c26cfa2dec839cc788f4b5a1645f1fe7c275a99064369c8bbb62ff298bb04316895af1dba31253ec0742fd5d43887defc4b645c1b235383ea480cf54e8955dbe9407343b2ba9c26be3860350ed44b7f801c9defa0b4d47ae367a8b9e3e0a29ed373045b9e3643f814d291a2c948a79aaa45affd36c292f4d1ab7ed3e7cdaf0a0fb6f2c9ef42c8e33ab84a5924d71eb22e77394d9a587f5809bffcd4501e3211e3525365eced46b23d4a5319d9cdf31f129bac3321e1c1b63d72e8d3f4b31094ccf55b1fec3b1f372952163153988e10699d0492f8d24a66a6236e99e258072db76a4b3a5038dfb8ca02ea1ad4715e6c8e06a5b51386f2ce340eb149fd7b31044b93c7f5b49e4de8d72f58687c4d423aa4ebf203a796b4fef0c8c3933d936bc15e7eeb5901f93c690969759c103673b2b1b08e8b86c838dbb4a4d189f8802a17f91b12b8085d6e03d557771eb200abbe532888aade4f8c58ac26c4651629ea4aefedf0db2d0d91f2bd2d01924c44ddc312268552db8225deafc2af8b13f0840de8bdc2ec81836660a4203370101508fbe3f6eea3d6af427c32ac7d25b5c087c6967fe633b545b93da3210b53fad0f1936f2ba5d3e7ac9a7cd90e67bcc4abc5f07c31b8e53db711d9f2e4c814b166da9c0efd38a426e0d3d6dea702385f54a55af320e2c6d362a1b77db70ccb2e89a1c45c611ab6a377d90fccff380cc83b46359928865723e3869c0f0dc7e6ded3d2894115ea46f7581bd1a91c620cb2edca64d7cc0e25d02d7e4062009536deb637bd25c8cea194e80dd195e092244c8dd58497060d9bc46895b8363b87185061a1673da7c9ac592855ba4ec0ace6e724c2454e289cfd141d684c3565781ad83e24ad2a5c9d47dfb6a40cdce4bc7de232a154599f9f10d8522408d6cb226f2f48b46d60b9ff7508ca8b990821ee8e9d6175a8c0936eb67773c3d9e2c83b3a2e61892163db963fe1102386fa87c8acf803779a3e13fa9a77838db06ef63cbc95ee7d70839e30678c85e4fe186e21de96920ab6bad9d1b3eeba049ffd3d073c84b8a65152fd73b77af5e27c24545d4a53e801655b3cce99d1c3ae9aa3c4a6ad060c79ec354aa4ca6aae39cb78bfab5a00fcb65c7e9dc02797f5cffb3db0720a5e3234cafe8c53b5b58a11b6e328d0c111615308c91b3d689061abb6bc88b6c92a576bbe33ab10d39e9afb28c730f9b514acc3a60385e83e9142826b8b3fcb82f955a92460310abfa489adecd70531591c8ea796e034365ccb59c26da6be1d8d4d5107a6ceebfb6cf08f12feca601db43dadf3da26d2c019df6500e27ba26b8faf8f9b8aa96592faabe079a6039d045983c30900ece4df78476d90fb904a9f077cae9ecbbb6dd158e3d07142dc12cf9882d1b12870de21ec6de6bbd41bda28ea46985b60aa7eef87b1066ae8f7f10023cc6fd07926831fb7b104e411032f3ec69f948cbfd778bd28761dcb4a0241827bf705ee217301687c19a8aab0fb5f9f419a72f00451d51c820cabd43bf49cec208e916467e1a50e4af9b56e4c3bda6ef70db0ad6e39958942ea27c8b7960c081f826d57a17c4c18e81887db710018cd9d32e293803eec71d199019e92bb431fc83b28f0149d4fdf6804c26329e3d64de2c9ed544434340db9a5218fde5b9ed46dc6f7165f90d91c04be92cb37a427b88b93d01a2737329385b549880d6f6d2eefb6b59b08253fcd5894e23beeb7a453531930c5741180999bb4102ef2518af71b29560a9a26f9dfcde3be0d3c62bae75f2efc3df1c7a3aed545575b6c7a9895b17edb8f7664ca2d572b8be658a9a4272896c7c3b58c01cff9f84bcfe1b442b8a8a512c232ffd71a9630150379ecc7d5cf6c3492b64f0e2751e46b0521b55954b9a69fa98bc13707311873a0adbf64e612ff43305fe2de75a5053849bce5aa9250ef8fb5bd07ee2fbc7d0670720170cdbb2ab840d703ab2060537cc211607d58d3523e9930c8abb1f954b32d86e65174f1348ab7715945a3af8e738ab32878adf52ba6dd26212a176160ac4aa8731ab9a6077f7ebcebdb0f43e3e592b782aed7ed5c6a223d936f53d59d5c7f36643e8af04b165d96e015385fa2fd458799f9d6fc4d9d49ed126ef67524bfa019c098914cb42a9f11d610c6fa79562bec668243b20731efe66d6349efdb54e8f219baf57e48b3ed917510dbf5d90d3c6ded8486d4ddb30d03e25dc26e7db72f15e894c1aae06eb790eeb70f2c2088627ee3d0b4ae7c9bdf3ab4008b73945735a61343a362e4a13cc0b4c8a4955f092c143d98db17d263fe8e8198bcdcd8102d557ada37695f9e263d1c51b59a2979e67afa31469192cfaac7d9ee424aac1649c3a356d4a4a9e5b60d872fc470a917eba4d5017d005fd08ff64db3b76317c71015805b2699957b95953bf4a6502435e9995627831187ee5d04984eb8cd48a17076b4783fae1684d8ca3b1862de8f251a81dd27673f5d87950c91cb92cac21c48c993a267cc4f335fb24c8d73d87e40c92b1037a69bcfd8170d228cae113cd320dc04cc50fc4152238daa3d9d699fed895c89efaf0ab288f1077e2f27537f4afee1ea28029ebe53861b6bb544816676e412337da3319c8a93a77013c175c064dd2255428b561c14db89b6898c07764b87efb1522d88ac896f946e33e20675aa9bb36deb18734705b3913dccb837d035058e14e261d29173f947ae36d15b7ff40f0a8ae41f2e0aff8709133d99ec4c9ba3cc271c19a3c9c2c5e8d4e0ce8e3b363560b47a94cca2f731c830a3a4f1c9fa848794416fac69221bf0cbaa81584dcb987d2cf4b51142e991ed5faa6f7eba7e69ac2cf7e8bcbe77c1ca62e3aae23f882bcfd75dd430db94c080476b342ae1081b54cfd8c47e73db8aa544c25fd888ae3aa14e6ed29956bf8949764b4ba8abc90ad6519236f1383d157e0e55e6fae16e1a82ee99cfd0496c8cc1ef66d674bbe41fbc66f55e1d1943c41f67ed8f1e70a3e3699eb175f29da959befd93b49dc104d6cc6b5358f3b67fe18bf9dc00d7d194c92057c46cc05dd0676a7da2847d6d3e9756d8d15d5b0f1724f05530c6d624615db50be79474ade2019d3e760f322b75e700861d2dc23db0c865df9bccf1c3a55c667ab4753eada9b1ac7bd2f1dbb86583613196e45dd7a23c2a23d0707fabe7860e3c8e419af9b5b30f5846d426e442a765ced1137ee8644fb2b1fb8f1e4af98ec447ee85e491c6fdab9cebdf9233c0f8d89bda34ce006336f6bd2060280ff0780cb78e51c1eb920d6e9d1128587c3ea51906e6b3cd5b31d9498c89a6f626db81146f16051757aa1219d8cf0abb39f55de75944ba87e903122d5fe146a895f1e39a405829397686e2196868ae726824302f34198e9095191c1996ae76fd49915ac620236cbe95e7dbd1a63e3c084601e39b22e50b250280e4b5acaeaba1152bb84f4e48a866e08c393972d92417878cae13c26c83b3a1c9f552fea46cbb591e71e5958f63160136dbf82c36c3a0f61cbcb8b14442851add3df0ab1606af3d4f4647a28a35574f103c6bd20754d53be8e66539653fa4797c097f7067fee7f23075c34aa2b461eea178e4cda0b13904c2ad328fd4040e654e325dcab503be25c5bb4aedbc6684834ae30685cc0f480bc2790d6bdcf6972847b42835c6e3f267376c5c316c037590187db23e82740f1bd73fe316a6ac5d462f3d852d772e7e1287ef43d6ffcb3b384260ff0cbbeaf2a9b8ebf643cb916be6f6e4b4e1328b9a23a3e11601b453cad2821727ce21d1f5ff76cff41bda60531be38d27dc8af8fdc4d9f62290b15dd570525d03ee692214a2066a939f371cb6cda08a165da201a5cc6c891bf0468ea8ee464eacf952f8d980b2d2ce9151eb379f34084ac9c2614052e12eb995a5e001e6c8bb32f4a66766f9fad9ca1bb1b8aae526d4b8fc0eeb22f1725ce7b3c51d26bfa9496d1c1150fcdab725388880fbe9e05b79017c859008c152ce30100c3a6ba035f5ae600e1e8074c844437d006823892fd0362c95b00636e646a5b1632dba0bbb3e4c278d97ca6aad25050618ca6d77db55e1635500a28161139d3f9b0dbd312e6d3a30fabb4a8c40e56e934a587a80d91603d9013ea82a7d341964a505d4171e30d8f594c7bc5ceee9ca5b9d0092d6596fd076a488e5e63dcf48a1a652896ddcdf14910662a2dddbc98204d72a4818daa95b1f81fd5835c6f8ad8a5c6ee9327d787b3c30fce3e2aa1c8330d9b536a04d56de203c42bc5160794dbc81e6487eed33bce603a6bf096da285f10c58dccee11c34a97a0dc326b3b66fde1b0737011fa99ec64801707ae80b4dfb346cb1410e05d9f708c54e7aaa9ff893226da6056a74c0df7f102ba553ac1cc0501d289f90d43f636a1ff2586bca5c4853d61c9e26a9caa0f0b6ae7e7db4a34965827b87509a23c9b9458719b7b0ff1ce939e4272dd46f41379243f12f0822054611625fbc26ca06e8868fa0dab0d1a4bd0da1d8554b1ee833b70cc67cca11562570122c99f1d15a74e982cc3af42998929d1cd52dfe2c298078b1d3c51c70b66284c8a9fc8f6ebe6e53226bc469763fd48a6ff48226a2e97e9b4f404e981eb0517ab40d932cf91db43ef60f0d8a0503e7706e50abdaf146088485f853803f43d1fbb863210b4109b1b6c6e7c7e1fa56e60c320ec537bdda7b311f6d47a87d7e35f194b15d206a59c9ec7b138675e26e1be8e4206c11ccc363b958cb2cfccd6608e45bc2528cdbe92f163a6e39dd9ac3b0ce48e3b5b678025e8b64447ddc47f04e5d53a29d3e3bb60fc0314849765e1d56173dda62e57b2d2f147bcbddd08ddd895b92d5aadf2bdff11c3e6e8035dc5f0df0ccef8c19f9a27441a6e24cdb26f3c695f92eb9e8dafe8817b07f35cda33feee3d46d3f0f42b461d37e851c768a4e6695292fe49e7279e7064d5ecc732c241e85c3870dbd54b27f42c726b593e64debb18831b255edb0da94cc78ff4caa609ccf4cceb1d824a20aedf5581764306914c8613f244e693fe472c70db1ca68ab0bf93322e7ff9ad68c84ec26f96554070696b4aa51c96c99f235ecdac4d7655413ebe49e31f80d6e791d479b88dad9f0493da8ee8126486fbb9460212f4a4e8aef26e41973bdfbfaa16c28c1e2f0f455f3219570167e568707b414cb35db139f1e3af02f86704e35e7a652dfbfb7d5cde847e822084fb04bb6f782a737ed4f28364dabc06a814c66621e8f5ea702c20ea50dba743500e8e47d2283bca6166e725dbcbc122a8c22636c91356e3168ea0b5c2808c24680c70b926cb290f1c553a73d217f54a7dd29565358dc4940dd0c67e3134e5ce92ab103a71395003f1686d615717fc107eeb9d734aadc12114e5542f3e541b3708588a6c3d3efa0e53fda65a08ec91a53ffbf67f561291f746c2b75f6738e2fafdea00fd2c42e0efe035f680416b9f15206a7f66f382f02ac9b46b18e49e1a4a15f19e5861223f04dfd63baf3d56db6bd77fb05de2d4cba88689e8b460084c4ccc31067dd0ed27515e778145edb79ea8192f77617f30976d9b5a519195429e64d7dec1665eb6d78a461fc833fc3589dd42f2ba22f7256ecb283eb70fec7a09594c0f3565c5c1d48203cbc7a5f23be24c410572749423a4df723b5429833aa0c9d62cfebfb8a59765e1a832c7a5d0427b4e8b0f3dc9cfbbded63d1b9836d59ada4f2bd81de62efdc592361a2f301b2f96cb794974168f721d229ec1f873cd65d235c353dd55b0b5238cb6a7f7c89e09ad5ea5a603ba04cccfe8a155c0c9de4aea39e7b1e216c521bb3e1780687e4c0b16ae50b481bed28b4c555646c6ed6eb4aa5e9bd1f803648a5c326522abca3e4415f89e5d56ab9ec8b19394d79d88bab81ed8c1d21da9ca41649853241d6d13f7dfac60ec6b0dabdd2fb594e032cab70e197799f9c9d0344be6e132e38af8f4ebe610e943c20d473c849dda4dfaaf2c9a2bf57d12330d97957416542a41268733d439f0d537a09674da8f63735a3f219be167941dbee925e2970a545ede08fab11179c900729ce6ec1293859ab2ee3d65521822d47e3fed93e3e702aa11204a03939575d973383f35fa9ceba4797027d194f16a8784e46833a3b8e43ef178405d6806e499552010d3e0e4be9ca3a08547aacc906d41b501cd852246a9a9782ec2fee7acde1f11d2fb64fa3668a2f3c97cdbf90f630500b9eda21833a2a0234ebba5405e4d6017aa0a55a38eb4b3e1ee34745ccf09ae9371522709cf042e350fcc00f92f04df91a2596e00afdd17a86547432ba88582dbb0927bddccfc7eaf2c1bc6ceaeedc3872bee131b007dba85c85a1868a58795abe0ac0ee8936c5c4a809e1cd16c9f7eb10a300b4ed81b9a870f74c012a48a6b9b9bffac4d5f1984283b0c345e566090bab7e17d87afe25e568323b3d02fafa397b1e56fe2972b7aab69a4d74dfbf5cbb880776e98e51f747f30380db71cdd834de97894d596bb69da387d0880e1939a190cfabc4b0d4b3c186c04153d5a1909e2f0a8431cae7339d35f2e01f95b80d5b02f65d0d1967c7e6feccdde19a3646cfd40babf0008a6a5f617c8ba604f16cb177631694a988e099af82d6f7f07fee93b85213e4cf721a33c4149d143b14a1b44734719ccb9dfdbe5b644ca0c937da8797cbd59a2710c9fe23976a47b01b5ffa44a3c8fb2b644a263a5d66e6447114b73149cfe087aafa80b981ef235856d4106b66f0003953c43900d9b63285e66598416b153cd8203541b9fcf2dbd14f290c725959ee56764545aeb66e5da0736b7d1190983a5d749c7048ac884a10b7fad71907ee438b8b25e2c48b433c005fc14ecf0c7080484f6f34b2ff640446d7a04507083eae851c79cf68e020c281c3459d7f3bbcb075615897de6dcc498e67d203cde20b57f6a0625e0cd435b56dc44c8b745ccf3edaa67d01b494ed88f62baa53a85895e931756c00d2802e9c2a2d5ddebfd68864eb716a8b02c44b5907e978e475b1361de1bc3763f7f92b18bb02abcdb184260dbe58a9ce87a0b8a73dfb24fe6c17cf6007ce5cdec6d6b52d394671b88777ed241f51cce6fb4983321ddc45688d42d2f78ca326fbcf16ce4d3c68432b3b0ced7d44f09f2c40d9e61fe989ccac3b32eb43e652c22c006fa5c850c155affb768f216369a53ef902b8a604e67f77d55c8ddbf7574d760a459ed49e96adb9699efe5373caefc3554eadaf27fe36a7f36a490ed8fc059e1199da5003e60dfbf7c55c5621a7264590e4917e8c820bbf13d5f6567dd69b25075c6fe5ae00ec67ec345dc485f980f72dc97f543dec6876f079ed12a90332e7299fa61f7f518698bfaa131229d278f8407f25627c9d068910f2ebc5a201559d5ef8c08ecfddc92582f5f7a2ab618c4d5aa6f84b7df1b830a311a6affc6bc66335972585c5eed70deb51cdbeadb5470562786aec93bf93258bdb6c00ab0d4e31400bb0a03f8b89f1bbdb73b146f1fe64308a1ce50d30c37c5a880d4b8dee2b0e63fe3e0fc0e6e087e659d576e5b0ea15e22e049450d41a6dcbbf4736c2f9841b53e00a64f4c756f508db664de9de7b19d8b1729416630f164049dde85b1af682b5f674bfbf196661371911f292b055fdc7d19a7297eceaaa2380823c4f069c2339a3b4029e168bc3eab7cb1cb81d4e871223524a2700fe8b513943303581cf7a3af40ff5c230676421bcf0f61f0b2d72c7011d2c7cd2d83dd1fe92997b3480b9f59510349bc5c390a8c949a3aba3943cf2f3fa7542ef494ff2a6b506a239a591ec99ea15d6e408b424995990db551358e4f71c1e14656ecb229e6ff5122402db04824dcf5e445f451375e52593087369081acd94c70674ccb227f3a6e4de05e3935b2a44a8e6d6fd9b6ad92bbeb2f014d64f05ec1d3aa8e6d3fc4d807cd5083b4f750979b30e7edb3a26f818bd8f81be8414da878f65c79999d69d8a63cec01fc55309585e00aad62fa6d7bfb247d68423354c227b69171310a351c529ae839f98cd5bdb816c4fe239bb94f5a8bb0893a001f7ef49af32df467577f6350ef6761303e918988fb2d35430cebfe6afb271b681956eeacbee00cc7ebf7798d394b53012b67f98b25c3e733d414b038f743e4a9a78ea56b1ab4afcb1b60323d4880f36425669254056d1041b4771481fff731c79724b672602fee2d23dfa1ddf0096c73380d4d4cf0a49bb521ddab341cc562d91f4d2bae7324d0a876daed528019ac6e197da0f75af9399a1db3bbe36be43b2f9a3c151156edcce8e73ea9adb507a67300bafbc63726a22ada9c882014a3f1158380b02c822734aad5b5c810016c49dcd5cb259ff1e6cab1537acb32ef2084725410ac953421904f7c1db2e963025eb08bda14af6f85f6d574bd6a3295a460ce24bdae4e5a638997ca6bcf3a561aaa34f4153353842001b719c6ab1b1730eb4fa5fc944a61fa2587979e11add569c9e12e37e74b858e0f0da042fc94bb42ac9f674c46487675659e83250871656bf3e9c8cddeeb2501cb9abba7fee08f00792a597f63545eeb5481e89c5ea80cf4281d110be65f8bb7d420ea488b6bb1b3d0f56cc5cc7a9f58d4e0519fbdc8618648100f54745e66b18c016b3eefd33bb0c37dbbd67498263fb53fa1f1c8de2799906f65f8e003f3e01e9596238295dc4a7cf3d2a280617a58249ee34f410e635e0d48588e2f683d82613c4c67101e495f60089c1235f16066d098f5293cdd96abfd3e58f367539557b022ff974ba06759f3bd4b5ea2f22167bd534fcf4c64cbebd38f0e3df250737c9d5aaa4a6a2c8e939618bfd54031d2c43afcefc4a8ac5e37336f8f5f553202c2f6d51e7960bf646784d71f8e07a239a826e917fb62d14e2b21cf24f41dfccaf18da056e6e4bd18aa4e703e4b3306c3fa5eaf049a3eab21b8448f6d7b5b34ec1748a383d0736bbdc3ad5ece0863db91f11d2c34b1a5019e0295f0384bb8cfddccc3237111ae4dd28aa35938d8fce210f444755eb0897c2d5af1bed59e4951f7ea99b9235d4ff8292eea642eac81e16d9719889161b98d53c12efa91389190afd35f8a28860e94e7c14d060961f40c9244fa83a06b8b73f8e34ce4dccab9c4aaa07495ffa3e1a5d72942c3935a60c59e38d3cb6b4b9b5a381a1e5f10d8759c7b4d85741d3512965003609c6d49854942ba9f7eb32b49a80998d041ff0deb007edcd0f0fee968323a3f5273d18a09992b5109fae86b579b5bc322962824574916128998806f5703a99f82648ff0f78ee6a336f9105a04ef4cb48de764fd65363bdb617e57d10e7687125f6f6c344695fe61ffcbab2066405fbdb1ffb488d6991eb915820ffac56359edaee6cbc16ee752bbd1c6fda611bb66b9078d1b1e2c6870d38bca642410825f132bea25d980a3bfc5752306d54c07c9db8ddf456c39ed788182ce557e05c098003b857e66e7a1a4e9a6f6d64d543119e04f77c5be9abd882ba4ed3b92d25cd9b3289d764d9e6d5268335c88cc4d0193830c11656024e1ecef1f6048e0460689be8f10ad815ee44b1c8455fe77a527c18daaa25bd4b4ec7db8d70b0b7075c7d7ec5e2b20bc461acbdc82d5f82d78ebc95ec5e15d9f6158e437ee797ed694664a749aff6655a304ffc505cb1bcf3f4f1de4d86861d86938f9457b80f17efeb0692ad33a581ae1a54c42e92299cd6ea6f9b5a59cf7feb6099ee1407c30f6194b60e19cb5fa177473cbb563806c61d3103e00102c9c5bc3ebbe1afc0070c6ca76e7066c6097695d128cf9c4ac1cc2630afc6dbee21bff1821171e2dc244de331f1804472a19779cd159cbfc8531ab5b4ff006539f47cec5c6375db89c8a1ad7f6ba3589c1c31643bf9f0fc70320aa61ba57d31ee58ce5e2bb61b7aa007b02efd98266e0f6bd0e1308dbab07dba7f9652164ee9d1d57f1cbc422f970b2afac685bbc67683d8ee85d00a2caa85111569d000968c0cb53b00081bcc1a062a6b67792425bb4ebb0de5a466aa9944543263ba1c174768eda46a063b3d30d119292d5e45df0a112b133c4e820fda0b5dc45c969093ef8226dccb9efefaf7d68fcb87dcb6178fb8085f93f34df3957da915d171636043d944d312e76294268266c407446f785043f8340cbe7b7d6e60d324d8105c6c72c1785beec3d3e4ceefef3cf54fc27d38c35c024b9608350ad8a568305c889dbb9e953f0764a74ca952ff2b683ca6f09c162837a0eb63d340976d8722d329ec8c66562e2c735e37b9b6ccc0f8a1009d49f24fabdae293d0950c454b70946d0eb43617ee6e1d96b17e582b3c262a18766a12f9062c1883cc685da839f1fd60bd616ba70b99ecb1d29b1d0be96289ea8340664aa9dbad1c486b893eb5d5564240372644166e992aa9265ee0c947e96ad7cb2f3018cd2add82e6c209f7ea3d739daa7153e38d637e7e89d4ab408a6bb89ff5765a36891ab4681403b3d9e9f2b29ea6f9ffc055fc4af0d342490b8ff42618359a3a073c5f5691505a0b6d261baa190ae6662033f7be429f8f9d75cee8c7991c651f7729d23d543e571576c3e1d0d41954ec4dc1422a2c7371f60ada7cf7a6ff2625990dd050199a3d69cabc831539eeab58060468e37f121ffb9276cfceb1c45d3457c42267cdf69d7dde7742e97fe6ac44ff697769cb0349b4cadc569371a73a427d562e6ce86344424e667c2d9713f4e697576cf7d5bf077ccd60ac367b59543bee1315614cb9e2e8f1e14ac30a025e01f0268d575819c7f428796a71b6c3cf0e24ee0913eae6268bc733db7bf08e35f6a2c0134cad8c5ef7676ac7c9e244c1789399c8c57969aaa3cecaf9ed193af344bb35f99e3a58b6b7e211d8ac54a68cf0540687127cb8226c7fec6cde4e90215814a8264d1e2e722ceafd89c7707112ac61e8b31c4c24fa4440f15a8a9f06740b0da973a0bd760c59891fcea983aab4984ba21876f99121e1db734de555031befc64b3c42ed9d5dca5ba008a699fa1fc8914fdf267340fe02811a9fe359410adbfdc333a5d2da6b7c0fafd0528c619996cf145af7e94b7a149b3a576e8596a9dc218d76a58568072d9258368a8a547aa950bc990d8ce1d3adbc0f7ecfeadd6ba3b9fb9ba09ebaedf4e0f2aab391b9e6a8810453b70508945ced7b89105ebde8b7d1f224f323d880c131bc9c62e274df218873a65b4095a2c55ec9020e8b21858d7cdbcc9ab23fea110dc94dc732954527632fbc7dcb06715339b4f6c6d3dd886508985696ef7745e26986231a7f451a5fcd0a600ac003e9a53469ef4d4f7a464425a50424ffe2aa6150c0a7a3bb2aa3efc86a395a46fe01c63f4b3c57577db54b61a885c696b63760b163b05613efd9342b1e40b68111dff5859297b6a6059d81ce2d33034afaecd667e0e72be3f5a2dc0e64ac399e4812dd6c13adb59bf10ccfb6f49e2add7a0a5b01ad375c0f7518a6ba27fd1ad9e2ce4f451064be2fc297bd56bd916639499c61d17e40940547b4ddb0e7b9ad5dfab5f4b09299619838ac279d7fcdc4c5e30066ca55627ded90582c2e5d9efd3b1e3bea1a39c8b086d86aff8bd101c52297706243bfea909faf8716597cf4031a3ec7d4b66bf1ea8e71cf0321c276185a2046bcb443d65490943136f70e7e6bad24b5d4e7360037c17ddd9026e021c278f9ccec175f9efe1c29f5bbd6fa85cb2b94911fd1f4e1516a631f4c008bed490df6ac501073efe9f63337c61b3752566229919612dd05023665b380979a25725443d32f638c6d40f1861fbdaea5d29379c69155220d8b16d1254825f09b595d3cb56c10e123775e27e3c2134c52eb342ee3db457c85244db1fad4e83dc6907d731e6dc1aceacf4559b1aa51b4fb6275eb164f3a0a56500f33636bbce5bb4d26a97dcfcf067a1bd691631f777789e954e9434b4a29cb1c2a8d5a28ff1a6718ba8ea4ff01bf82bc871069c7e6dfa93b5684273aba98c9027e1417195e8ef9db1679f8f90b326ecf6b1ab347bce293d45e857a95c9de3b5720b0061e14c78f6d4300d23623e30cca680d15cf0fb949c16167742ac597ac71f3c27a94fbe172a7f787c0c1ddf8c39e504feba2f15e515c509210d6ce07682ef9b4247bf26712f8acc1c21db838d1da6b1a9235d0e7d7920e12f2735c247dba19c87ba35b66bfb46e9eb86de9a970d61ccfdb6b6cc6a68be84f8bdfc9ab58adf453ac09fd2f75eb38f602b211ad2ceeeb6d9fdc1e8db52d818a4d2817e4cb954cc43be0cd01d4bce09ff759147fa16c473f8bf96625c04e42d8ea018eee8867a97a2906341be7cfa2af2b345521222477fb7888e63cb34aca0ad5cced65f1151a2b85eaba5c0f7ca4c84d2bb8ddb386ba15e65766260d8fa25cf711c0e23ccf6a8f872f932e96cd0e360e8aa306fefc50782aec61af45aed5b6df0ad43dd63e2aa57cd265d00e554df5309afa43a345c8748d7adc43ef33057d0aecf9b50088697b95c86a0ecab9b746b91f5e3413633f9b25bcb6eeb44a103bed9dbf194d66d472af40a18fd9c0a3b0aad2a09c72d685331a4d94dbe2b48ca7ddfdf9d606aaf275114be3ce3cb914598ef29026a1be1f5e9d3ea7d1d538d6b434305405ee617028ae48a88b7fc9ffb9937dfd5ea0672821f56d77502aad20b9e2e1ff4403fa01274b51b1aa34d542253c338fb9c35d5e2bc8b2062d884e9e42cbe7b8c5a21583ed90d49efdb99d9aa012ca8a1157c9866872e5969be99a3bc8972cf224f571b30ac36cacd73776be8f0b2be4138e021db26b4fad825aff13a4c62c201a132d2e87ff3c22a2676553db142d773972482f65c62f071586e05c3ce678648cc728d81d17fd941072ec19f1b8a0815e269363e4f5d6b880e0df67596d8ae7eb01728f90505490404e3bb88086a7bcc9a76a65814ff483d6cfe2463edd4e3b4b24ef1f78fca63e83e5f0027f79272fbb6201779f15e6d2be427c1c3407c680ef8b379ce6e2450ecf36ed947b87c9ca6c8a190564688fffbc5a4e743c6ecf9bd06263a931697b254ac05524a2f3e3023a1dc263f30e5424dc57bdacfaaaefe91860d002e340573e9ce8a1935b273d4c92a4bdf5134265467e1b3e8a92250ded06a8c6fc7137ba2ad1a8cf2646d7811b897bac8d9385e2a035521d2f515258a047ce39a02c7968fc8664c58daa9602383021bb4b4dd831998f0a2f688af6f62443a9bf0d4075c4ad63e5067360d14ff37fda00ce3127ff2bf5d1c8cd174f43863e1f3f5934dd8c2cb38ca0376e2fc54b7e856b505e69d2fd6c68704382f17ea47f344db094d84ae8cba9c065c749bd261f4b7c8df535bfb296300e7657fab2ab2610d07ea0774a8c241a3f5da5b8422aab39812fd843d54d5bb6a838344f7544c8fa6d16e9c749ed6d7c87c161908611caad94ba9cdc9821be8777cce2e96fe943ec3764571b96c9b8ecfdde59d6220732616daa3cb4896f17a2d93a5c6650504d375a745a2d3cc5d5a77597dcae8a0e3d9d1e688f3a79b88b07011e0bdcf6ccb714cc6704da26e64d9a61248a23f98b8f91e2f444a68fc56cad9eafbfb91cf710c877c9f78bc3c3f292adf76de9e32b31e4c26d17bd49678064aa53aaa82847b963ce9affa1c81e9d11369ca882c1a26ef80b9f922d30bece02026b1898e40e782ac033759c71d8f76eceab9a43c11b70858c1405c24b578e7713367a9ac2f4ecf01f1f10c4a08de377faef0e6b70c458670cb67f0afea8b4bb40d7edb552a6b0055ace5c1784ed7c79c890a244f5ea9db3337a99a3cc6a6fff9114618467d8b489c58560d585b978098d29fc9de95e35ea8f0b5e5bf685861f82bf5cc485c2ceafbe2ce5fd46df122049c148b0bbf4032dfcaca00cb721b77cf33eebda4468e51185fe4fc571933831e75050c07751620b2e9791ac21b4176e07fdb185f9ec83703150ecdc769f86ff5dcb99afffec0375c59e524ef76b14a74f163f4fc739de641052de5c053e8b645bc564cf892813826cdc0d69f6f079589f500650fac770b62debfbe9d02dbae62ab8fea0eddc83ca960238d21611d5929e1a61b1d7c9520acdb656fc6d1c299d2f54f494c48a14095db33bf9f0620d2a60ca1813cdcafce37c871481507161304c2acf202bd96f73486168565baa89d7659b20ce62922a28fbdd3e16c9ccaee765ce4d3445da13a3d9da0c24f18bb2f351da186039f99692c0656c0137ce9bc0a61f3b3096a6282b8e38b06a7da05abb91d8f97cebe960ef3a854a97fa6b64f10da8d005789440c157896ff68bbb09cb448867f411deb56be3e5c50cced232f144b64afd131b576cb47553b1574dbe4210561fd3efb2a00be26df741368ac518b0fc56e63a956624a69f893b1286823c501c76723a5a5af5949c8d540e8c9838b5752a971bcba5cf3c4e27b1a39b566184d68b2c4512a308eed3cb4d6217b38282001fbc31cdcdae2bc54cf5e90de340168ae00c9688a17f213675be953eb11a456ccb6b4a5cab3ac8cd5949745cf5b4e755e5c3563d0dee3c0c6dd6e6657aac6935d0b74e93488b231d5a501fefed511e735aa0043dff2c674324435cb5b9e1e40d0deb15b7e440a104ebdd5e61a45100e738c419709ba9918d862e994ddb33bf8a35896af53ed25851c82cf7a726f8c9ea434cf15e5759a94ae4e63fcc9633faf51ad8f7b02349e714d9c9f4fdefbe7eec7f15ecb3dc0a925d8ec98eb934841e3338e916ad77e1b6682daeb9d6f15df1efc017324aea4c8e79ab8f4d9246f17790bd70c702b0cb30d7d59e3ea3adfcbc5ae09f9a402f318781b5bc9f3eb2e6bc31398b3bc883b43f0a7229c304ecc96b86436dc669fb2fbcfa08f70c627ca8c561a49d59f682d3388554f1e58b6ae7178300eacb8daacbfb9f88bb50f279f8e5ed38074668f5194bcd19e427ac2a091bc3fe0002fc2b46432a296fece02c8159a80f7c4fd24d8810e7718176d5ca41fbb641eec201a83db0c3c4a3f4483cd8fd21a4e2f98d0100b1503a95f9e214856c8492a0d1c98c0a9706bb672cd384aee0b07127d0c2d34dc12d0aff314bb958c013b06091dd190e24a4656e621f79e028a103d31cf614ba589a8cb7b7251d53685aa72a51d79ad687231f9b3e302ca959c60e3235b1d5f097594d2124faa4e1810ab4ed9dbb5f1fe9c595c8c9b33bbe41ac5aecc5a892831aebcda38d7488f757613b79f808a8004cfd5b88fa3ee93e512ebd90ba71359d89a47cbf2d9b549f1e5031c3250faf92df366526f61ff70b0d4f1406f508cd1ff8c21b475097066d1ec83473c41c6296c67161c29669096d2d44068c06d2b9f2d23d87aca202d75ecf052efa312ce2d3dc7acc11570c2cc3c9e7b9662e6f1c1c0bac70c57be494e4313877d5ce56461d4a1ac9f5d0033caec6b67095bd8416763d56b55172d8e8deb6e92c2e013fdec75629fdecccc53be395f42d2e91940b2aa331c1785de4a4bede1b4b7728974ff34ce5ca584fee9e288745c5d13a2293167d086793013e6629b31ccaada486f80b591de5e90ab21011a92eea59a132ea94d74f826d7da2274cb17b3a2fce5356e6cdcd87e130c0ecaba314313e2a8e6ff1f7a6cb797bfb965171a187dab32bed307320f139d666e75cfd88b91111e6e8e8d29e378f425ffb4e3dc6b5651bb9a275be3d47552b03aae6b48bd2f2d6abf3c270e592a962a3fa271fe7f1cfaeb5508a4154acefd9bdf429e2cd4e49ac11475a999219aa8280630c1740b17316a8041b0d305279e9f25867108c75464070727521c77f491e989678f977c337b044389c2e0c2f07e05f62dd066cfb9c2801f524f6c29dfb06b09fd5b4f08977933da53cd47931fd0f136c79daeb4b413135d0e7cbcd996c774698d2ac614ba8c4069e94081013abd85b5a188b7979f984a8b785a7c413074143feaf7b63944555c46a75bd42a36e5fd9eca9ae54107bdd53e00ca7fc810bf4a7f8b237c199bb05f8999f4be5136bcc91c2c953b623e8ade688b0622b3c127995273bfc435247b5466d35a4560e6e4f661c71bdd5d1c1a01eaadf4d7e93baaea6d20e74c2372c7262893c8afdec4a0f7933c2efd5cdde2ed2e05b2ad5a4609468ab21e3d6766aab6e53617acd94248c99bc704220e17f0d0dd1b4c72890a62e64fb995003fb5375bf03398681f04ec6afd23933413eb90e99fe5dd4f2bf2ce11786cf69f928421e0105644573c42a444d1c151d78a1bf5b5ed390865625a220d98c5c31849689d47ec937eee41dcdd814ef6d652884b84d5c348801c2318ea0091109b7cf57859fdb48c81c775f707493e8571357ac13153a3aeb0460a503fb0f7d59598e8b9bb1a111cf9db19339ee36e8a6ddf70633c721c6268648c07635ce4099e6d8f4601032024576c617845860cb575aa3d80bc86bd25cbdbdfb29967d6a7b301db86f435d0ccf1227ce3d9ba1456390f7027065008c4fa6070477a140499bf762fdb17969d968a850c885efdcb4ae0612a0a3e00ffc6e208489381c134891091c6eb35ea172498c66f34629ec7e38ada1df2cbb247c6bb9e509777497ec180d69a30d3e7fc97b572dd3850e3d4a523e9a1e9338d5f8c98dee8c80044eebc1fcde7a4c9f16c7174246e42bdaf7ca13a579c7d4e1b04591cd82201ebfbe367294bd5923c9f3c8d8eddc50576b99efe4bd1823b8cfeb512ea3076dabf54bade5f417c1827dda6924289b8f66a90005c6b976f168bb8686f89d938017b4e21eb91adbd8b4b6a1d4e37adab8d61650fcb8381aa98f31a536294b720c30c9b0b1e5eaf9eea75b72997ad4c9a1fe7073e6cd1f36addc94f12d05481601d0c040c68d207e1a5d4b5d7817af5faf84062fb1bbf311827716810406f201d81a4b9fa7d44769b53d5272d952a6d95be9f6156054848a7463f28e99395508dfac672bd0935dd68b660a0525fd1a2f3fb34dddc769b236a19ce98452e5e5ee53dec2681ceb74df9ffda40cb630b3cc1e0dc25abeb27ce116fcef4d97c729172d78548befbce092143fa8916cdeb62e180b618daa1a59fe2d87badea578fcc682d9bb2318a9f034431eaf7a8a57eb74a648fb6e572809e4459d558820ba0bd5276c9c2d156bab4a555dd3ce65ff46680b807f50b6af88da8855a1f356665144ff527e407580b5ad32b5534be95a7a98e9e2a429667cbce3d66e1994da3463dcc6c301a055e65455dc0637de23220a6a0a9355a1584d2ed2081dd6597950dd099fb45fa6fb294b12ee4bdf2146e3fe652fa6edeecb69d33ddebfa576bee0705caf1ca6e111318ab456f6ef4f29205902e264fd879ba4c950a6bbaa3d1de5130c3534281075d8952aa45250c7cca5718a658c661c219d394da2a653ecf0f389f332a63ded21641d54234c67ca1a78d9e00951a07e3e27f8acc39917fddbadd2cdac4e7857837663f3cae17581b65ccd3ca9224a207f3a63078575809ec1d0c223a9119edf52bdbd6301aa6975c23665e9f24db2e8f36c1f8fbfdd9ea8ff9d7fb7b08982acb1bd56cb67986843e19844a2eeb94142e4e048185531fa99be611491cae0765007a615651f24e98224c19ec7fdb33132e1ecf6094601064dc1d5420077c622e611c6e14c183e499be6f454dc9030a1743f506eec8e42af0ad692cfe5aa8610d9f8e14bee3aabe39fa64ba880fa9e5661bb7a020cb0c04d74e0dee4268e10d094e77a10ff30400e4054dd7bd7fbbb73a2e18c7a75e75edabcfa6a8b5f015624527379c4498adcba26ed372a8b33d18fd9bb54f75bf92555fa7005526c9072806243d137b9eff313885bb71a0021255b0e0038f392a1201eb357d8be0965553c240166ba582abc1b8f5bf4b7357ae9d462318df3f33e39d654d9fcb28c6cc22ce43ceb4f2d5d64b3c85dafa4c9db9f14f6b4c2251b9bd74c9dc86e939db431577b11d70d1075a1f85209c1524e947bc0fe77eb4f1d063f22ec5c2eef7f191768e8062d9816a1768982aad12bcbd7f09c1f45bf3fe296969d5a5dd525cb9dfd47829c8991bf050d3b8201ceb3dfbf445f742d49ba47907b30a48deb8e17fe48ccf5f5baed2f559916199a3a3069e22c0bff0f1fec4b54246ea1d630f689b23d160c753ee5c51bcc031c0755e265ca8a48f90be0af5b33d3657b5f5e81258cdd89e2e8ecc74329cd72e6a183982ba5bce929c0820426b8da11316f8d6947565ff0e49181ec4d22e495368b5aee650bc5c1ac2129698df7033f2f76195f8ba7dbaad1e34a597a38da60b128129fbb34d8307baca569977be0a58761d6108f5169440ee2902336df214c535c7d52e7a69645a0730cf3f84c899d4aac7a7d538d1365e73531fddd9e142710f82edcce1eacbe9529899ff477dc91d49f26ddd684e6fd38cf199a784c87fa27ee8619fd1f950193b8423c64be5e9fa786de9d28d8219e3cde989722d5246d554245af0b26b8ece763771877f6528bbed8b3d0e8df397bbbe677f479dd58fc843975d8daa7de32c8196116a154e1205ed529734d04bdcd4c4ddc54a104e45e1732407a6503bfd11ac5ecf8303fab5929c52980a2e9d132b79cd9de5aa626b32459eb197ddd4fdc13f24e06306c5a730f665cc66292cbdd2f3995ab931ca90edbafac86a0d4f7240d0262441babc1c039e984912980968e64821ece21ab1d3b68ef6f979400d29c0de2aa57fcdd61d2edc100f9f6b6a202400340ff7fe05c84508b2c163ee2f615cfd018e854320f2cb4e754d72683fd9a57490308aacdabc11d04062489d851bd6f56b2b02ef21955a501c2e6faf51e6481b9619ff1954239ebba9dacae74f09dfb2105c05b6154aeb9ab885eebe44a424d3692406bb92767f7c0525f6c22949e6071dce317211539a034901d999b3d9614c74527f2c590ef677231d5888a7e0cab3b8a675a5036c7ca8dbb2c0c0adcc2e24065dd0836a1a59a9f80d3ed620e2073f32fc186048eee54f4ac6973bcb511444b6972e6014c0ec9b6e2d7ba5ac4c8d7cbadeacd406fb9c198b5aed2105ee935620ae6859f95e6abf23df6575bd944192ac01bda723393a447f840cb03f1d22397b176573ede7fac1926d4be58ce560396cbbc1313ae4ec9421541a0a8fc4ed4888b11223aa2a4d5bff378bc6986a6d0b2eb02e039a84f4fa5c79ba4abfa29c87fd81ff90399f0599fb39bb2c1db05e12a586f72b45bec7ded7ff1a6df7183afeac17a58a4a5c592dc24ca565739209d545d986a4f0be68222ef47cfb3eab8e3e221ad9c7363afdd89b798e15751942a7b041b752720e5c3c1b9582989c8f566743a6c8c50c81d7734e816f6387ec52f9869d41a7a201fbf21c9d1c7136e1c14843123a728d5f2e07a515f28f58786ca7795a83b79a208835042b73523ad3c58be97a82fc08c35259d839a72a73464e885e9472fb1bd863932f0d42652d6c1dda98bbefd45d2e30d66bfd4fbe837df25dce010c7e94a2b8105d427ea82b87ccd588cc6c08efd1f78b2c8e89a5e0bde616fac690804d98ab60b7e909f349378b9abe0041945f2adcc798a2a05f97c4c29665fa8857b7b120d85152eca7de0aa8c9b695ef277793148c299906bc7ad0a7062d8fc6ec43572c073e32f3b1a73617173314fd27796b4a52779a008d3f1b5ffb488db6a201b10e49313f5ffe72763596a84419a0bd6bc0b48e5177346683bf1386e20f729fd2d910eb46e29cc806b328b16f3611fb393cc968e8e1361cfb6558117f21745488441b97ebb25575eedc814c6f8449088817efb79d44abc4310bf3dd8cdc4ba7267229a0be096b1c71b29f8870e7b6ae4106143e3df060234131da2484533829785ba6becd8687df0e72dfbfb0ea675b4d106072ab8fe0887e664aa1306f1b4afd54f38669eae4a329d583910e29e8df4433e48ebcb3855387730bead747efe937b8fa4623b507ddfe1f9a97c393b12e01a9bbc4f6de0ce5909f3d6f3bf3c689c6414d73655518418831fc9aef7be07bce626f2552a241a493b84917f7891bc3a9fa7a91611c493466082e794dc130118c73cbf38e75f4d4607a6171eb9920afc176092a4b4da5ca7010c19570a6ba2732f42ef50b2fd8739566f947f44f3fe360d1961a5d9466b1e65d69e5c36d8fe00e1bb31b788fe0d77acd88123c37165d5c2636aab056e6bcd42ab00754009477e2bca31341869e604e43663cd5b29396737c3764f0a5204e8460bf2185a5e615b023ebfd8b38200382cf254202dcb741680d611538c7408171d389f0bd93c4d91c75cb70117e4ac0c70eff78980b9ef228e92cfb5b799246c983178732504d22a5db52255a8fe49acab1d574a8f93bd1248b1dc568cfc883b9f27745a3f29a16107b312c1e49ac1d9291f57c4a6c7b1006e94dab76fc530a39687d1070599a1812caa5ec12ed9d8f5d8505c3ab56ceb2f54cfd42f8315720e1af052a5712ce10799e1a09a8e8968405ce60d501181c7f902b19dfdf444dae9196a932063fef071e899216dfa4dda3d86da36ced84e75cf69f0dbae56ad0117d5572c2cd7a3aaecc834983624b2b8274d43ea554b4cecec89d0f2adeb80aed7929a080abba2e0c046980282916211c6addfa42b9d674a75530fc005915efce0a4d66eda5dd9565a65e4d9c3dadddfbf1285a885abbe7b9bc58a3746ec7c62a8cfe54b4ea5f077d1175fa95646e8a02dd1e2d4a64fe0a2b90b83d1b6444d4466ed38baed09790aa0cbba08430e65d5e1a8734d11ecab8f2121a74f6481683620d18065d2736c9217caa9d5122347479c62d1cdc69799f87990914d0401c60055dbf90c4842e5dc7c9f6116e9f872c4606c668ae6b7782177b77976c6a712aee55d8cc28b5ec31d207c5a37a1be5aaf42f18477316d0fd174ed04dd663957f2ff217ad5b47732913c7f32e5d5a62c0b4940e2cf0e990296db577d874cdd8b62f556cb11da4694a2a8fd7777afda9c0d7493004c6b6fbf98427610b7aacec494f10558bd0ecb9694e2f227f8b0dd4d66939f9cfb10821f12327ddbf89cbd05eddc59d35b070d45ed0228cf19377a1a3f93137d63f9f9769d4ea829fc4077fd92afaab2201573301156cd1bf729463e7b63082f1dd88d3a87e41262c2b6c1b717a2b4a8b452347bd4c75e878f7e98710fca41a8cbd6dcf079716279ef0acdc2666057776d3a113c4b9cc7951806355b725cdc8554b4b83df81d0dc16d70cb8757eb38445395ab0a2ee7ff8d1e2bc9c53a4d8a96c35c3fdf50d4dcb0d6652ef3bf2379d8436df90603dcc870f9ecc750642b3f975699fa550cf64f825f742766f797ee946ba89ff2a26b683b80ff3c335406b26844cc17df1f51a0efa1cce7eb46564633d28af0f3eaef1e32baa3a32894110526329a202274a84b8ca78c9f8650fe99bbcfa78536ac3efb7959d525c8c8f4c195f760907798f6904b5dc3ac7407237cd21eaf22ef8c96cf64854b1167745cabc3f7e7d79a60cc4fc5c04caf34e36e22357f224efa41f0b02954e1314ee2b931aae10fde39490f732948c02aaaa36625636c407a4ea5022da3df44f742e0dff78638d55873b15ac18359663dda19b0f3114100ebe437a3a87f6cd3f19b23e31f7deea963473540a4845cb2b11c2ea0952184b948c6b99605ea1c211fc2cb8c9f84de8e43b2b3fc414ff34663142aebc7083e3bd9be046a5e3252ca77cc4054845aaacf72b4b6f922ad908ca18fccea501de156f04dc4c87277a4f7e13422045086f289be16005573434ad0fb8e84bfe821a7679c4cff75944d438429c22b23a2fe010c4aec2e7eceb15fb3cc05856a4fe1bd23a4be4dd66c7e74aa8c3ac338e5a490f70b64455f09e58c7d633b3b79d2ea259726dec88a172946d531d3d391ede953892ee0f512b3abe09c4eca9850c49f42d3579bfc5605a9333ea9519312e4040933006402d3114116fdbd304527d6de0783267f2dc818f93463b17902fe6ee4ee986a2aff048e64268b6af198c200981e4c39a8a14fcc1ff5d6df2fce9c83aa527fbf797d62efd37e7afa99a9a5a32ea564847beb56bcfda891bdeee790544eac3aeb44ab3c7da93009dbc2bb0abe78d0c1bd7bb508839b25dd1c764d653c5e5653de684906a37408b054503b40416c877c7e86cce2b356eecabadee1f2e6d1afcecddd9b61c9fe033fa4892e374eafcc1a26b8a2fe874e789f344a5451864e76a04df22a5e998adf383686e05208469bb9650662bb31e5524778156f41a4341e91a70d86b576f8ae634426eefc78fa132830656e31095d324477d76b4973b76b08b766727f6083f92b177ef8168a6081a6d699194adcb20abe76d5c24279f6699ac183230c53ed1db2a45ba80963bb78ea04f7a1300e76cb5818300b77273b3836d8730737af8cd16f749af36b7a194d3aa413db9e584dc1a38a96deecfcf227646e3a85001d4987bb36448c315049925b9998c21b25334463d8fc3b9306e87d6485de754ecfd0bcdcf1334340a098c23a0d45413ebd6b7e8854dfb62e9147024c2d865143e5e288e679c0d011bef800e11dea94910c116accdbe3b6995d5f633e6b2cee58278ab7163c160686e4f417c0bb515bda7f06bbaa6caeee62ccf16a0dd3042168614cde156908fcbc968f88c0aa069d08ec797ca85656c6c6ef2f0c1e5f102d542e33a80ee978537504e83d14b01864f8d2e856bb007a5a3412721765581f3ca8d53a8b20609cb50f6134e36c403dfdf1091c6188aa6632c5210701509b4d62fe76d00b53cb45a8b7db60962e4af40d9579fdfb9c5e0e25ee4e02d73bda4f035ab5c495550da2b3b52c2998fbf886577d33c41ded7733004477219d1d1b0e5bec33fdb4af2e4b3886b44f95b373c798abd7e6be3b0665beb998a5642937cf65884f134ff8aba241695a6bd05d4293c30dd2766f6e88bca9da0f08cd4066e6b9164dbebf324abfcd60f0948ac63c553919fe9978c18dc1758b9e12c84eedc5c8de571f96d0cd71254938269d4f8449a0631176514da08c1e04aabad7791c2f8fe6b17fd09e3ce02f258e4ffc46efc4eca12a8239f5672590f453954158f455969d6c12bffcb695efbdfa9033a2c79952ef577969c0dfa83372a99c32f1550d6f0dc25fd0e9d3f83ccacb84bee974f8d6d9bb47d17719fdbdb3c30178178ec6a6a4c8a8f9f9ba1a44945045f07ffd65ac7389a93fab2f82e68a4d644bfae0854adceeaf3f4c3b91876bee1bdd0f0bfc049fb4a70c22f6b57e93d6b4ece4389cc1dc160c57d17e53bfe77071699e4efc2c80d403957d629cfc43f91e4185991953467691b07abbfa8705704706c5a7dc33ee16945a6f9dfbcfdd92d92e57848750fc332c55c86b4eec97442ab27662dc45276fcfef0cdbb9c5e14c2c5d2022ad1c0a3721d98f10b2c0f86452c516cfe58bbef66d15b6a0cf52420c7cd3703ac72a39b9671b6b15954c683744eb6b50007575aad858b1a185a236bd3e933ec4157f9183b619a69bbcfe1ec103b36595d6faba3216fd2be84e89c691544e8e00d65bf68387a03d16decde200b788357368ada7505fe77bd482f7f3f50b6ee0d89bf5a05389e06e14a5c4742dd5910bc603764827809867957604c55b1c8e668733bd3fbaf7966a98d5aac4aa646ce566cfa067a4e8acaa4baa630f5efd3c65983c61fdfe86de915edca18a78a4a73478c8dfb4524e3111d0163c2cc4449564502fa15d7da358a777d0dff4acdd757544d15c41b59f76a19b755f934c00489536c5d0db8976c883334e13b6dcd130122d202ad805a171c4ab1fd60527e41263fa14bdb777c547b8f3629f57f5e37f246e2fd7e778e30aea057dd310217a1604bee791c2ada0f085a880f8340c657ba738c6d70723e7aaad223cfa040874b5b7c80f44e1040c511bb0c4186c430c2a6d54df6027875cc125f9362a2129373dbf1f0569d67e179e622922752ab4951d2596fc770fb181bfd006e44ca966d84a2a5e93d627c0a9330b923049fc41eafaab6bc1194621c79a02b0590e0787751691ef764947d24d905b0524ad8b039d24d51ff80114c5b770108cd855ba9bd72dbada4947242b23eb515bbfd2b4ef18adde27c25afb56d2ea8001c87b7a0ab5ed7704f5a2df7bb5070b3848a8c454426d15380b18a691babf8ec9738ea6e9acc4f8426cfa24309f152a22c22602d025978ab37ce1011ab5bec7b389402333281d8634461373106c3871df76692c07048e43e74957c709ae8527452d3608b15c6007a30a11f48960c77fe3a3ab5e5d6fe1ebf147b4dd9d3713fa22f36ce6780a9daccd7a0349fd5cd8caf80c4fe23414cebf9b648891c39262a8b5cada965aca23f27e1908a75f129a068d4d7a29b42f473361ad6100cf188534d327427571946493f149085aa2f2dadb89c146fa68cb8fc23e10d23793e5f3499906a881f278f093bd2b34b39ee1d43cf91f13af4baf1de73abdaaacfeab2042345f455f84cc4d7c4b9aebd87f193154f141dcb3ba901f611aee1ab527b8786cdd8dc1cb6c262884e11348c2b14d90f62eb8c170019d2f49b55efff4eaffadf1ecc284978367d77ef63fc8e6477495549d662b742b1155840f666dade4e3532869b9b9d720811e529756934836edb1acc6405dcdddfd82de63d0e58ac60bf2f93592bb1678b35711ce1bdc63f4abb472df3e75a457cb0fe86dd5ded7cc7e2fa0e9c6130650597dec47753590d557f685d31d2051e4f51e7a9be41acc6c23cebd9b2ce273e4a5729d72182b8475a8179818138387eac99f2a7c86312e36efe71905e5bbb7d072d87dafbf2dc6cdf12a20552d41391f3a2319f351161a738487aff5a545460f23fdefec8830a5a640028b74012af19c77ec44537ab4d0fae73ad875f83d1594545bc66a8e4203f67bc4b59ad7b085fb84ec97bdb8a419545468fba0898cc4c040d41ef35ae78e2e32e79b3d7af8107078b3da295fd6c6ee924cdbba8748656b9007f6bf1358cca7984e414efa4b881effca1f19b3b26a2f43cd59bf1aacbf70780dc12ab5ad2abf52c28894d1c1596cc23bf67a2e76e6e8dc90b02e8eacbe4f675adc28dca4dab00ebda2d42695efd1d342c03e65c351742850d32f98da91dd78764ca9113079d535c29b90156e66bc92110258d400f259d86dbd3e8192ec28e9916f35b5bf1e5938ef8248508dc7b0d63fe1cacb150a223f987b57f97995f696666163f96325832882183028fb4206f12f384a517d5feebf9ef4ed7117062c5c67bfb8805eae6aaf5437c8eb1ab81fed39bd63cc5a3b8fd75e2643178ade041c2ba78cff765b1e3938dd08fd2fe0597f853e19f9f5faf365710d96fd94ffc2fda7feec2d0c85a32b6b801372371893a24c134f0098875c1a76ec1e51436297f1abf342b78faa738f51909c3acc41456fe76ba8d6a58d601a2693507bd6fda9a5d4e9111f6f2a0c61fe58e27fa2d4cee21f58e4d0860356865500847ad7aed9f7ba924a0fc90a10386537fe1bb51abe1f8c4657251ca99f31c2fefa1692b9a3786593f8ed4b4f24ede27be226cc1bd400f4185c9373381e0d499ee9a6d838fd176afbedc744d041b7196a748b94718ab589b2e72d4073938550aad57df50ab1d1e948e2e27199f86ee09ce86176595720296a829526ec2af265ac8ac8ead41cb643efb221051e34cc7af48b4e8af58661f68b9a4c3729322cc4d117e84651139a7dce6ba7e634544f240251097e921264dea69769e719e377b8a55d33044618fc160c38e650ed9041576a75ac7df86dd06871fb0fe3dec3902e45fd750d739969ab31a2925b8c9c2f0d828a7207ef3ed3492355cc40c80e7c2dec9ec7bd5619da9540ce87bac151293747c69609c62f48ac4f6977e4ba69d6216676afbff382104e57def8842f187549fdf5465310bd12ec638daba8981fa337ac561c0f5f28d9c5150e13103e080f08f0fb63ebf891e579fec66933a1a537b997f38967eb9b67aeffd49960c26eef55773880f32654c258d82ef52320e76772f22f9060fe55148c370acd19ebbd2d776ad86a1af9b20589e8f061bd3b43396d421b6d4237ed56a4e2a01046bbf2cddcef3f95e60f2d61507beed96f57dc7a0343b704554a884007b5d3afbd4249ed4c39fd376e3ffbe2ca20796112f2fb8cdbba7acb8285151044462bd3da771f599c124c4abe8432298cd6b9f4e64931ae8aff0b3e941b2b948c205c981b588f7f779741bcd59e6457e0dda04ac2f1c47e1978f46097183aa84bba59bb9e12f437b2dde65ce0e62ce9bb25fc160b2ee6695ac268d095c1808450161a68d3cf8f7a53b2c5d861209c383f19bbbacf06d9e5d84cba065a5e59d3359df7016b35adcabba14d5094418069b99f426ba16fdd7c37f01f3a53ab9913ee40ddc45c5325ea94faa53058ca7deab529196d3d7aad58c2828287e6429b2d63b55ab0a6c0ccc52ac6d551ee9c7e7e5b4e02861e56097de96806f86a291ccd0a03082d266d127ce2ab58e2b2b4d5f25a13306560782c23ecf6843499d07b493480511c40e1c0713e804a501493f64ed3034d1d4bbadf2bacb9ee539e44638980a734a287ac23f09e8921004f67f556ffe415340b0fe182ceebab0f0d90a2152e7cdf5f5a4c888d1c2bced5891efbe0f424f0e9c4765128949cfc6a44265098ff3aa5e4a4682a360705e7ae7e52e9d3b3c6abcc439633e16815cf8672338aef9611be8937292273336cbdf92879696874d73ff3b1e3894d3167f2031ded5f2a8b1d40b962d1942e8197f6c1ad6a030f781909f0ee5e14b51c42484d16ea60e090e51fb366227b49c167c6dd4dbe63703e353acb21143c79bbcfbb8a4ccc19abe292ced8edcca71ddc1f42cd926c8e5da1f38d12437cb6cb293fc677f16728d040d66b824bb57b628902632dccc8a008a57cc2448ec9cf42bf52742dec9751398c775d0f091e86a5c2e53f776402955c0b03690e3dc18d7cbb5dd170d05a9ebe6e7dbcccf88b485359c935badfb0c90c9981fd75fd9cd09b3c5c2f0d2c4b9f653026050e2c30e573c7694651c30b312cd2f303948f74cae8ef38bbc2f0a5cebeaf58a3884ed926aa89e347f77cf2ffecb1598b7599147ddc448e3cf0b1eedd4f08209b61a172572a285d1b59e355b5bc4de0217d292f4b95931481ef1863aba954e39f096b0b471475862622e00eea1d4089ac07cb403f7a25c7e972a33650d01427a7e9a2ed682e33689a247b97c5add9a1d59676a75a987ca6289fafd9b4b34bc34c59ce962ee7670d25f414aa52d4cdcad413f003f838dd2487d22f4977b1d2d78be7789ec57ea97c27c78bcb1aecb0e1873cd3668517612a18a8c83b3274107a1fdfa188f82b8902f92ec22aa9eb3c123e1d985a9b7df628e366869b148a7f97e06dc27dad9657c2664225c8868a539f193d2b0865ea44881fc3731c6d49df3f555b71f25de3b500de4a5a29c0ea39aa8b0866163933d68a3c3da8b95843fdee9365f217fb2cf9da85dac79c1239821c0fe803cafe602a9b5bb46bc65faa24bfccbcadacc36d523e1983d214575bc9ab020e60177eab1d000a2b33941d4d28cedccd57b0fa0fecb054deb7b9102551d7e41623145570d269a112c7a804bccc735949bffc59ff86ed88be3a2c0fb1754edf53c70128af19580b915782644ef9c5799949a9a3183e68bb2662fc08e64146337653a1d40633a3adf79146d1430dc9e494d1d1ff2aa829d969791028727af0943baeabcc80defaab7097616f8729195e05b17aeb2bc7533cdcd7aa8cae18fc79ca89e78b589838884c6dee45089d5adb61b34cb06604844b9d9875d6a3718f82af0390616a956974e45eaf0646ea5fc6117dbafd760db5a6f4cc00cc7ca86277fc991e0863508eb6ac9485c69a64d3804a27d57959f51336619810433bca5c78653e1fd5ad4f6be9ff829b56e23dece259e1352793f63a03e691da6186ba240f4d7f8920231dd298a716fb3adbeee6685cf768aef22ab9e6ac4c2ea1f860905c7728d6afc8d1c702f38339e56de9eb983a73f62b25c0c1931ce146168db4d5a8026f7405ea6f9b533d1af69ae094733da8db0343bf64aff90fed6793f9dc7332bee6dfb69696474955c1e6c393f7b2949f12f76bc57ead63534638f9a8ac51eddf871931d1e8c999f21fc7880398d91c52464a308227ff70470fd0c1df2d7e06abb5eca001a91faf8d52a7e9a97b5f4fc1a86004207805cb74536f928ed29fffffc90346811a4eb441b71c5994ec827bd4cb4841ecd438c4b2cd8d4afac11c72ddb2e7be1477a98d1a9a68cb2e8a0c917c04890476c5dcdab38c6bad4e9b145900e3d1fb8a76bbb4aae93e91ee7b3162c24cf54c83d44158affbf2e9438e2be588c42f2931de1ed09e71eade6d67616860bc829caa3273ae96ba144ebaac6230c93907c57e5318c1a88c2c3b7051e36b83798ca7675f3e16be48d9640c44ccadf984fe48c557a431a12ae3bf80c9c6dfa302a4f1281da3044b164bd40835f977e76712f9a40c506d9d7cc17bd4166b05ddb5d6f85e5e28d2a9043e17144c8839cb0be565bee7df665ac837b9307127df20a35c45bb041a63781ab9438d009cf5306384e19e4c05ce255f12a5c3ef11a706cb65dc3051c6325c9b48118a925546990de023fc99aaaedf96b0ae72d1022720bdcb6b420c5558a7078e37bdad576244c7c7a7096a6f461ffe3f5a49544d2828dbe792d23bfbbb31eca61c5cf1f2a0cbaa03b5601a33b2bf61ed79f094d4e83df50222da645175a015a58ce548b130f8854c2d28f350846605bcd39014f0fb7e8385f68ef99fa9af0e5c5b39a883f98d713b9b5f65afd373918de4cbbf8a729b4fd74023dd3fa29ade2dda66d8c2192bfc5995ee4929c4b4715d78b17d4221e388dbc744e11fad181bc2ca3bea21defcfd7102ca97e3956e4618e6aa79ffd87e6ee425263b1e3c4345e459452a100f4c15286f6f13d85d67bd99363d74baca018e2a4f548e9c490e71e046fc4ab5958858f27edf029c4936fb7f8fc28304f93c79cd97726520ab9a0efdd4992cb5b05b77851340ef3c70f4fe1de12e9239c48a6a76718710424d3767da01f97c50a491aa018b27fab0f12320132dcf246b5d4516aedec0ca361a11463a23abb3ef8fabd17b9dec021e90d0fcfeeed662fd4da0782252bff66d1072946fee1cafe7e18659a1f042e8d9d14ef06c9b4bbcdf0ea2a04cc469843cbc3dda39bfcc321b032f3ad07b186fc96697e40c706204d2e02539a52625416cf1cd9cb3a9442547b0eabe53022bca298bb4821dcdb92902e92b7e4a0e5cbee0f90107d9efa8044acce72cff546683c9cd9af607031f22b2feb605b1f5a820647504f7e7e7ac8014fa32bd8ec0a1a193ef9b3750fe6129e7eb015962587592df00a7b87e5021cd927164a253244e5244accd2a9c7b1f337a94620e224535de35f574e1cb9557108cef3e4b65c3b99a03fab30d7099cea0dc3bc1508cfe492cfee726e891c9b71c757311e71778be7748ad1cbed5c2baee2986fee52f6cc3d6571daacc0ddc31e042d300aef94da6728ce6c89991f10188431f42324929d00dd67dfe024e74eefe2115292f7edb084c6cb06c2a151128b7a830358deccd993caa1f0f53a390bb3840d95cb6b5b3709504b8897444470297528e85b5e4266611e77be04605331d7217aeb326f72416c1b054d72869156d7ee7def05246ce87d05e46f7f77113d2cd218564b61c54b8a5c36edc8f2f342f890d7a0c20cf19db2350612608bc4ea1f5cf75c9a35e3992396fb46858a8d376564d966f7ec6b8be33404767897f9bab4babf7ef73244b8dde1ddaa0c962c6fc84f79df5cd1e1c7097774ce0f9ecd93241b131922870d3d45dbfada65ed12ab0b217fed1ceae359034a8468a978815f46154f0c4e9ea5a84182864e02847d9d7d7a7768a5a8c57f32070c8a741f2ae91ca8eff29fb92194a7a11cb46eb2449591dee819019ef9bd311d4e19af036d310f163f76fb086040e85631a212309226a64b705cc29c75055296407c6353f438c87242af0d6468f3d34e3b4826a15523a616d88189cbd3deeb93c807e85f4111bd87ce4c3b8f7a2b15781f8ace93b062e4063639caa3e70d210d98b0d468127a8e8a129e163c131c4da06da6658259854cea3d6f5b64b346aebb5681039d40dde2228716a07e762f54cdda4a2dc9295e2e1b6459ffc52cdf608b6226c993c89cc9883774bb0b87f15cd1cc7f1f15717ab1266127fabb041913ef7f9c403535799421bb77a9bf40bc37a96aae5bd072039147f5aa387291d2c56c8d963c5f178884ddeb9bffeb1f750418bc05f492e2efdf861f7dae829736f9327d1a371346730e86cd26837e46415382334216edb8ae74a2c21d87bb5049bb8f42faca6da43e6ff39a7d06fe498be88f8880946bbdd79b6dc8c1eb89f1292604b20cdd7a6b089e159978dec50f14600b06244368aeec8f300aa3cb15833d89e4f5cbff2a47857a237f185a24cbd7a89bfe13b7224dabeb1f8c892bb9fdcf2a4c38b6b091f0f97d44422714116c5ec918e8597501e7436f6c3c16c4daa31503c4426ce52205a9a502f87643580e90310d1f103cfdd2cda7db607fa2b3e3f0f66522a80866aa2dd18c60bcf5d62cd43468731e3de9044faf5499e3654e4b0f98c2e2e8e11e0f060116c7a01ac3288340c07c36d693bfa6b34725894c069769fd062aef8f07009f84cacdf1bd605f724665ba15453b415cc39b545cde93d64168d7be41e5e97d2536d4cd404b16acf9952ab91566b410046566c40b233e2ca0497a9a17c6ab7a98ebcc7f90e08f1e8394c6986bdb4bc7355a0f06ff10322b03b03b2cae573218893c6ea9642243bb8c344fbb7bb74fe7a82cdc5e49b2c334fce09d415a013b02e48e9a121acc6c8a3ce76117043865690a55b764eca7039f21ed43eb684a07494f6b38a29bd15f85f5f198364f94c7f596729126a642c7b5aa69d8f40b68178c24e911de42a931e911dd5ef0f378b5ac5b3c2b6dcd4d62639f60555141005bdb1c94904a817326540bf0148badcd01a1c57207ae1ba67ab013dc470ef2108bde2c7e8e92f5af27fcd5747838d4e0d00d0e10667950170e03ced2845ceda46e071c712e4de26d2b48b201ed3266399c90d4836b8a32dd9ca9c4678dd7f08eb5541e9b6e75290f7e3d5d8f786dfd3d6cb25f9235cf1cb518745d462160db27d9c4bec3c818842a32317972cf574a54a66500df68855ec91775a1aeff89d34c2d8eef26db118f88ed0a6f13da5938949e8113b8737b47166d505e3990f7b5f7c7b1856c18fae26b7574933ab7631fbe0996571cb2d2806b59698d3c1c895ad1da9dcb5b7abe762384b206c788f3e09c9cf37091d8c738382beb8500af43764eee60824a472c2250148f6dc044b0b50614a6ca6c338db2a3cc195cf3815693e022edca231935ed588c4ee35f7e18c447eb0e369d139cc5496d193930880223650772e3bccd728ad30e5777c42ebb4aa64d2117db2c67ddba2257d1921e2b0525551ea2dc7d7d3a9d4563bbfac81cbe7d9e0c768d7074c1284e75e626f85524636ca9d989b1c5040689c49211a41dab5eb06f148154572fc3d651613eabc7dd91ffd721b42b864c5df763e0ef522e65dd4316004e141e098b6d90a00b361960bf64181b524e27531aca69cafc9a5e38ac3ddb4e3cec1040693634dc3c0ad2392693af725b96ee29ef8c26c0b95b12ea771b8bc67f551a4271bd78ee5c63b0127aba2585d72028cfec139aa2b8e753ec3b69e744dc7c14991f7718e53e4a851c784496d6e04b100c0cc32ba5dee31e05cee9a8afcbc9b54d75eab7315700af9391de00fb560543c2be13ac978a566ebbc04b24aab6a3251b3680a4732473ba192099ccd7a382e54aaeb740efe9e7b8ae9449035bf4d7265921fed5132ac3dc8d697603e342e5ab1bb8e447441b43fb28c8889344868b98582bf9bbe6c0e0336292efced8424b7604ac48c5c2a91b5adc2e47050e41af356efb7ddb1e4a76030ab84eff75bd9960f348e5bc4c2453a96317a602702863a482f5eec866c7a787fb86571d91787e2776f1acee9b1322d41ce67966a8a12e4cb6ed15f807fb09820175e5f8f67499e7aff9409b53695c9c9e41309e4b19e4926c1f4eff3b155c94d1f11f679f14556d1ca602b983c914697d5c9a4c1028758fd0066c274bad793d3eabefa7b382c6a8e783cb0f0cd8025abec37804d02e24b6c4f9fff1c4f82193f0483c3b4060c288d2c848506106eb73b41e6b26e33f0f8b9a018224ab9be580de7207da311fa2040bf081aaf2752e2d990e1dc2d09de60f848f55a4ba36537054e09bcec01262460a8968353dd27959cbc776350b469bed300e70b8bc49cc05ee8edc4bb22fbc2c0d5f621ea12aee030fbcfdd9a01cf7e7b07ad79072c36ad166ef456a42825b0acc1abbbb3b20bb3a4d9010e47da46d63a1ccccac2d0021719a47d0606b2cc72ce129df1c74d2a4a95648205a991f39ce1eeee3915fbea0920c4b35829f8a2ca0410cc983dab7e6883c68f77596647414526c3b3229562c862ea00065e14a8c1f85e610bbe7ae30850ede898caf2f205ce34fe53d2b8d606c3b2f734d37a3af7c54362355750546fd5144eb33734365291477103bd65bae866ee8da4967a1275d0926a24a8466fdb3ecac7f0e1ccc6460718adb486b41867908d99a074593855303d1f2b000882f0e9134b753455cf98d1bf8408e088f0303f96337919997509e70d418e761c5362d8d2307582e8f1359db9322da47dce80088c591a13d05153e4be263386340406e6aaefb0167943fa84c6a429a5a9647472db900e9adb193fb62db58467aa04bf9c6980da71f4b8bc96694f7bcd3232f34fe2e7e245df203e79341fa53efd1b2fb520a1eea2e48793b66d6e0c64578184df6da597fdaedfb54485d46231c2b453c359119086e6ac1d04943d2f2faf0cd4fc039e44e498adc9d0bca411cafd0f0bacac0c2117c238b17553fc28d9f97de36adcb8a853c2b5af76eff9e79edaf7e2bc3aba3108cdff82a1e6a497e3b85590581f1e9fad1bd63c5d4f9a11df333a95ea758344fe5a14721105323c19f9ccf865689bce92a6c25db09eb1dae71902280037bf460eb34f909fbf9db8a77f0511b402e88b3a6d317f37690354fd6654802dfa66970c4ec11325ae65573d5839d58760debf09cf066c4845bb8b10aaacc62d85c247cd6c12020371d0511a1e6050e50b16b012d33e4ff3ea61269e6ead0b888fa79a05ccd852e477609f11161695bbcbdfa544294faf52b2442b1074401396f16a8a128683f0ec1c7b7cb821367c9e05d7b213fcaaf64889e970d0d083fdd6f21d2a9751f7066ff78773693c3fb87c80b3bb20725de18cc4b004f98c60d876c18cc8ad8c529d1f5a58bc078e85103b839318d77e57473ac95343bd5b18fa95e88146728fec0503f8d31e6e8334aeee72083dcaaf8be53d67c54b428944c6c6f6c17d73b1ca27870edc52a29533d09dc0c6b821827c1a3e5a6c5dd353eae7db2b422249780bba6d2f353337e1444164779d9361f12a389e4c4017ed0eb6c7e90a9e367c2edef714509da891f02e3a1701e04c4111f41b72b4eb0db317dbc942244dfb6fa30c6ff99550194b3841390349613841532d9a4d2fe3c9b122cb6f8ac250206e88e93d51336bedd66c880a2f579f7dc7445c640e50d1aa15b3e73eaeacdac8021c281c73ddbba894d07796eb839398ec2c3bbdc3292d824e5513b36712d964e3bd60dc7ea67d6e7228ec5278fc908c4184f532f1f8e53a60bfeecc78e428a81f13fbfae69c41c3ccf7db76a41520242fa71eb5f94cfed5c9736391f7e9be94e480eed920d489a058f4b68582fadce68cf721a57110aefeadaf635a045ea4cbe437fea5b67d140010bad43975e8f075c42fa63d21cd8da4441b7c825158f2ec679f8fb19bbfcba20d783d0af5446e9aa5b0ce1c127655ff396d59fbd3a14d61d39b950ee7aa10676bf82b9bbffd96f1bb183a99c51ec7a5f86af99a5ceb0b39682c94accdfb6fb896331d1e29c88bd094dc7c125bc23edb3dc49a4aee3c547453db05bcba561fa043aa02f1b2a27c00515fdd6ce1b10c66db1d29a6e117b0d8a3d4a0ff8ee73f43c202661e4f277c15fe888a50ad05225cba97a3909f8b73fdfa36759cb29a47f043406a156eb2c13e4a6eef54ffd0467ad09f9dd4435b4b0a0a1acd3dafff06ee16133ce793e49026785b6b34ceded071efb86f4c5d49d4d65914cf59af25cd48736b2978c2907b2f36b58001697f3250d738129399cec9315bc1aa3dc86b0413293d9458ca3cad1e032fb9e1c359c1a48c031b777b2485b4f2f92d153f20376e2fe95a4a25ceb7deb7237c6975dea640fe6cacd33aff1cb003cd74a946d7cbda292cdf3b5b90deabbac45c7802ad3ad0c414462c7cdf218e3b6b5817ad9da08f493395d91fb10d1ab1a5d192e8470b105f4b2ca22a221df271e168a3281b132e12b45e6619fda6478a9a8ab5009255f0969aff1c516197648abd46df10c9b21a1a2b1c2416a26a55851ec3d092a6f4e7b2bcc7c633d7e72899f491a3af52f858334c002241e03b5f75ddd7af9fe4785157e960a0aafc7258ecc82ab07f0d3301892ffc87fd223cd8867f2d9242f4b4afdfd47bee6c58adaabec170f2c27c6508d7274b83e8eee72664d9955964e28e4c322bfc3c6fad9a76633e174fd1fc1044bba5333e6ffa0de58533c89b7c02fbaf3cc9b754dc1eb460494fa6d3f9776d02698cfea2f23b4226cd895374a3b74d568a1567bbd56b86dd8278e9bbbf9e670c504b2632ee9f0d5d361deb7f994856a10132e8a3ed9d3a3c6346fba3a648294dde40a274a9ca1a57f59cf0237b54317a329f1d1d782201be196ed90ac81d6dff1ac55d1a44ef59dba85aa4c029ec59b92a9dc9d555cc677b85790b2afb369ee132a022c93f64b5b97623eedd4c83463c5af84dfd865f76e59269a49fe267e505ac9fdbf603aed93474be64f4d467a9639f48b426012cd47d0dbaf7e09926badf6fa7100ab228ec9efe964596a46ee5e7e67d175f67e2ea81ffe412d64b591f80b2bfe1a8afb307c790091ae5502b03634e4a71963edab799ebdeb3e15e5f36f03c216389165f720a2516964017cedd01d5fd3615f62a5d261465fe899a12aaa557961c7414579dafc8522c93a809f11dad7122bc5c96fb7463b6b006371b1d7ae6f364efc0b6e508c219f63d4dc59c6b65e12b25a6ee139e757699556d4958a5b997f59dbadcef3f2093a5820610bebb3c0b1739d44fd84df6e9d47e30323cc04510b9b92ce14a9a1c49c0afe6d319d1f73790002dddd702bedf816357016e915c5489e1549c881a6123ba71d857e4bb667e7d753dd78768583844c4b22e80d8eff3875a8c53f2d2c4f8cfdedbf09b10e84017321c4a5100b1681ddb0bfc345e6ae51e8b2294c70e59770264ef9ab062f590205c8dbc4bd664daad457a948359f1c18eac245274a14b76a566f263562a43ba05da9a4f1cebf0d39fc32774ef3acea723a7379408c05aca06afc76e16501f958b67cceb6a5fa191a5ca5c505a77953e99c6dd83f7c34b4682d92850c96f64f3cf4c75a2cb82b77cfa3f4a2c591387635f256e720cf68f03a307b9bd6dee025cb7a5c8986c306c1ef6161d210af3250bd0142f43633a935054b5c341f9c0ef87387dcd9d3cecd566f0ddd9e794001e4287ebaa932645ffe579e72d328c60964a021d959eb2acc8f2479a36320193c0f78104b7e545a75e3a67d8ca7203cab59888a9f9a47a25d39b5971d77bbfe3f7ab1759f43570c3a745fab06594dfc15a1eef73f386103a5cc6268cf05efcda0dfaed6e21d7a3756289481f2e88c7fb4b6eab030076038ead2e384f76b715a32392fa30f643d0d160972ff87101bd54e6a29cb52d7f44c235b036f7e1726326c770499efbe6f8b201f8a6af11813617ed38c6074a9defa7f0b7feec02e83d31657f80747d47c25bf333334b05f456d51f094330fc50f972ae824870842deb89aa0bc7289054888248c1fa0adbfc54994da0c2116380435d5642f80e219ba39fe88a2cc4c822d17be4a7de63b9f7a939ac8613c4940e7d4fdc435f6fb968bc1b1c2bd2e14a35e5a46a1d5e78a67298b3838646afedb3f4717616097c91d9d166ee58cb8462e08f8dc086d63a3184a1c26076f5589f4d293b3ceba733f21611e2516da767daa6b16da921cda0b2f2a6d833b66657bbe456b99338a3c3812e5a31a0b7000d7392988496d549ef36efabb5244c899a4e0080ca4b1ba80dcf323f931e2dd2408ec676944a4eab38104b622b8a6b585581dce4edb6536f9cbcecd63b2e2521b0309a93a629cf44c9b21339f9b3b15b22d9bafcd15cd918818c57f5fba3b115c37896a307474810e4f25e336867032cc08ba8fcf278f984f251efec28aadef81c72a3a76ef1a8036e36398b70132ca65eeac20b9963e286cd40f10f3619ab4c861dc14a18a4747161d2c84107a19b16733fa506af39b4524be5680655e48a6bcd4dfca0952806f477ff87fc209f5b7bcc5d16bfb21fb8f8bdb8f2aaeaa04a34b752700e8a78c8cf96dc99b7491cde8993fa357e6b986dc9926ce2f3879da15819d1eb766bb71e7a05824f50de59fff88eccf9994cfdd1fddda49ac1162ff36c6baba108b696598c4fcb0ec73d152298b0958512247f2eabb47c127e06aba73273e3b9cb6087b312bc5744c313ded52cfb936e4a553b4ac9d9f7c7066bb2f859437fbb976cf6a523d35668d4bbc0fce87fc01d71b4b51547605a459e626d47aa16c6c0e5409215629d9d0538a6c39f2e9f0c40977e962571744af3117885c17ffe9bb0a91ca5ca577c1b28549fb07a8481fb59f002a37335f2af72dc0a5f0acdc8a8e26ec5a8ca78216e15694450b4948dcc275ef270f3d596e922f9963e693c5756ce3845d45e00bd86899cdda549ff20c7c9f90f5e500331723b3acb082e9dacdb169ade68bdecb50b6ac941afb0fe51455d275a125b575faa319bd2fa65acee2362ae08353fcdf08f96c29f39dd73b57a06ba453fd81cda7f6634f817d6463dde81ea0a3ab5c5eed563a58f4840cc77a672c0175cc09f680605913f59993e97a63f88fa7726330c188b8cf7edd5eeaaa34048aabcda183f59eb550e025d9f5cf72ea1653285731a28b4e97b9a8f7a69f36447a8a7bfbf8c188c8a573bfa4bbe81126acd4189cd7365c44f725d6ae16d2ee70b5f2bd5086e9124a608a4abca3a91d1b03c3509b4decdef08a80428991a52b18681ec02631e532fd9376593495347f4dc8a3ff0528c69e3f94f877acb6427663587d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>理论四：哪些代码设计看似是面向对象，实际是面向过程的？？面向过程真的过时了吗？</title>
    <url>/2023/06/28/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9107.%E7%90%86%E8%AE%BA%E5%9B%9B%EF%BC%9A%E5%93%AA%E4%BA%9B%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1%E7%9C%8B%E4%BC%BC%E6%98%AF%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%AE%9E%E9%99%85%E6%98%AF%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E7%9A%84%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="07-理论四：哪些代码设计看似是面向对象，实际是面向过程的？"><a href="#07-理论四：哪些代码设计看似是面向对象，实际是面向过程的？" class="headerlink" title="07 理论四：哪些代码设计看似是面向对象，实际是面向过程的？"></a>07 理论四：哪些代码设计看似是面向对象，实际是面向过程的？</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306281723961.jpeg" alt="a group of people hiking up the side of a mountain"></p>
<p>在实际的开发工作中，很多同学对面向对象编程都有误解，总以为把所有代码都塞到类里，自然就是在进行面向对象编程了。实际上，这样的认识是不正确的。有时候，从表面上看似是面向对象编程风格的代码，从本质上看却是面向过程编程风格的。</p>
<h2 id="哪些代码设计看似是面向对象，实际是面向过程的？"><a href="#哪些代码设计看似是面向对象，实际是面向过程的？" class="headerlink" title="哪些代码设计看似是面向对象，实际是面向过程的？"></a>哪些代码设计看似是面向对象，实际是面向过程的？</h2><h3 id="1-滥用getter、setter方法"><a href="#1-滥用getter、setter方法" class="headerlink" title="1. 滥用getter、setter方法"></a>1. 滥用getter、setter方法</h3><p>在之前参与的项目开发中，我经常看到，有同事定义完类的属性之后，就顺手把这些属性的 getter、setter 方法都定义上。有些同事更加省事，直接用 IDE 或者 Lombok 插件（如果是 Java 项目的话）自动生成所有属性的 getter、setter 方法。</p>
<p>实际上，这样的做法我是非常不推荐的。它违反了面向对象编程的封装特性，相当于将面向对象编程风格退化成了面向过程编程风格</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCart</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> itemsCount;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">double</span> totalPrice;</span><br><span class="line">  <span class="keyword">private</span> List&lt;ShoppingCartItem&gt; items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemsCount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.itemsCount;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setItemsCount</span><span class="params">(<span class="type">int</span> itemsCount)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.itemsCount = itemsCount;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getTotalPrice</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.totalPrice;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalPrice</span><span class="params">(<span class="type">double</span> totalPrice)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.totalPrice = totalPrice;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> List&lt;ShoppingCartItem&gt; <span class="title function_">getItems</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addItem</span><span class="params">(ShoppingCartItem item)</span> &#123;</span><br><span class="line">    items.add(item);</span><br><span class="line">    itemsCount++;</span><br><span class="line">    totalPrice += item.getPrice();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...省略其他方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们先来看前两个属性，itemsCount 和 totalPrice。虽然我们将它们定义成 private 私有属性，但是提供了 public 的 getter、setter 方法，这就跟将这两个属性定义为 public 公有属性，没有什么两样了。外部可以通过 setter 方法随意地修改这两个属性的值。除此之外，任何代码都可以随意调用 setter 方法，来重新设置 itemsCount、totalPrice 属性的值，这也会导致其跟 items 属性的值不一致。</p>
<p>而面向对象封装的定义是：通过访问权限控制，隐藏内部数据，外部仅能通过类提供的有限的接口访问、修改内部数据。所以，暴露不应该暴露的 setter 方法，明显违反了面向对象的封装特性。数据没有访问权限控制，任何代码都可以随意修改它，代码就退化成了面向过程编程风格的了。</p>
<p>看完了前两个属性，我们再来看 items 这个属性。对于 items 这个属性，我们定义了它的 getter 方法和 addItem() 方法，并没有定义它的 setter 方法。这样的设计貌似看起来没有什么问题，但实际上并不是。</p>
<p>对于 itemsCount 和 totalPrice 这两个属性来说，定义一个 public 的 getter 方法，确实无伤大雅，毕竟 getter 方法不会修改数据。但是，对于 items 属性就不一样了，这是因为 items 属性的 getter 方法，返回的是一个 List集合容器。外部调用者在拿到这个容器之后，是可以操作容器内部数据的，也就是说，外部代码还是能修改 items 中的数据。比如像下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">ShoppingCart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppCart</span>();</span><br><span class="line">...</span><br><span class="line">cart.getItems().clear(); <span class="comment">// 清空购物车</span></span><br></pre></td></tr></table></figure>

<p>你可能会说，清空购物车这样的功能需求看起来合情合理啊，上面的代码没有什么不妥啊。你说得没错，需求是合理的，但是这样的代码写法，会导致 itemsCount、totalPrice、items 三者数据不一致。我们不应该将清空购物车的业务逻辑暴露给上层代码。正确的做法应该是，在 ShoppingCart 类中定义一个 clear() 方法，将清空购物车的业务逻辑封装在里面，透明地给调用者使用。ShoppingCart 类的 clear() 方法的具体代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCart</span> &#123;</span><br><span class="line">  <span class="comment">// ...省略其他代码...</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    items.clear();</span><br><span class="line">    itemsCount = <span class="number">0</span>;</span><br><span class="line">    totalPrice = <span class="number">0.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可能还会说，我有一个需求，需要查看购物车中都买了啥，那这个时候，ShoppingCart 类不得不提供 items 属性的 getter 方法了，那又该怎么办才好呢？如果你熟悉 Java 语言，那解决这个问题的方法还是挺简单的。我们可以通过 Java 提供的 Collections.unmodifiableList() 方法，让 getter 方法返回一个不可被修改的 UnmodifiableList 集合容器，而这个容器类重写了 List 容器中跟修改数据相关的方法，比如 add()、clear() 等方法。一旦我们调用这些修改数据的方法，代码就会抛出 UnsupportedOperationException 异常，这样就避免了容器中的数据被修改。具体的代码实现如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCart</span> &#123;</span><br><span class="line">  <span class="comment">// ...省略其他代码...</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;ShoppingCartItem&gt; <span class="title function_">getItems</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableList(<span class="built_in">this</span>.items);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnmodifiableList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">UnmodifiableCollection</span>&lt;E&gt;</span><br><span class="line">                          <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...省略其他代码...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ShoppingCart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCart</span>();</span><br><span class="line">List&lt;ShoppingCartItem&gt; items = cart.getItems();</span><br><span class="line">items.clear();<span class="comment">//抛出UnsupportedOperationException异常</span></span><br></pre></td></tr></table></figure>

<p>不过，这样的实现思路还是有点问题。因为当调用者通过 ShoppingCart 的 getItems() 获取到 items 之后，虽然我们没法修改容器中的数据，但我们仍然可以修改容器中每个对象（ShoppingCartItem）的数据。听起来有点绕，看看下面这几行代码你就明白了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ShoppingCart cart = new ShoppingCart();</span><br><span class="line">cart.add(new ShoppingCartItem(...));</span><br><span class="line">List&lt;ShoppingCartItem&gt; items = cart.getItems();</span><br><span class="line">ShoppingCartItem item = items.get(0);</span><br><span class="line">item.setPrice(19.0); // 这里修改了item的价格属性</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<p><strong>在设计实现类的时候，除非真的需要，否则，尽量不要给属性定义 setter 方法。除此之外，尽管 getter 方法相对 setter 方法要安全些，但是如果返回的是集合容器（比如例子中的 List 容器），也要防范集合内部数据被修改的危险。</strong></p>
<h3 id="2-滥用全局变量和全局方法"><a href="#2-滥用全局变量和全局方法" class="headerlink" title="2. 滥用全局变量和全局方法"></a>2. 滥用全局变量和全局方法</h3><p>在面向对象编程中，常见的全局变量有单例类对象、静态成员变量、常量等，常见的全局方法有静态方法。单例类对象在全局代码中只有一份，所以，它相当于一个全局变量。静态成员变量归属于类上的数据，被所有的实例化对象所共享，也相当于一定程度上的全局变量。而常量是一种非常常见的全局变量，比如一些代码中的配置参数，一般都设置为常量，放到一个 Constants 类中。静态方法一般用来操作静态变量或者外部数据。你可以联想一下我们常用的各种 Utils 类，里面的方法一般都会定义成静态方法，可以在不用创建对象的情况下，直接拿来使用。静态方法将方法与数据分离，破坏了封装特性，是典型的面向过程风格。</p>
<p>我们把程序中所有用到的常量，都集中地放到这个 Constants 类中。不过，定义一个如此大而全的 Constants 类，并不是一种很好的设计思路。为什么这么说呢？原因主要有以下几点。</p>
<p>首先，这样的设计会影响代码的可维护性。</p>
<p>其次，这样的设计还会增加代码的编译时间。</p>
<p>最后，这样的设计还会影响代码的复用性。</p>
<p>如何改进这种设计？</p>
<p>第一种是将 Constants 类拆解为功能更加单一的多个类，比如跟 MySQL 配置相关的常量，我们放到 MysqlConstants 类中；跟 Redis 配置相关的常量，我们放到 RedisConstants 类中。当然，还有一种我个人觉得更好的设计思路，那就是并不单独地设计 Constants 常量类，而是哪个类用到了某个常量，我们就把这个常量定义到这个类中。比如，RedisConfig 类用到了 Redis 配置相关的常量，那我们就直接将这些常量定义在 RedisConfig 中，这样也提高了类设计的内聚性和代码的复用性。</p>
<p>Utils类：</p>
<p>我们为什么需要 Utils 类？Utils 类存在的意义是什么？</p>
<p>实际上，Utils 类的出现是基于这样一个问题背景：如果我们有两个类 A 和 B，它们要用到一块相同的功能逻辑，为了避免代码重复，我们不应该在两个类中，将这个相同的功能逻辑，重复地实现两遍。这个时候我们该怎么办呢？</p>
<p>Utils 类存在的目的来看，它在软件开发中还是挺有用的，能解决代码复用问题。所以，这里并不是说完全不能用 Utils 类，而是说，要尽量避免滥用，不要不加思考地随意去定义 Utils 类。</p>
<p>在定义 Utils 类之前，你要问一下自己，你真的需要单独定义这样一个 Utils 类吗？是否可以把 Utils 类中的某些方法定义到其他类中呢？如果在回答完这些问题之后，你还是觉得确实有必要去定义这样一个 Utils 类，那就大胆地去定义它吧。因为即便在面向对象编程中，我们也并不是完全排斥面向过程风格的代码。只要它能为我们写出好的代码贡献力量，我们就可以适度地去使用。</p>
<h3 id="3-定义数据和方法分离的类"><a href="#3-定义数据和方法分离的类" class="headerlink" title="3. 定义数据和方法分离的类"></a>3. 定义数据和方法分离的类</h3><p>数据定义在一个类中，方法定义在另一个类中。</p>
<p>传统的 MVC 结构分为 Model 层、Controller 层、View 层这三层。不过，在做前后端分离之后，三层结构在后端开发中，会稍微有些调整，被分为 Controller 层、Service 层、Repository 层。Controller 层负责暴露接口给前端调用，Service 层负责核心业务逻辑，Repository 层负责数据读写。而在每一层中，我们又会定义相应的 VO（View Object）、BO（Business Object）、Entity。一般情况下，VO、BO、Entity 中只会定义数据，不会定义方法，所有操作这些数据的业务逻辑都定义在对应的 Controller 类、Service 类、Repository 类中。这就是典型的面向过程的编程风格。这种开发模式叫作基于贫血模型的开发模式</p>
<h2 id="在面向对象编程中，为什么容易写出面向过程风格的代码？"><a href="#在面向对象编程中，为什么容易写出面向过程风格的代码？" class="headerlink" title="在面向对象编程中，为什么容易写出面向过程风格的代码？"></a>在面向对象编程中，为什么容易写出面向过程风格的代码？</h2><p>面向过程编程风格恰恰符合人的这种流程化思维方式。而面向对象编程风格正好相反。它是一种自底向上的思考方式。它不是先去按照执行流程来分解任务，而是将任务翻译成一个一个的小的模块（也就是类），设计类之间的交互，最后按照流程将类组装起来，完成整个任务。</p>
<p>除此之外，面向对象编程要比面向过程编程难一些。在面向对象编程中，类的设计还是挺需要技巧，挺需要一定设计经验的。你要去思考如何封装合适的数据和方法到一个类里，如何设计类之间的关系，如何设计类之间的交互等等诸多设计问题。</p>
<h2 id="面向过程编程及面向过程编程语言就真的无用武之地了吗？"><a href="#面向过程编程及面向过程编程语言就真的无用武之地了吗？" class="headerlink" title="面向过程编程及面向过程编程语言就真的无用武之地了吗？"></a>面向过程编程及面向过程编程语言就真的无用武之地了吗？</h2><p>前面我们有讲到，如果我们开发的是微小程序，或者是一个数据处理相关的代码，以算法为主，数据为辅，那脚本式的面向过程的编程风格就更适合一些。当然，面向过程编程的用武之地还不止这些。实际上，面向过程编程是面向对象编程的基础，面向对象编程离不开基础的面向过程编程。</p>
<p>除此之外，面向对象和面向过程两种编程风格，也并不是非黑即白、完全对立的。在用面向对象编程语言开发的软件中，面向过程风格的代码并不少见，甚至在一些标准的开发库（比如 JDK、Apache Commons、Google Guava）中，也有很多面向过程风格的代码。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>理论五：接口vs抽象类的区别？如何用普通的类模拟抽象类和接口？</title>
    <url>/2023/07/07/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9108.%E7%90%86%E8%AE%BA%E4%BA%94%EF%BC%9A%E6%8E%A5%E5%8F%A3vs%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F%E5%A6%82%E4%BD%95%E7%94%A8%E6%99%AE%E9%80%9A%E7%9A%84%E7%B1%BB%E6%A8%A1%E6%8B%9F%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%EF%BC%9F)/</url>
    <content><![CDATA[<h1 id="08-理论五：接口vs抽象类的区别？如何用普通的类模拟抽象类和接口？"><a href="#08-理论五：接口vs抽象类的区别？如何用普通的类模拟抽象类和接口？" class="headerlink" title="08. 理论五：接口vs抽象类的区别？如何用普通的类模拟抽象类和接口？"></a>08. 理论五：接口vs抽象类的区别？如何用普通的类模拟抽象类和接口？</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307071059946.jpeg" alt="an aerial view of a beach with a body of water"></p>
<p>我们可以使用接口来实现面向对象的抽象特性、多态特性和基于接口而非实现的设计原则，使用抽象类来实现面向对象的继承特性和模板设计模式等等。</p>
<h2 id="什么是抽象类和接口？区别在哪里？"><a href="#什么是抽象类和接口？区别在哪里？" class="headerlink" title="什么是抽象类和接口？区别在哪里？"></a>什么是抽象类和接口？区别在哪里？</h2><p>抽象类具有哪些特性:</p>
<ul>
<li>抽象类不允许被实例化，只能被继承。也就是说，你不能 new 一个抽象类的对象出来（Logger logger &#x3D; new Logger(…); 会报编译错误）。</li>
<li>抽象类可以包含属性和方法。方法既可以包含代码实现（比如 Logger 中的 log() 方法），也可以不包含代码实现（比如 Logger 中的 doLog() 方法）。不包含代码实现的方法叫作抽象方法。</li>
<li>子类继承抽象类，必须实现抽象类中的所有抽象方法。对应到例子代码中就是，所有继承 Logger 抽象类的子类，都必须重写 doLog() 方法。</li>
</ul>
<p>接口的三个特性：</p>
<ul>
<li>接口不能包含属性（也就是成员变量）。（只有类变量：public static final）</li>
<li>接口只能声明方法，方法不能包含代码实现。</li>
<li>类实现接口的时候，必须实现接口中声明的所有方法。</li>
</ul>
<p>前面我们讲了抽象类和接口的定义，以及各自的语法特性。从语法特性上对比，这两者有比较大的区别，比如抽象类中可以定义属性、方法的实现，而接口中不能定义属性，方法也不能包含代码实现等等。除了语法特性，从设计的角度，两者也有比较大的区别。</p>
<p>抽象类实际上就是类，只不过是一种特殊的类，这种类不能被实例化为对象，只能被子类继承。我们知道，继承关系是一种 is-a 的关系，那抽象类既然属于类，也表示一种 is-a 的关系。相对于抽象类的 is-a 关系来说，接口表示一种 has-a 关系，表示具有某些功能。对于接口，有一个更加形象的叫法，那就是协议（contract）。</p>
<h2 id="抽象类和接口能解决什么编程问题？"><a href="#抽象类和接口能解决什么编程问题？" class="headerlink" title="抽象类和接口能解决什么编程问题？"></a>抽象类和接口能解决什么编程问题？</h2><p>抽象类也是为代码复用而生的。多个子类可以继承抽象类中定义的属性和方法，避免在子类中，重复编写相同的代码。</p>
<p>不过，既然继承本身就能达到代码复用的目的，而继承也并不要求父类一定是抽象类，那我们不使用抽象类，照样也可以实现继承和复用。从这个角度上来讲，我们貌似并不需要抽象类这种语法呀。那抽象类除了解决代码复用的问题，还有什么其他存在的意义吗？</p>
<p>可以更方便优雅地处理业务。</p>
<p>我们为什么需要接口？它能够解决什么编程问题？</p>
<p>，抽象类更多的是为了代码复用，而接口就更侧重于解耦。接口是对行为的一种抽象，相当于一组协议或者契约，你可以联想类比一下 API 接口。调用者只需要关注抽象的接口，不需要了解具体的实现，具体的实现代码对调用者透明。接口实现了约定和实现相分离，可以降低代码间的耦合性，提高代码的可扩展性。</p>
<p>实际上，接口是一个比抽象类应用更加广泛、更加重要的知识点。</p>
<h2 id="如何决定该用抽象类还是接口？"><a href="#如何决定该用抽象类还是接口？" class="headerlink" title="如何决定该用抽象类还是接口？"></a>如何决定该用抽象类还是接口？</h2><p>实际上，判断的标准很简单。如果我们要表示一种 is-a 的关系，并且是为了解决代码复用的问题，我们就用抽象类；如果我们要表示一种 has-a 关系，并且是为了解决抽象而非代码复用的问题，那我们就可以使用接口。</p>
<p>从类的继承层次上来看，抽象类是一种自下而上的设计思路，先有子类的代码重复，然后再抽象成上层的父类（也就是抽象类）。而接口正好相反，它是一种自上而下的设计思路。我们在编程的时候，一般都是先设计接口，再去考虑具体的实现。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>抽象类和接口的语法特性</p>
<p>抽象类不允许被实例化，只能被继承。它可以包含属性和方法。方法既可以包含代码实现，也可以不包含代码实现。不包含代码实现的方法叫作抽象方法。子类继承抽象类，必须实现抽象类中的所有抽象方法。接口不能包含属性，只能声明方法，方法不能包含代码实现。类实现接口的时候，必须实现接口中声明的所有方法。</p>
</li>
<li><p>抽象类和接口存在的意义</p>
<p>抽象类是对成员变量和方法的抽象，是一种 is-a 关系，是为了解决代码复用问题。接口仅仅是对方法的抽象，是一种 has-a 关系，表示具有某一组行为特性，是为了解决解耦问题，隔离接口和具体的实现，提高代码的扩展性。</p>
</li>
<li><p>抽象类和接口的应用场景区别</p>
<p>什么时候该用抽象类？什么时候该用接口？实际上，判断的标准很简单。如果要表示一种 is-a 的关系，并且是为了解决代码复用问题，我们就用抽象类；如果要表示一种 has-a 关系，并且是为了解决抽象而非代码复用问题，那我们就用接口。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>面向对象</tag>
        <tag>接口</tag>
        <tag>抽象类</tag>
      </tags>
  </entry>
  <entry>
    <title>理论六：为什么基于接口而非实现编程？有必要为每个类都定义接口吗？</title>
    <url>/2023/07/07/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9109.%E7%90%86%E8%AE%BA%E5%85%AD%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%E8%80%8C%E9%9D%9E%E5%AE%9E%E7%8E%B0%E7%BC%96%E7%A8%8B%EF%BC%9F%E6%9C%89%E5%BF%85%E8%A6%81%E4%B8%BA%E6%AF%8F%E4%B8%AA%E7%B1%BB%E9%83%BD%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3%E5%90%97%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="09-理论六：为什么基于接口而非实现编程？有必要为每个类都定义接口吗？"><a href="#09-理论六：为什么基于接口而非实现编程？有必要为每个类都定义接口吗？" class="headerlink" title="09. 理论六：为什么基于接口而非实现编程？有必要为每个类都定义接口吗？"></a>09. 理论六：为什么基于接口而非实现编程？有必要为每个类都定义接口吗？</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307071102570.jpeg" alt="a drawing of a red, green, and blue string"></p>
<p>一个重要的原则：</p>
<p>基于接口而非实现编程</p>
<h2 id="如何理解原则中的“接口”二字"><a href="#如何理解原则中的“接口”二字" class="headerlink" title="如何理解原则中的“接口”二字?"></a>如何理解原则中的“接口”二字?</h2><p>从本质上来看，“接口”就是一组“协议”或者“约定”，是功能提供者提供给使用者的一个“功能列表”。如果落实到具体的编码，“基于接口而非实现编程”这条原则中的“接口”，可以理解为编程语言中的接口或者抽象类。</p>
<p>这条原则能非常有效地提高代码质量，之所以这么说，那是因为，应用这条原则，可以将接口和实现相分离，封装不稳定的实现，暴露稳定的接口。上游系统面向接口而非实现编程，不依赖不稳定的实现细节，这样当实现发生变化的时候，上游系统的代码基本上不需要做改动，以此来降低耦合性，提高扩展性。</p>
<p>“基于接口而非实现编程”这条原则的另一个表述方式，是“基于抽象而非实现编程”</p>
<p><strong>越抽象、越顶层、越脱离具体某一实现的设计，越能提高代码的灵活性，越能应对未来的需求变化。好的代码设计，不仅能应对当下的需求，而且在将来需求发生变化的时候，仍然能够在不破坏原有代码设计的情况下灵活应对。</strong>而抽象就是提高代码扩展性、灵活性、可维护性最有效的手段之一。</p>
<h2 id="如何将这条原则应用到实战中？"><a href="#如何将这条原则应用到实战中？" class="headerlink" title="如何将这条原则应用到实战中？"></a>如何将这条原则应用到实战中？</h2><p>结合实例：</p>
<p>以下为大量拷贝内容，防止之后复习看不懂：</p>
<p>假设我们的系统中有很多涉及图片处理和存储的业务逻辑。图片经过处理之后被上传到阿里云上。为了代码复用，我们封装了图片存储相关的代码逻辑，提供了一个统一的 AliyunImageStore 类，供整个系统来使用。具体的代码实现如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliyunImageStore</span> &#123;</span><br><span class="line">  <span class="comment">//...省略属性、构造函数等...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBucketIfNotExisting</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">    <span class="comment">// ...创建bucket代码逻辑...</span></span><br><span class="line">    <span class="comment">// ...失败会抛出异常..</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">generateAccessToken</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ...根据accesskey/secrectkey等生成access token</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">uploadToAliyun</span><span class="params">(Image image, String bucketName, String accessToken)</span> &#123;</span><br><span class="line">    <span class="comment">//...上传图片到阿里云...</span></span><br><span class="line">    <span class="comment">//...返回图片存储在阿里云上的地址(url）...</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Image <span class="title function_">downloadFromAliyun</span><span class="params">(String url, String accessToken)</span> &#123;</span><br><span class="line">    <span class="comment">//...从阿里云下载图片...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AliyunImageStore类的使用举例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageProcessingJob</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUCKET_NAME</span> <span class="operator">=</span> <span class="string">&quot;ai_images_bucket&quot;</span>;</span><br><span class="line">  <span class="comment">//...省略其他无关代码...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Image</span> <span class="variable">image</span> <span class="operator">=</span> ...; <span class="comment">//处理图片，并封装为Image对象</span></span><br><span class="line">    <span class="type">AliyunImageStore</span> <span class="variable">imageStore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AliyunImageStore</span>(<span class="comment">/*省略参数*/</span>);</span><br><span class="line">    imageStore.createBucketIfNotExisting(BUCKET_NAME);</span><br><span class="line">    <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> imageStore.generateAccessToken();</span><br><span class="line">    imagestore.uploadToAliyun(image, BUCKET_NAME, accessToken);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整个上传流程包含三个步骤：创建 bucket（你可以简单理解为存储目录）、生成 access token 访问凭证、携带 access token 上传图片到指定的 bucket 中。代码实现非常简单，类中的几个方法定义得都很干净，用起来也很清晰，乍看起来没有太大问题，完全能满足我们将图片存储在阿里云的业务需求。</p>
<p>不过，软件开发中唯一不变的就是变化。过了一段时间后，我们自建了私有云，不再将图片存储到阿里云了，而是将图片存储到自建私有云上。为了满足这样一个需求的变化，我们该如何修改代码呢？</p>
<p>我们需要重新设计实现一个存储图片到私有云的 PrivateImageStore 类，并用它替换掉项目中所有的 AliyunImageStore 类对象。这样的修改听起来并不复杂，只是简单替换而已，对整个代码的改动并不大。不过，我们经常说，“细节是魔鬼”。这句话在软件开发中特别适用。实际上，刚刚的设计实现方式，就隐藏了很多容易出问题的“魔鬼细节”，我们一块来看看都有哪些。</p>
<p>新的 PrivateImageStore 类需要设计实现哪些方法，才能在尽量最小化代码修改的情况下，替换掉 AliyunImageStore 类呢？这就要求我们必须将 AliyunImageStore 类中所定义的所有 public 方法，在 PrivateImageStore 类中都逐一定义并重新实现一遍。而这样做就会存在一些问题，我总结了下面两点。</p>
<p>首先，AliyunImageStore 类中有些函数命名暴露了实现细节，比如，uploadToAliyun() 和 downloadFromAliyun()。如果开发这个功能的同事没有接口意识、抽象思维，那这种暴露实现细节的命名方式就不足为奇了，毕竟最初我们只考虑将图片存储在阿里云上。而我们把这种包含“aliyun”字眼的方法，照抄到 PrivateImageStore 类中，显然是不合适的。如果我们在新类中重新命名 uploadToAliyun()、downloadFromAliyun() 这些方法，那就意味着，我们要修改项目中所有使用到这两个方法的代码，代码修改量可能就会很大。</p>
<p>其次，将图片存储到阿里云的流程，跟存储到私有云的流程，可能并不是完全一致的。比如，阿里云的图片上传和下载的过程中，需要生产 access token，而私有云不需要 access token。一方面，AliyunImageStore 中定义的 generateAccessToken() 方法不能照抄到 PrivateImageStore 中；另一方面，我们在使用 AliyunImageStore 上传、下载图片的时候，代码中用到了 generateAccessToken() 方法，如果要改为私有云的上传下载流程，这些代码都需要做调整。</p>
<p>那这两个问题该如何解决呢？解决这个问题的根本方法就是，在编写代码的时候，要遵从“基于接口而非实现编程”的原则，具体来讲，我们需要做到下面这 3 点。</p>
<ol>
<li>函数的命名不能暴露任何实现细节。比如，前面提到的 uploadToAliyun() 就不符合要求，应该改为去掉 aliyun 这样的字眼，改为更加抽象的命名方式，比如：upload()。</li>
<li>封装具体的实现细节。比如，跟阿里云相关的特殊上传（或下载）流程不应该暴露给调用者。我们对上传（或下载）流程进行封装，对外提供一个包裹所有上传（或下载）细节的方法，给调用者使用。</li>
<li>为实现类定义抽象的接口。具体的实现类都依赖统一的接口定义，遵从一致的上传功能协议。使用者依赖接口，而不是具体的实现类来编程。</li>
</ol>
<p>我们按照这个思路，把代码重构一下。重构后的代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ImageStore</span> &#123;</span><br><span class="line">  String <span class="title function_">upload</span><span class="params">(Image image, String bucketName)</span>;</span><br><span class="line">  Image <span class="title function_">download</span><span class="params">(String url)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliyunImageStore</span> <span class="keyword">implements</span> <span class="title class_">ImageStore</span> &#123;</span><br><span class="line">  <span class="comment">//...省略属性、构造函数等...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(Image image, String bucketName)</span> &#123;</span><br><span class="line">    createBucketIfNotExisting(bucketName);</span><br><span class="line">    <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> generateAccessToken();</span><br><span class="line">    <span class="comment">//...上传图片到阿里云...</span></span><br><span class="line">    <span class="comment">//...返回图片在阿里云上的地址(url)...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Image <span class="title function_">download</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> generateAccessToken();</span><br><span class="line">    <span class="comment">//...从阿里云下载图片...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createBucketIfNotExisting</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">    <span class="comment">// ...创建bucket...</span></span><br><span class="line">    <span class="comment">// ...失败会抛出异常..</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String <span class="title function_">generateAccessToken</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ...根据accesskey/secrectkey等生成access token</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传下载流程改变：私有云不需要支持access token</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrivateImageStore</span> <span class="keyword">implements</span> <span class="title class_">ImageStore</span>  &#123;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(Image image, String bucketName)</span> &#123;</span><br><span class="line">    createBucketIfNotExisting(bucketName);</span><br><span class="line">    <span class="comment">//...上传图片到私有云...</span></span><br><span class="line">    <span class="comment">//...返回图片的url...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Image <span class="title function_">download</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    <span class="comment">//...从私有云下载图片...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createBucketIfNotExisting</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">    <span class="comment">// ...创建bucket...</span></span><br><span class="line">    <span class="comment">// ...失败会抛出异常..</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ImageStore的使用举例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageProcessingJob</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUCKET_NAME</span> <span class="operator">=</span> <span class="string">&quot;ai_images_bucket&quot;</span>;</span><br><span class="line">  <span class="comment">//...省略其他无关代码...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Image</span> <span class="variable">image</span> <span class="operator">=</span> ...;<span class="comment">//处理图片，并封装为Image对象</span></span><br><span class="line">    <span class="type">ImageStore</span> <span class="variable">imageStore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrivateImageStore</span>(...);</span><br><span class="line">    imagestore.upload(image, BUCKET_NAME);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除此之外，很多人在定义接口的时候，希望通过实现类来反推接口的定义。先把实现类写好，然后看实现类中有哪些方法，照抄到接口定义中。如果按照这种思考方式，就有可能导致接口定义不够抽象，依赖具体的实现。这样的接口设计就没有意义了。不过，如果你觉得这种思考方式更加顺畅，那也没问题，只是将实现类的方法搬移到接口定义中的时候，要有选择性的搬移，不要将跟具体实现相关的方法搬移到接口中，比如 AliyunImageStore 中的 generateAccessToken() 方法。总结一下，我们在做软件开发的时候，一定要有抽象意识、封装意识、接口意识。在定义接口的时候，不要暴露任何实现细节。接口的定义只表明做什么，而不是怎么做。而且，在设计接口的时候，我们要多思考一下，这样的接口设计是否足够通用，是否能够做到在替换具体的接口实现的时候，不需要任何接口定义的改动。</p>
<h2 id="是否需要为每个类定义接口？"><a href="#是否需要为每个类定义接口？" class="headerlink" title="是否需要为每个类定义接口？"></a>是否需要为每个类定义接口？</h2><p>这条原则的设计初衷是，将接口和实现相分离，封装不稳定的实现，暴露稳定的接口。上游系统面向接口而非实现编程，不依赖不稳定的实现细节，这样当实现发生变化的时候，上游系统的代码基本上不需要做改动，以此来降低代码间的耦合性，提高代码的扩展性。</p>
<p>从这个设计初衷上来看，如果在我们的业务场景中，某个功能只有一种实现方式，未来也不可能被其他实现方式替换，那我们就没有必要为其设计接口，</p>
<p>越是不稳定的系统，我们越是要在代码的扩展性、维护性上下功夫。相反，如果某个系统特别稳定，在开发完之后，基本上不需要做维护，那我们就没有必要为其扩展性，投入不必要的开发时间。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>接口</tag>
      </tags>
  </entry>
  <entry>
    <title>理论七：为何说要多用组合少用继承？如何决定该用组合还是继承？</title>
    <url>/2023/07/07/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9110.%20%E7%90%86%E8%AE%BA%E4%B8%83%EF%BC%9A%E4%B8%BA%E4%BD%95%E8%AF%B4%E8%A6%81%E5%A4%9A%E7%94%A8%E7%BB%84%E5%90%88%E5%B0%91%E7%94%A8%E7%BB%A7%E6%89%BF%EF%BC%9F%E5%A6%82%E4%BD%95%E5%86%B3%E5%AE%9A%E8%AF%A5%E7%94%A8%E7%BB%84%E5%90%88%E8%BF%98%E6%98%AF%E7%BB%A7%E6%89%BF%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="理论七：为何说要多用组合少用继承？如何决定该用组合还是继承？"><a href="#理论七：为何说要多用组合少用继承？如何决定该用组合还是继承？" class="headerlink" title="理论七：为何说要多用组合少用继承？如何决定该用组合还是继承？"></a>理论七：为何说要多用组合少用继承？如何决定该用组合还是继承？</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307071103724.jpeg" alt="a large body of water surrounded by land"></p>
<p>经典的设计原则，那就是：组合优于继承，多用组合少用继承。</p>
<h2 id="为什么不推荐使用继承？"><a href="#为什么不推荐使用继承？" class="headerlink" title="为什么不推荐使用继承？"></a>为什么不推荐使用继承？</h2><p>继承是面向对象的四大特性之一，用来表示类之间的 is-a 关系，可以解决代码复用的问题。虽然继承有诸多作用，但继承层次过深、过复杂，也会影响到代码的可维护性。所以，对于是否应该在项目中使用继承，网上有很多争议。很多人觉得继承是一种反模式，应该尽量少用，甚至不用。为什么会有这样的争议？我们通过一个例子来解释一下。</p>
<p>假设我们要设计一个关于鸟的类。我们将“鸟类”这样一个抽象的事物概念，定义为一个抽象类 AbstractBird。所有更细分的鸟，比如麻雀、鸽子、乌鸦等，都继承这个抽象类。大部分鸟都会飞，那我们可不可以在 AbstractBird 抽象类中，定义一个 fly() 方法呢？</p>
<p>答案是否定的，虽然大部分鸟都会飞，但也有特例，比如鸵鸟就不会飞。当然，你可能会说，我在鸵鸟这个子类中重写（override）fly() 方法，让它抛出 UnSupportedMethodException 异常不就可以了吗？</p>
<p>这种设计思路虽然可以解决问题，但不够优美。因为除了鸵鸟之外，不会飞的鸟还有很多，比如企鹅。对于这些不会飞的鸟来说，我们都需要重写 fly() 方法，抛出异常。<strong>这样的设计，</strong></p>
<p><strong>一方面，徒增了编码的工作量；</strong></p>
<p><strong>另一方面，也违背了我们之后要讲的最小知识原则（Least Knowledge Principle，也叫最少知识原则或者迪米特法则），暴露不该暴露的接口给外部，增加了类使用过程中被误用的概率。</strong></p>
<p>那可以将AbstractBird类派生出两个更细分的抽象类：会飞的鸟类AbstractFlyableBird和不会飞的鸟类AbstractUnFlyableBird，然后让让麻雀、乌鸦这些会飞的鸟都继承 AbstractFlyableBird，让鸵鸟、企鹅这些不会飞的鸟，都继承 AbstractUnFlyableBird 类，不就可以了吗？具体的继承关系如下图所示：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202306301528188.jpeg" alt="img"></p>
<p>在刚刚这个场景中，我们只关注“鸟会不会飞”，但如果我们还关注“鸟会不会叫”，那这个时候，我们又该如何设计类之间的继承关系呢？</p>
<p>是否会飞？是否会叫？两个行为搭配起来会产生四种情况：会飞会叫、不会飞会叫、会飞不会叫、不会飞不会叫。如果我们继续沿用刚才的设计思路，那就需要再定义四个抽象类（AbstractFlyableTweetableBird、AbstractFlyableUnTweetableBird、AbstractUnFlyableTweetableBird、AbstractUnFlyableUnTweetableBird）。</p>
<p>如果我们还需要考虑“是否会下蛋”这样一个行为，那估计就要组合爆炸了。</p>
<p><strong>类的继承层次会越来越深、继承关系会越来越复杂。</strong></p>
<p>而这种层次很深、很复杂的继承关系，<strong>一方面</strong>，会导致代码的可读性变差。因为我们要搞清楚某个类具有哪些方法、属性，必须阅读父类的代码、父类的父类的代码……一直追溯到最顶层父类的代码。<strong>另一方面</strong>，这也破坏了类的封装特性，将父类的实现细节暴露给了子类。子类的实现依赖父类的实现，两者高度耦合，一旦父类代码修改，就会影响所有子类的逻辑。</p>
<p>那，怎么解决呢？</p>
<h2 id="组合相比继承有哪些优势？"><a href="#组合相比继承有哪些优势？" class="headerlink" title="组合相比继承有哪些优势？"></a>组合相比继承有哪些优势？</h2><p>实际上，我们可以利用组合（composition）、接口、委托（delegation）三个技术手段，一块儿来解决刚刚继承存在的问题。</p>
<p>我们前面讲到接口的时候说过，接口表示具有某种行为特性。针对“会飞”这样一个行为特性，我们可以定义一个 Flyable 接口，只让会飞的鸟去实现这个接口。对于会叫、会下蛋这些行为特性，我们可以类似地定义 Tweetable 接口、EggLayable 接口。我们将这个设计思路翻译成 Java 代码的话，就是下面这个样子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Tweetable</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">tweet</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EggLayable</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">layEgg</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ostrich</span> <span class="keyword">implements</span> <span class="title class_">Tweetable</span>, EggLayable &#123;<span class="comment">//鸵鸟</span></span><br><span class="line">  <span class="comment">//... 省略其他属性和方法...</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tweet</span><span class="params">()</span> &#123; <span class="comment">//... &#125;</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">layEgg</span><span class="params">()</span> &#123; <span class="comment">//... &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sparrow</span> impelents Flyable, Tweetable, EggLayable &#123;<span class="comment">//麻雀</span></span><br><span class="line">  <span class="comment">//... 省略其他属性和方法...</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123; <span class="comment">//... &#125;</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tweet</span><span class="params">()</span> &#123; <span class="comment">//... &#125;</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">layEgg</span><span class="params">()</span> &#123; <span class="comment">//... &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，接口只声明方法，不定义实现，每个会下蛋的鸟都要实现一下layEgg()方法，并且实现逻辑是一样的，这就会导致代码重复问题，可以使用组合和委托的技术来解决代码重复问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyAbility</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123; <span class="comment">//... &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//省略Tweetable/TweetAbility/EggLayable/EggLayAbility</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ostrich</span> <span class="keyword">implements</span> <span class="title class_">Tweetable</span>, EggLayable &#123;<span class="comment">//鸵鸟</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">TweetAbility</span> <span class="variable">tweetAbility</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TweetAbility</span>(); <span class="comment">//组合</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">EggLayAbility</span> <span class="variable">eggLayAbility</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EggLayAbility</span>(); <span class="comment">//组合</span></span><br><span class="line">  <span class="comment">//... 省略其他属性和方法...</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tweet</span><span class="params">()</span> &#123;</span><br><span class="line">    tweetAbility.tweet(); <span class="comment">// 委托</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">layEgg</span><span class="params">()</span> &#123;</span><br><span class="line">    eggLayAbility.layEgg(); <span class="comment">// 委托</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何判断使用组合还是继承？"><a href="#如何判断使用组合还是继承？" class="headerlink" title="如何判断使用组合还是继承？"></a>如何判断使用组合还是继承？</h2><p>如果类之间的继承结构稳定（不会轻易改变），继承层次比较浅（比如，最多有两层继承关系），继承关系不复杂，我们就可以大胆地使用继承。反之，系统越不稳定，继承层次很深，继承关系复杂，我们就尽量使用组合来替代继承。</p>
<p>除此之外，还有一些设计模式会固定使用继承或者组合。比如，装饰者模式（decorator pattern）、策略模式（strategy pattern）、组合模式（composite pattern）等都使用了组合关系，而模板模式（template pattern）使用了继承关系。</p>
<p>还有一些特殊的场景要求我们必须使用继承。如果你不能改变一个函数的入参类型，而入参又非接口，为了支持多态，只能采用继承来实现。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>为什么不推荐使用继承？继承是面向对象的四大特性之一，用来表示类之间的 is-a 关系，可以解决代码复用的问题。虽然继承有诸多作用，但继承层次过深、过复杂，也会影响到代码的可维护性。在这种情况下，我们应该尽量少用，甚至不用继承。</li>
<li>组合相比继承有哪些优势？继承主要有三个作用：表示 is-a 关系，支持多态特性，代码复用。而这三个作用都可以通过组合、接口、委托三个技术手段来达成。除此之外，利用组合还能解决层次过深、过复杂的继承关系影响代码可维护性的问题。</li>
<li>如何判断该用组合还是继承？尽管我们鼓励多用组合少用继承，但组合也并不是完美的，继承也并非一无是处。在实际的项目开发中，我们还是要根据具体的情况，来选择该用继承还是组合。如果类之间的继承结构稳定，层次比较浅，关系不复杂，我们就可以大胆地使用继承。反之，我们就尽量使用组合来替代继承。除此之外，还有一些设计模式、特殊的应用场景，会固定使用继承或者组合</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>实战一（下）：如何利用基于充血模型的DDD开发一个虚拟钱包系统？</title>
    <url>/2023/07/13/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9112.%E5%AE%9E%E6%88%98%E4%B8%80%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E5%9F%BA%E4%BA%8E%E5%85%85%E8%A1%80%E6%A8%A1%E5%9E%8B%E7%9A%84DDD%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E8%99%9A%E6%8B%9F%E9%92%B1%E5%8C%85%E7%B3%BB%E7%BB%9F%EF%BC%9F%20/</url>
    <content><![CDATA[<h1 id="实战一（下）：如何利用基于充血模型的DDD开发一个虚拟钱包系统？"><a href="#实战一（下）：如何利用基于充血模型的DDD开发一个虚拟钱包系统？" class="headerlink" title="实战一（下）：如何利用基于充血模型的DDD开发一个虚拟钱包系统？"></a>实战一（下）：如何利用基于充血模型的DDD开发一个虚拟钱包系统？</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307131127849.jpeg" alt="a snow covered mountain with a sky background"></p>
<h2 id="钱包业务背景介绍"><a href="#钱包业务背景介绍" class="headerlink" title="钱包业务背景介绍"></a>钱包业务背景介绍</h2><p>一般应用内都支持钱包功能，钱包功能一般为每一个用户开设一个系统内的虚拟钱包账户，支持用户充值、提现、支付、冻结、透支、转赠、查询账户余额、查询交易流水等操作。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307131044921.jpeg" alt="img"></p>
<p>我们限定钱包暂时只支持充值、提现、支付、查询余额、查询交易流水这五个核心的功能，其他比如冻结、透支、转赠等不常用的功能，我们暂不考虑。</p>
<h3 id="1-充值"><a href="#1-充值" class="headerlink" title="1. 充值"></a>1. 充值</h3><p>用户通过三方支付渠道，把自己银行卡账户内的钱，充值到虚拟钱包账号中。这整个过程，我们可以分解为三个主要的操作流程：第一个操作是从用户的银行卡账户转账到应用的公共银行卡账户；第二个操作是将用户的充值金额加到虚拟钱包余额上；第三个操作是记录刚刚这笔交易流水。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307131044215.jpeg" alt="img"></p>
<h2 id="2-支付"><a href="#2-支付" class="headerlink" title="2. 支付"></a>2. 支付</h2><p>用户用钱包内的余额，支付购买应用内的商品。实际上，支付的过程就是一个转账的过程，从用户的虚拟钱包账户划钱到商家的虚拟钱包账户上。除此之外，我们也需要记录这笔支付的交易流水信息。</p>
<h2 id="3-提现"><a href="#3-提现" class="headerlink" title="3. 提现"></a>3. 提现</h2><p>除了充值、支付之外，用户还可以将虚拟钱包中的余额，提现到自己的银行卡中。这个过程实际上就是扣减用户虚拟钱包中的余额，并且触发真正的银行转账操作，从应用的公共银行账户转钱到用户的银行账户。同样，我们也需要记录这笔提现的交易流水信息。</p>
<h2 id="4-查询交易流水"><a href="#4-查询交易流水" class="headerlink" title="4. 查询交易流水"></a>4. 查询交易流水</h2><p>查询交易流水也比较简单。我们只支持三种类型的交易流水：充值、支付、提现。在用户充值、支付、提现的时候，我们会记录相应的交易信息。在需要查询的时候，我们只需要将之前记录的交易流水，按照时间、类型等条件过滤之后，显示出来即可。</p>
<h2 id="钱包系统的设计思路"><a href="#钱包系统的设计思路" class="headerlink" title="钱包系统的设计思路"></a>钱包系统的设计思路</h2><p>以把整个钱包系统的业务划分为<strong>两部分</strong>，其中一部分单纯跟<strong>应用内的虚拟钱包账户</strong>打交道，另一部分单纯跟<strong>银行账户</strong>打交道。我们基于这样一个业务划分，给系统解耦，将整个钱包系统拆分为两个子系统：<strong>虚拟钱包系统</strong>和<strong>三方支付系统</strong>。</p>
<p>只聚焦于虚拟钱包系统的设计与实现。</p>
<p>如果要支持钱包的这五个核心功能，虚拟钱包系统需要对应实现哪些操作：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307131046577.jpeg" alt="img"></p>
<p>交易流水该如何记录和查询？</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307131047163.jpeg" alt="img"></p>
<p>如何分别用基于贫血模型的传统开发模式和基于充血模型的 DDD 开发模式，来实现这样一个虚拟钱包系统？</p>
<h2 id="基于贫血模型的传统开发模式"><a href="#基于贫血模型的传统开发模式" class="headerlink" title="基于贫血模型的传统开发模式"></a>基于贫血模型的传统开发模式</h2><p>典型的 Web 后端项目的三层结构。其中，Controller 和 VO 负责暴露接口，具体的代码实现如下所示。注意，Controller 中，接口实现比较简单，主要就是调用 Service 的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualWalletController</span> &#123;</span><br><span class="line">  <span class="comment">// 通过构造函数或者IOC框架注入</span></span><br><span class="line">  <span class="keyword">private</span> VirtualWalletService virtualWalletService;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> BigDecimal <span class="title function_">getBalance</span><span class="params">(Long walletId)</span> &#123; ... &#125; <span class="comment">//查询余额</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">debit</span><span class="params">(Long walletId, BigDecimal amount)</span> &#123; ... &#125; <span class="comment">//出账</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">credit</span><span class="params">(Long walletId, BigDecimal amount)</span> &#123; ... &#125; <span class="comment">//入账</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Long fromWalletId, Long toWalletId, BigDecimal amount)</span> &#123; ...&#125; <span class="comment">//转账</span></span><br><span class="line">  <span class="comment">//省略查询transaction的接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Service 和 BO 负责核心业务逻辑，Repository 和 Entity 负责数据存取。Repository 这一层的代码实现比较简单，不是我们讲解的重点，所以我也省略掉了。Service 层的代码如下所示。注意，这里我省略了一些不重要的校验代码，比如，对 amount 是否小于 0、钱包是否存在的校验等等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualWalletBo</span> &#123;<span class="comment">//省略getter/setter/constructor方法</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> Long createTime;</span><br><span class="line">  <span class="keyword">private</span> BigDecimal balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Enum TransactionType &#123;</span><br><span class="line">  DEBIT,</span><br><span class="line">  CREDIT,</span><br><span class="line">  TRANSFER;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualWalletService</span> &#123;</span><br><span class="line">  <span class="comment">// 通过构造函数或者IOC框架注入</span></span><br><span class="line">  <span class="keyword">private</span> VirtualWalletRepository walletRepo;</span><br><span class="line">  <span class="keyword">private</span> VirtualWalletTransactionRepository transactionRepo;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> VirtualWalletBo <span class="title function_">getVirtualWallet</span><span class="params">(Long walletId)</span> &#123;</span><br><span class="line">    <span class="type">VirtualWalletEntity</span> <span class="variable">walletEntity</span> <span class="operator">=</span> walletRepo.getWalletEntity(walletId);</span><br><span class="line">    <span class="type">VirtualWalletBo</span> <span class="variable">walletBo</span> <span class="operator">=</span> convert(walletEntity);</span><br><span class="line">    <span class="keyword">return</span> walletBo;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> BigDecimal <span class="title function_">getBalance</span><span class="params">(Long walletId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> walletRepo.getBalance(walletId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Transactional</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">debit</span><span class="params">(Long walletId, BigDecimal amount)</span> &#123;</span><br><span class="line">    <span class="type">VirtualWalletEntity</span> <span class="variable">walletEntity</span> <span class="operator">=</span> walletRepo.getWalletEntity(walletId);</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">balance</span> <span class="operator">=</span> walletEntity.getBalance();</span><br><span class="line">    <span class="keyword">if</span> (balance.compareTo(amount) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSufficientBalanceException</span>(...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">VirtualWalletTransactionEntity</span> <span class="variable">transactionEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VirtualWalletTransactionEntity</span>();</span><br><span class="line">    transactionEntity.setAmount(amount);</span><br><span class="line">    transactionEntity.setCreateTime(System.currentTimeMillis());</span><br><span class="line">    transactionEntity.setType(TransactionType.DEBIT);</span><br><span class="line">    transactionEntity.setFromWalletId(walletId);</span><br><span class="line">    transactionRepo.saveTransaction(transactionEntity);</span><br><span class="line">    walletRepo.updateBalance(walletId, balance.subtract(amount));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Transactional</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">credit</span><span class="params">(Long walletId, BigDecimal amount)</span> &#123;</span><br><span class="line">    <span class="type">VirtualWalletTransactionEntity</span> <span class="variable">transactionEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VirtualWalletTransactionEntity</span>();</span><br><span class="line">    transactionEntity.setAmount(amount);</span><br><span class="line">    transactionEntity.setCreateTime(System.currentTimeMillis());</span><br><span class="line">    transactionEntity.setType(TransactionType.CREDIT);</span><br><span class="line">    transactionEntity.setFromWalletId(walletId);</span><br><span class="line">    transactionRepo.saveTransaction(transactionEntity);</span><br><span class="line">    <span class="type">VirtualWalletEntity</span> <span class="variable">walletEntity</span> <span class="operator">=</span> walletRepo.getWalletEntity(walletId);</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">balance</span> <span class="operator">=</span> walletEntity.getBalance();</span><br><span class="line">    walletRepo.updateBalance(walletId, balance.add(amount));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Transactional</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Long fromWalletId, Long toWalletId, BigDecimal amount)</span> &#123;</span><br><span class="line">    <span class="type">VirtualWalletTransactionEntity</span> <span class="variable">transactionEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VirtualWalletTransactionEntity</span>();</span><br><span class="line">    transactionEntity.setAmount(amount);</span><br><span class="line">    transactionEntity.setCreateTime(System.currentTimeMillis());</span><br><span class="line">    transactionEntity.setType(TransactionType.TRANSFER);</span><br><span class="line">    transactionEntity.setFromWalletId(fromWalletId);</span><br><span class="line">    transactionEntity.setToWalletId(toWalletId);</span><br><span class="line">    transactionRepo.saveTransaction(transactionEntity);</span><br><span class="line">    debit(fromWalletId, amount);</span><br><span class="line">    credit(toWalletId, amount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基于充血模型的DDD开发模式"><a href="#基于充血模型的DDD开发模式" class="headerlink" title="基于充血模型的DDD开发模式"></a>基于充血模型的DDD开发模式</h2><p>，基于充血模型的 DDD 开发模式，跟基于贫血模型的传统开发模式的主要区别就在 Service 层，Controller 层和 Repository 层的代码基本上相同。所以，我们重点看一下，Service 层按照基于充血模型的 DDD 开发模式该如何来实现。</p>
<p>在这种开发模式下，我们把虚拟钱包 VirtualWallet 类设计成一个充血的 Domain 领域模型，并且将原来在 Service 类中的部分业务逻辑移动到 VirtualWallet 类中，让 Service 类的实现依赖 VirtualWallet 类。具体的代码实现如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualWallet</span> &#123; <span class="comment">// Domain领域模型(充血模型)</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">createTime</span> <span class="operator">=</span> System.currentTimeMillis();;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">BigDecimal</span> <span class="variable">balance</span> <span class="operator">=</span> BigDecimal.ZERO;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">VirtualWallet</span><span class="params">(Long preAllocatedId)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = preAllocatedId;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> BigDecimal <span class="title function_">balance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.balance;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">debit</span><span class="params">(BigDecimal amount)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.balance.compareTo(amount) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsufficientBalanceException</span>(...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.balance = <span class="built_in">this</span>.balance.subtract(amount);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">credit</span><span class="params">(BigDecimal amount)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (amount.compareTo(BigDecimal.ZERO) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidAmountException</span>(...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.balance = <span class="built_in">this</span>.balance.add(amount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualWalletService</span> &#123;</span><br><span class="line">  <span class="comment">// 通过构造函数或者IOC框架注入</span></span><br><span class="line">  <span class="keyword">private</span> VirtualWalletRepository walletRepo;</span><br><span class="line">  <span class="keyword">private</span> VirtualWalletTransactionRepository transactionRepo;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> VirtualWallet <span class="title function_">getVirtualWallet</span><span class="params">(Long walletId)</span> &#123;</span><br><span class="line">    <span class="type">VirtualWalletEntity</span> <span class="variable">walletEntity</span> <span class="operator">=</span> walletRepo.getWalletEntity(walletId);</span><br><span class="line">    <span class="type">VirtualWallet</span> <span class="variable">wallet</span> <span class="operator">=</span> convert(walletEntity);</span><br><span class="line">    <span class="keyword">return</span> wallet;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> BigDecimal <span class="title function_">getBalance</span><span class="params">(Long walletId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> walletRepo.getBalance(walletId);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Transactional</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">debit</span><span class="params">(Long walletId, BigDecimal amount)</span> &#123;</span><br><span class="line">    <span class="type">VirtualWalletEntity</span> <span class="variable">walletEntity</span> <span class="operator">=</span> walletRepo.getWalletEntity(walletId);</span><br><span class="line">    <span class="type">VirtualWallet</span> <span class="variable">wallet</span> <span class="operator">=</span> convert(walletEntity);</span><br><span class="line">    wallet.debit(amount);</span><br><span class="line">    <span class="type">VirtualWalletTransactionEntity</span> <span class="variable">transactionEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VirtualWalletTransactionEntity</span>();</span><br><span class="line">    transactionEntity.setAmount(amount);</span><br><span class="line">    transactionEntity.setCreateTime(System.currentTimeMillis());</span><br><span class="line">    transactionEntity.setType(TransactionType.DEBIT);</span><br><span class="line">    transactionEntity.setFromWalletId(walletId);</span><br><span class="line">    transactionRepo.saveTransaction(transactionEntity);</span><br><span class="line">    walletRepo.updateBalance(walletId, wallet.balance());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Transactional</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">credit</span><span class="params">(Long walletId, BigDecimal amount)</span> &#123;</span><br><span class="line">    <span class="type">VirtualWalletEntity</span> <span class="variable">walletEntity</span> <span class="operator">=</span> walletRepo.getWalletEntity(walletId);</span><br><span class="line">    <span class="type">VirtualWallet</span> <span class="variable">wallet</span> <span class="operator">=</span> convert(walletEntity);</span><br><span class="line">    wallet.credit(amount);</span><br><span class="line">    <span class="type">VirtualWalletTransactionEntity</span> <span class="variable">transactionEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VirtualWalletTransactionEntity</span>();</span><br><span class="line">    transactionEntity.setAmount(amount);</span><br><span class="line">    transactionEntity.setCreateTime(System.currentTimeMillis());</span><br><span class="line">    transactionEntity.setType(TransactionType.CREDIT);</span><br><span class="line">    transactionEntity.setFromWalletId(walletId);</span><br><span class="line">    transactionRepo.saveTransaction(transactionEntity);</span><br><span class="line">    walletRepo.updateBalance(walletId, wallet.balance());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Transactional</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Long fromWalletId, Long toWalletId, BigDecimal amount)</span> &#123;</span><br><span class="line">    <span class="comment">//...跟基于贫血模型的传统开发模式的代码一样...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>相对于原来的贫血模型的设计思路，这种充血模型的设计思路，貌似并没有太大优势。你说得没错！这也是大部分业务系统都使用基于贫血模型开发的原因。不过，如果虚拟钱包系统需要支持更复杂的业务逻辑，那充血模型的优势就显现出来了。比如，我们要支持透支一定额度和冻结部分余额的功能。这个时候，我们重新来看一下 VirtualWallet 类的实现代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualWallet</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">createTime</span> <span class="operator">=</span> System.currentTimeMillis();;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">BigDecimal</span> <span class="variable">balance</span> <span class="operator">=</span> BigDecimal.ZERO;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isAllowedOverdraft</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">BigDecimal</span> <span class="variable">overdraftAmount</span> <span class="operator">=</span> BigDecimal.ZERO;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">BigDecimal</span> <span class="variable">frozenAmount</span> <span class="operator">=</span> BigDecimal.ZERO;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">VirtualWallet</span><span class="params">(Long preAllocatedId)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = preAllocatedId;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">freeze</span><span class="params">(BigDecimal amount)</span> &#123; ... &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unfreeze</span><span class="params">(BigDecimal amount)</span> &#123; ...&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increaseOverdraftAmount</span><span class="params">(BigDecimal amount)</span> &#123; ... &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decreaseOverdraftAmount</span><span class="params">(BigDecimal amount)</span> &#123; ... &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closeOverdraft</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">openOverdraft</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> BigDecimal <span class="title function_">balance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.balance;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> BigDecimal <span class="title function_">getAvaliableBalance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">totalAvaliableBalance</span> <span class="operator">=</span> <span class="built_in">this</span>.balance.subtract(<span class="built_in">this</span>.frozenAmount);</span><br><span class="line">    <span class="keyword">if</span> (isAllowedOverdraft) &#123;</span><br><span class="line">      totalAvaliableBalance += <span class="built_in">this</span>.overdraftAmount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> totalAvaliableBalance;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">debit</span><span class="params">(BigDecimal amount)</span> &#123;</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">totalAvaliableBalance</span> <span class="operator">=</span> getAvaliableBalance();</span><br><span class="line">    <span class="keyword">if</span> (totoalAvaliableBalance.compareTo(amount) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsufficientBalanceException</span>(...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.balance = <span class="built_in">this</span>.balance.subtract(amount);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">credit</span><span class="params">(BigDecimal amount)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (amount.compareTo(BigDecimal.ZERO) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidAmountException</span>(...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.balance = <span class="built_in">this</span>.balance.add(amount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>领域模型 VirtualWallet 类添加了简单的冻结和透支逻辑之后，功能看起来就丰富了很多，代码也没那么单薄了。如果功能继续演进，我们可以增加更加细化的冻结策略、透支策略、支持钱包账号（VirtualWallet id 字段）自动生成的逻辑（不是通过构造函数经外部传入 ID，而是通过分布式 ID 生成算法来自动生成 ID）等等。VirtualWallet 类的业务逻辑会变得越来越复杂，也就很值得设计成充血模型了。</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>第一个要讨论的问题是：在基于充血模型的 DDD 开发模式中，将业务逻辑移动到 Domain 中，Service 类变得很薄，但在我们的代码设计与实现中，并没有完全将 Service 类去掉，这是为什么？或者说，Service 类在这种情况下担当的职责是什么？哪些功能逻辑会放到 Service 类中？</p>
<p>区别于 Domain 的职责，Service 类主要有下面这样几个职责：</p>
<p>1.Service 类负责与 Repository 交流。在我的设计与代码实现中，VirtualWalletService 类负责与 Repository 层打交道，调用 Respository 类的方法，获取数据库中的数据，转化成领域模型 VirtualWallet，然后由领域模型 VirtualWallet 来完成业务逻辑，最后调用 Repository 类的方法，将数据存回数据库。</p>
<p>这里我再稍微解释一下，之所以让 VirtualWalletService 类与 Repository 打交道，而不是让领域模型 VirtualWallet 与 Repository 打交道，那是因为我们想保持领域模型的独立性，不与任何其他层的代码（Repository 层的代码）或开发框架（比如 Spring、MyBatis）耦合在一起，将流程性的代码逻辑（比如从 DB 中取数据、映射数据）与领域模型的业务逻辑解耦，让领域模型更加可复用。</p>
<p>2.Service 类负责跨领域模型的业务聚合功能。VirtualWalletService 类中的 transfer() 转账函数会涉及两个钱包的操作，因此这部分业务逻辑无法放到 VirtualWallet 类中，所以，我们暂且把转账业务放到 VirtualWalletService 类中了。当然，虽然功能演进，使得转账业务变得复杂起来之后，我们也可以将转账业务抽取出来，设计成一个独立的领域模型。3.Service 类负责一些非功能性及与三方系统交互的工作。比如幂等、事务、发邮件、发消息、记录日志、调用其他系统的 RPC 接口等，都可以放到 Service 类中。</p>
<p>第二个要讨论问题是：在基于充血模型的 DDD 开发模式中，尽管 Service 层被改造成了充血模型，但是 Controller 层和 Repository 层还是贫血模型，是否有必要也进行充血领域建模呢？</p>
<p>Controller 层主要负责接口的暴露，Repository 层主要负责与数据库打交道，这两层包含的业务逻辑并不多，前面我们也提到了，如果业务逻辑比较简单，就没必要做充血建模，即便设计成充血模型，类也非常单薄，看起来也很奇怪。</p>
<p>就拿 Repository 的 Entity 来说，即便它被设计成贫血模型，违反面向对象编程的封装特性，有被任意代码修改数据的风险，但 Entity 的生命周期是有限的。一般来讲，我们把它传递到 Service 层之后，就会转化成 BO 或者 Domain 来继续后面的业务逻辑。Entity 的生命周期到此就结束了，所以也并不会被到处任意修改。</p>
<p>Controller 层的 VO。实际上 VO 是一种 DTO（Data Transfer Object，数据传输对象）。它主要是作为接口的数据传输承载体，将数据发送给其他系统。从功能上来讲，它理应不包含业务逻辑、只包含数据。所以，我们将它设计成贫血模型也是比较合理的。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>DDD</tag>
        <tag>贫血模型</tag>
      </tags>
  </entry>
  <entry>
    <title>实战一（上）：业务开发常用的基于贫血模型的MVC架构违背OOP吗？</title>
    <url>/2023/07/12/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9111.%20%E5%AE%9E%E6%88%98%E4%B8%80%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E4%BA%8E%E8%B4%AB%E8%A1%80%E6%A8%A1%E5%9E%8B%E7%9A%84MVC%E6%9E%B6%E6%9E%84%E8%BF%9D%E8%83%8COOP%E5%90%97%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="实战一（上）：业务开发常用的基于贫血模型的MVC架构违背OOP吗？"><a href="#实战一（上）：业务开发常用的基于贫血模型的MVC架构违背OOP吗？" class="headerlink" title="实战一（上）：业务开发常用的基于贫血模型的MVC架构违背OOP吗？"></a>实战一（上）：业务开发常用的基于贫血模型的MVC架构违背OOP吗？</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307122022089.jpeg" alt="the night sky with stars above a mountain"></p>
<p>这篇主要讲，基于贫血模型的MVC架构和DDD充血模型的开发架构区别。</p>
<p>首先提出几个问题：</p>
<ol>
<li>什么是贫血模型？什么是充血模型？</li>
<li>为什么说基于贫血模型的传统开发模式违反 OOP?</li>
<li>基于贫血模型的传统开发模式既然违反 OOP，那又为什么如此流行？</li>
<li>什么情况下我们应该考虑使用基于充血模型的 DDD 开发模式？</li>
</ol>
<h2 id="什么是基于贫血模型的传统开发模式"><a href="#什么是基于贫血模型的传统开发模式" class="headerlink" title="什么是基于贫血模型的传统开发模式"></a>什么是基于贫血模型的传统开发模式</h2><p>MVC三层架构中的M表示Model，V表示view，C表示Controller；将整个项目分成三层：展示层、逻辑层和数据层；</p>
<p>相应的，后端会这么分：</p>
<p>后端项目分为 Repository 层、Service 层、Controller 层。其中，Repository 层负责数据访问，Service 层负责业务逻辑，Controller 层负责暴露接口。</p>
<h3 id="什么是贫血模型？"><a href="#什么是贫血模型？" class="headerlink" title="什么是贫血模型？"></a>什么是贫血模型？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">////////// Controller+VO(View Object) //////////</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> UserService userService; <span class="comment">//通过构造函数或者IOC框架注入</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> UserVo <span class="title function_">getUserById</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">    <span class="type">UserBo</span> <span class="variable">userBo</span> <span class="operator">=</span> userService.getUserById(userId);</span><br><span class="line">    <span class="type">UserVo</span> <span class="variable">userVo</span> <span class="operator">=</span> [...convert userBo to userVo...];</span><br><span class="line">    <span class="keyword">return</span> userVo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVo</span> &#123;<span class="comment">//省略其他属性、get/set/construct方法</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String cellphone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////////// Service+BO(Business Object) //////////</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> UserRepository userRepository; <span class="comment">//通过构造函数或者IOC框架注入</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> UserBo <span class="title function_">getUserById</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">    <span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> userRepository.getUserById(userId);</span><br><span class="line">    <span class="type">UserBo</span> <span class="variable">userBo</span> <span class="operator">=</span> [...convert userEntity to userBo...];</span><br><span class="line">    <span class="keyword">return</span> userBo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserBo</span> &#123;<span class="comment">//省略其他属性、get/set/construct方法</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String cellphone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////////// Repository+Entity //////////</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRepository</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> UserEntity <span class="title function_">getUserById</span><span class="params">(Long userId)</span> &#123; <span class="comment">//... &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserEntity</span> &#123;<span class="comment">//省略其他属性、get/set/construct方法</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String cellphone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserEntity 和 UserRepository 组成了数据访问层，UserBo 和 UserService 组成了业务逻辑层，UserVo 和 UserController 在这里属于接口层。</p>
<p>像 UserBo 这样，只包含数据，不包含业务逻辑的类，就叫作贫血模型（Anemic Domain Model）。同理，UserEntity、UserVo 都是基于贫血模型设计的。这种贫血模型将数据与操作分离，破坏了面向对象的封装特性，是一种典型的面向过程的编程风格。</p>
<h2 id="什么是基于充血模型的-DDD-开发模式？"><a href="#什么是基于充血模型的-DDD-开发模式？" class="headerlink" title="什么是基于充血模型的 DDD 开发模式？"></a>什么是基于充血模型的 DDD 开发模式？</h2><p>在贫血模型中，数据和业务逻辑被分割到不同的类中。充血模型（Rich Domain Model）正好相反，数据和对应的业务逻辑被封装到同一个类中。因此，这种充血模型满足面向对象的封装特性，是典型的面向对象编程风格。</p>
<p>什么是领域驱动设计？</p>
<p>领域驱动设计，即 DDD，主要是用来指导如何解耦业务系统，划分业务模块，定义业务领域模型及其交互。</p>
<p>我们知道，除了监控、调用链追踪、API 网关等服务治理系统的开发之外，微服务还有另外一个更加重要的工作，那就是针对公司的业务，合理地做微服务拆分。而领域驱动设计恰好就是用来指导划分服务的。所以，微服务加速了领域驱动设计的盛行。</p>
<p>做好领域驱动设计的关键是，看你对自己所做业务的熟悉程度，而并不是对领域驱动设计这个概念本身的掌握程度。</p>
<p>基于贫血模型的传统的开发模式，重 Service 轻 BO；基于充血模型的 DDD 开发模式，轻 Service 重 Domain。</p>
<h2 id="为什么基于贫血模型的传统开发模式如此受欢迎？"><a href="#为什么基于贫血模型的传统开发模式如此受欢迎？" class="headerlink" title="为什么基于贫血模型的传统开发模式如此受欢迎？"></a>为什么基于贫血模型的传统开发模式如此受欢迎？</h2><p>第一、我们开发的系统业务可能都比较简单，简单到就是基于 SQL 的 CRUD 操作，所以，我们根本不需要动脑子精心设计充血模型，贫血模型就足以应付这种简单业务的开发工作。除此之外，因为业务比较简单，即便我们使用充血模型，那模型<strong>本身包含的业务逻辑</strong>也并不会很多，设计出来的领域模型也会比较单薄，跟贫血模型差不多，没有太大意义。</p>
<p>第二、充血模型的设计要比贫血模型更加有难度。从一开始就要设计好针对数据要暴露哪些操作，定义哪些业务逻辑。</p>
<p>第三、思维已固化，转型有成本。</p>
<h2 id="什么项目应该考虑使用基于充血模型的DDD开发模式？"><a href="#什么项目应该考虑使用基于充血模型的DDD开发模式？" class="headerlink" title="什么项目应该考虑使用基于充血模型的DDD开发模式？"></a>什么项目应该考虑使用基于充血模型的DDD开发模式？</h2><p>基于贫血模型的传统的开发模式，比较适合业务比较简单的系统开发。相对应的，基于充血模型的 DDD 开发模式，更适合业务复杂的系统开发。</p>
<p>你可能会有一些疑问，这两种开发模式，落实到代码层面，区别不就是一个将业务逻辑放到 Service 类中，一个将业务逻辑放到 Domain 领域模型中吗？为什么基于贫血模型的传统开发模式，就不能应对复杂业务系统的开发？而基于充血模型的 DDD 开发模式就可以呢？</p>
<p>两种不同的开发模式会导致不同的开发流程。基于充血模型的 DDD 开发模式的开发流程，在应对复杂业务系统的开发的时候更加有优势。</p>
<p>在这种开发模式下，我们需要事先理清楚所有的业务，定义领域模型所包含的属性和方法。领域模型相当于可复用的业务中间层。新功能需求的开发，都基于之前定义好的这些领域模型来完成。</p>
<p>充血模型的 DDD 开发模式，正好需要我们前期做大量的业务调研、领域模型设计，所以它更加适合这种复杂系统的开发。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>DDD</tag>
      </tags>
  </entry>
  <entry>
    <title>实战二（上）：如何对接口鉴权这样一个功能开发做面向对象分析？</title>
    <url>/2023/07/13/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9113.%20%E5%AE%9E%E6%88%98%E4%BA%8C%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AF%B9%E6%8E%A5%E5%8F%A3%E9%89%B4%E6%9D%83%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91%E5%81%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="实战二（上）：如何对接口鉴权这样一个功能开发做面向对象分析？"><a href="#实战二（上）：如何对接口鉴权这样一个功能开发做面向对象分析？" class="headerlink" title="实战二（上）：如何对接口鉴权这样一个功能开发做面向对象分析？"></a>实战二（上）：如何对接口鉴权这样一个功能开发做面向对象分析？</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307131128223.jpeg" alt="a purple and blue background with wavy lines"></p>
<p>面向对象分析（OOA）、面向对象设计（OOD）、面向对象编程（OOP），是面向对象开发的三个主要环节。</p>
<p>如何进行面向对象分析、设计与编程。</p>
<p>在过往的工作中，我发现，很多工程师，特别是初级工程师，本身没有太多的项目经验，或者参与的项目都是基于开发框架填写 CRUD 模板似的代码，导致分析、设计能力比较欠缺。当他们拿到一个比较笼统的开发需求的时候，往往不知道从何入手。</p>
<p>对于“如何做需求分析，如何做职责划分？需要定义哪些类？每个类应该具有哪些属性、方法？类与类之间该如何交互？如何组装类成一个可执行的程序？”等等诸多问题，都没有清晰的思路，更别提利用成熟的设计原则、思想或者设计模式，开发出具有高内聚低耦合、易扩展、易读等优秀特性的代码了。</p>
<p>从基础的需求分析、职责划分、类的定义、交互、组装运行讲起，将最基础的面向对象分析、设计、编程的套路给你讲清楚，为后面学习设计原则、设计模式打好基础。</p>
<h2 id="案例介绍和难点剖析"><a href="#案例介绍和难点剖析" class="headerlink" title="案例介绍和难点剖析"></a>案例介绍和难点剖析</h2><p>假设，你正在参与开发一个微服务。微服务通过 HTTP 协议暴露接口给其他系统调用，说直白点就是，其他系统通过 URL 来调用微服务的接口。有一天，你的 leader 找到你说，“为了保证接口调用的安全性，我们希望设计实现一个接口调用鉴权功能，只有经过认证之后的系统才能调用我们的接口，没有认证过的系统调用我们的接口会被拒绝。我希望由你来负责这个任务的开发，争取尽快上线。”</p>
<p>无从下手的原因：</p>
<ol>
<li><p>需求不明确</p>
<p>如何应对需求不明确：面向对象分析主要的分析对象是“需求”，因此，面向对象分析可以粗略地看成“需求分析”。实际上，不管是需求分析还是面向对象分析，我们首先要做的都是将笼统的需求细化到足够清晰、可执行。我们需要通过沟通、挖掘、分析、假设、梳理，搞清楚具体的需求有哪些，哪些是现在要做的，哪些是未来可能要做的，哪些是不用考虑做的。</p>
</li>
<li><p>缺少锻炼</p>
<p>鉴权作为一个跟具体业务无关的功能，我们完全可以把它开发成一个独立的框架，集成到很多业务系统中。开发这样通用的框架，对工程师的需求分析能力、设计能力、编码能力，甚至逻辑思维能力的要求，都是比较高的。如果你平时做的都是简单的 CRUD 业务开发，那这方面的锻炼肯定不会很多，所以，一旦遇到这种开发需求，很容易因为缺少锻炼，脑子放空，不知道从何入手，完全没有思路</p>
</li>
</ol>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>尽管针对框架、组件、类库等非业务系统的开发，我们一定要有组件化意识、框架意识、抽象意识，开发出来的东西要足够通用，不能局限于单一的某个业务需求，但这并不代表我们就可以脱离具体的应用场景，闷头拍脑袋做需求分析。多跟业务团队聊聊天，甚至自己去参与几个业务系统的开发，只有这样，我们才能真正知道业务系统的痛点，才能分析出最有价值的需求。不过，针对鉴权这一功能的开发，最大的需求方还是我们自己，所以，我们也可以先从满足我们自己系统的需求开始，然后再迭代优化。</p>
<h3 id="第一轮基础分析"><a href="#第一轮基础分析" class="headerlink" title="第一轮基础分析"></a>第一轮基础分析</h3><p>，通过用户名加密码来做认证。我们给每个允许访问我们服务的调用方，派发一个应用名（或者叫应用 ID、AppID）和一个对应的密码（或者叫秘钥）。调用方每次进行接口请求的时候，都携带自己的 AppID 和密码。微服务在接收到接口调用请求之后，会解析出 AppID 和密码，跟存储在微服务端的 AppID 和密码进行比对。如果一致，说明认证成功，则允许接口调用请求；否则，就拒绝接口调用请求。</p>
<h3 id="第二轮基础分析"><a href="#第二轮基础分析" class="headerlink" title="第二轮基础分析"></a>第二轮基础分析</h3><p>不过，这样的验证方式，每次都要明文传输密码。密码很容易被截获，是不安全的。那如果我们借助加密算法（比如 SHA），对密码进行加密之后，再传递到微服务端验证，是不是就可以了呢？实际上，这样也是不安全的，因为加密之后的密码及 AppID，照样可以被未认证系统（或者说黑客）截获，未认证系统可以携带这个加密之后的密码以及对应的 AppID，伪装成已认证系统来访问我们的接口。这就是典型的“重放攻击”。</p>
<p>对于刚刚这个问题，我们可以借助 OAuth 的验证思路来解决。调用方将请求接口的 URL 跟 AppID、密码拼接在一起，然后进行加密，生成一个 token。调用方在进行接口请求的的时候，将这个 token 及 AppID，随 URL 一块传递给微服务端。微服务端接收到这些数据之后，根据 AppID 从数据库中取出对应的密码，并通过同样的 token 生成算法，生成另外一个 token。用这个新生成的 token 跟调用方传递过来的 token 对比。如果一致，则允许接口调用请求；否则，就拒绝接口调用请求。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307131116374.jpeg" alt="img"></p>
<h3 id="第三轮分析优化"><a href="#第三轮分析优化" class="headerlink" title="第三轮分析优化"></a>第三轮分析优化</h3><p>不过，这样的设计仍然存在重放攻击的风险，还是不够安全。每个 URL 拼接上 AppID、密码生成的 token 都是固定的。未认证系统截获 URL、token 和 AppID 之后，还是可以通过重放攻击的方式，伪装成认证系统，调用这个 URL 对应的接口。</p>
<p>为了解决这个问题，我们可以进一步优化 token 生成算法，引入一个随机变量，让每次接口请求生成的 token 都不一样。我们可以选择时间戳作为随机变量。原来的 token 是对 URL、AppID、密码三者进行加密生成的，现在我们将 URL、AppID、密码、时间戳四者进行加密来生成 token。调用方在进行接口请求的时候，将 token、AppID、时间戳，随 URL 一并传递给微服务端。</p>
<p>微服务端在收到这些数据之后，会验证当前时间戳跟传递过来的时间戳，是否在一定的时间窗口内（比如一分钟）。如果超过一分钟，则判定 token 过期，拒绝接口请求。如果没有超过一分钟，则说明 token 没有过期，就再通过同样的 token 生成算法，在服务端生成新的 token，与调用方传递过来的 token 比对，看是否一致。如果一致，则允许接口调用请求；否则，就拒绝接口调用请求。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307131117233.jpeg" alt="img"></p>
<h3 id="第四轮分析优化"><a href="#第四轮分析优化" class="headerlink" title="第四轮分析优化"></a>第四轮分析优化</h3><p>实际上，还有一个细节我们没有考虑到，那就是，如何在微服务端存储每个授权调用方的 AppID 和密码。当然，这个问题并不难。最容易想到的方案就是存储到数据库里，比如 MySQL。不过，开发像鉴权这样的非业务功能，最好不要与具体的第三方系统有过度的耦合。</p>
<p>针对 AppID 和密码的存储，我们最好能灵活地支持各种不同的存储方式，比如 ZooKeeper、本地配置文件、自研配置中心、MySQL、Redis 等。我们不一定针对每种存储方式都去做代码实现，但起码要留有扩展点，保证系统有足够的灵活性和扩展性，能够在我们切换存储方式的时候，尽可能地减少代码的改动。</p>
<h3 id="最终确定需求"><a href="#最终确定需求" class="headerlink" title="最终确定需求"></a>最终确定需求</h3><ul>
<li>调用方进行接口请求的时候，将 URL、AppID、密码、时间戳拼接在一起，通过加密算法生成 token，并且将 token、AppID、时间戳拼接在 URL 中，一并发送到微服务端。</li>
<li>微服务端在接收到调用方的接口请求之后，从请求中拆解出 token、AppID、时间戳。</li>
<li>微服务端首先检查传递过来的时间戳跟当前时间，是否在 token 失效时间窗口内。如果已经超过失效时间，那就算接口调用鉴权失败，拒绝接口调用请求。</li>
<li>如果 token 验证没有过期失效，微服务端再从自己的存储中，取出 AppID 对应的密码，通过同样的 token 生成算法，生成另外一个 token，与调用方传递过来的 token 进行匹配；如果一致，则鉴权成功，允许接口调用，否则就拒绝接口调用。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>实战二（下）：如何利用面向对象设计和编程开发接口鉴权功能？</title>
    <url>/2023/07/15/01.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%9114.%20%E5%AE%9E%E6%88%98%E4%BA%8C%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%92%8C%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91%E6%8E%A5%E5%8F%A3%E9%89%B4%E6%9D%83%E5%8A%9F%E8%83%BD%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="实战二（下）：如何利用面向对象设计和编程开发接口鉴权功能？"><a href="#实战二（下）：如何利用面向对象设计和编程开发接口鉴权功能？" class="headerlink" title="实战二（下）：如何利用面向对象设计和编程开发接口鉴权功能？"></a>实战二（下）：如何利用面向对象设计和编程开发接口鉴权功能？</h1><p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307151446685.jpeg" alt="a white and blue abstract background with curved lines"></p>
<p>上节讲述了如何进行面向对象分析OOA。这小节针对面向对象分析产出的需求，如何来进行面向对象设计OOD和面向对象编程OOP。</p>
<h2 id="如何进行面向对象设计？"><a href="#如何进行面向对象设计？" class="headerlink" title="如何进行面向对象设计？"></a>如何进行面向对象设计？</h2><p>面向对象分析的产出是详细的需求描述，那面向对象设计的产出就是类。在面向对象设计环节，我们将需求描述转化为具体的类的设计。我们把这一设计环节拆解细化一下，主要包含以下几个部分：</p>
<ul>
<li>划分职责进而识别出有哪些类；</li>
<li>定义类及其属性和方法；</li>
<li>定义类与类之间的交互关系；</li>
<li>将类组装起来并提供执行入口。</li>
</ul>
<p>结合示例，如何进行对象设计并实现编码。</p>
<h3 id="1-划分职责并识别出有哪些类"><a href="#1-划分职责并识别出有哪些类" class="headerlink" title="1. 划分职责并识别出有哪些类"></a>1. 划分职责并识别出有哪些类</h3><p>根据需求描述，把其中涉及的功能点，一个一个罗列出来，然后再去看哪些功能点职责相近，操作同样的属性，是否应该归为同一个类。</p>
<p>上节总结出来的需求描述：</p>
<ul>
<li>调用方进行接口请求的时候，将 URL、AppID、密码、时间戳拼接在一起，通过加密算法生成 token，并且将 token、AppID、时间戳拼接在 URL 中，一并发送到微服务端。</li>
<li>微服务端在接收到调用方的接口请求之后，从请求中拆解出 token、AppID、时间戳。</li>
<li>微服务端首先检查传递过来的时间戳跟当前时间，是否在 token 失效时间窗口内。如果已经超过失效时间，那就算接口调用鉴权失败，拒绝接口调用请求。</li>
<li>如果 token 验证没有过期失效，微服务端再从自己的存储中，取出 AppID 对应的密码，通过同样的 token 生成算法，生成另外一个 token，与调用方传递过来的 token 进行匹配。如果一致，则鉴权成功，允许接口调用；否则就拒绝接口调用。</li>
</ul>
<p><strong>划分出来的功能点</strong>：</p>
<ol>
<li>把 URL、AppID、密码、时间戳拼接为一个字符串；</li>
<li>对字符串通过加密算法加密生成 token；</li>
<li>将 token、AppID、时间戳拼接到 URL 中，形成新的 URL；</li>
<li>解析 URL，得到 token、AppID、时间戳等信息；</li>
<li>从存储中取出 AppID 和对应的密码；</li>
<li>根据时间戳判断 token 是否过期失效；</li>
<li>验证两个 token 是否匹配；</li>
</ol>
<p>其中，1、2、6、7和token相关，负责token的生成、验证；</p>
<p>3、4处理URL，负责URL的拼接、解析；</p>
<p>5是操作APPID的密码，负责从存储中读取APPID和密码。</p>
<p>所以，可以粗略地得到这三个核心类：</p>
<p>AuthToken、Url、CredentialStorage</p>
<blockquote>
<p>技巧：针对复杂的需求开发，我们首先要做的是进行模块划分，将需求先简单划分成几个小的、独立的功能模块，然后再在模块内部，应用我们刚刚讲的方法，进行面向对象设计。而模块的划分和识别，跟类的划分和识别，是类似的套路。</p>
</blockquote>
<h3 id="2-定义类及属性和方法"><a href="#2-定义类及属性和方法" class="headerlink" title="2. 定义类及属性和方法"></a>2. 定义类及属性和方法</h3><h4 id="AuthToken-类相关的功能点"><a href="#AuthToken-类相关的功能点" class="headerlink" title="AuthToken 类相关的功能点"></a>AuthToken 类相关的功能点</h4><p>AuthToken 类相关的功能点有四个：</p>
<ol>
<li>把 URL、AppID、密码、时间戳拼接为一个字符串；</li>
<li>对字符串通过加密算法加密生成 token；</li>
<li>根据时间戳判断 token 是否过期失效；</li>
<li>验证两个 token 是否匹配。</li>
</ol>
<p>对于方法的识别，识别出需求描述中的动词，作为候选的方法，再进一步过滤筛选。类比一下方法的识别，我们可以把功能点中涉及的名词，作为候选属性，然后同样进行过滤筛选：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307151423377.jpeg" alt="img"></p>
<p>从上面的类图可以发现三个小细节：</p>
<ul>
<li>第一个细节：并不是所有出现的名词都被定义为类的属性，比如 URL、AppID、密码、时间戳这几个名词，我们把它作为了方法的参数。</li>
<li>第二个细节：我们还需要挖掘一些没有出现在功能点描述中属性，比如 createTime，expireTimeInterval，它们用在 isExpired() 函数中，用来判定 token 是否过期。</li>
<li>第三个细节：我们还给 AuthToken 类添加了一个功能点描述中没有提到的方法 getToken()。</li>
</ul>
<p>第一个细节告诉我们，从业务模型上来说，不应该属于这个类的属性和方法，不应该被放到这个类里。比如 URL、AppID 这些信息，从业务模型上来说，不应该属于 AuthToken，所以我们不应该放到这个类中。</p>
<p>第二、第三个细节告诉我们，在设计类具有哪些属性和方法的时候，不能单纯地依赖当下的需求，还要分析这个类从业务模型上来讲，理应具有哪些属性和方法。这样可以一方面保证类定义的完整性，另一方面不仅为当下的需求还为未来的需求做些准备。</p>
<h4 id="Url-类相关的功能点"><a href="#Url-类相关的功能点" class="headerlink" title="Url 类相关的功能点"></a>Url 类相关的功能点</h4><p>有两个：</p>
<ul>
<li>将 token、AppID、时间戳拼接到 URL 中，形成新的 URL；</li>
<li>解析 URL，得到 token、AppID、时间戳等信息。</li>
</ul>
<p>虽然需求描述中，我们都是以 URL 来代指接口请求，但是，接口请求并不一定是以 URL 的形式来表达，还有可能是 Dubbo、RPC 等其他形式。为了让这个类更加通用，命名更加贴切，我们接下来把它命名为 ApiRequest。下面是根据功能点描述设计的 ApiRequest 类：</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307151425498.jpeg" alt="img"></p>
<h4 id="CredentialStorage-类相关的功能点"><a href="#CredentialStorage-类相关的功能点" class="headerlink" title="CredentialStorage 类相关的功能点"></a>CredentialStorage 类相关的功能点</h4><p>从存储中取出 AppID 和对应的密码。</p>
<p>CredentialStorage 类非常简单，类图如下所示。为了做到抽象封装具体的存储方式，我们将 CredentialStorage 设计成了接口，基于接口而非具体的实现编程。</p>
<p><img src="https://markdown-image-bed.oss-cn-beijing.aliyuncs.com/202307151425977.jpeg" alt="img"></p>
<h3 id="3-定义类与类之间的交互关系"><a href="#3-定义类与类之间的交互关系" class="headerlink" title="3. 定义类与类之间的交互关系"></a>3. 定义类与类之间的交互关系</h3><p><a href="">类与类之间有哪些交互关系？</a></p>
<p>因为目前只有三个核心的类，所以只用到了实现关系，也即 CredentialStorage 和 MysqlCredentialStorage 之间的关系。接下来讲到组装类的时候，我们还会用到依赖关系、组合关系，但是泛化关系暂时没有用到。</p>
<h3 id="4-将类组装起来并执行入口"><a href="#4-将类组装起来并执行入口" class="headerlink" title="4. 将类组装起来并执行入口"></a>4. 将类组装起来并执行入口</h3><p>接口鉴权并不是一个独立运行的系统，而是一个集成在系统上运行的组件，所以，我们封装所有的实现细节，设计了一个最顶层的 ApiAuthenticator 接口类，暴露一组给外部调用者使用的 API 接口，作为触发执行鉴权逻辑的入口。具体的类的设计如下所示：</p>
<p><img src="https://static001.geekbang.org/resource/image/f4/ca/f408ac59caffde117716d11148d010ca.jpg?wh=1953*1479" alt="img"></p>
<h2 id="如何进行面向对象编程（编码）？"><a href="#如何进行面向对象编程（编码）？" class="headerlink" title="如何进行面向对象编程（编码）？"></a>如何进行面向对象编程（编码）？</h2><p>面向对象设计完成之后，我们已经定义清晰了类、属性、方法、类之间的交互，并且将所有的类组装起来，提供了统一的执行入口。接下来，面向对象编程的工作，就是将这些设计思路翻译成代码实现。有了前面的类图，这部分工作相对来说就比较简单了。所以，这里我只给出比较复杂的 ApiAuthenticator 的实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApiAuthenticator</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">auth</span><span class="params">(String url)</span>;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">auth</span><span class="params">(ApiRequest apiRequest)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultApiAuthenticatorImpl</span> <span class="keyword">implements</span> <span class="title class_">ApiAuthenticator</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> CredentialStorage credentialStorage;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">DefaultApiAuthenticatorImpl</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.credentialStorage = <span class="keyword">new</span> <span class="title class_">MysqlCredentialStorage</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">DefaultApiAuthenticatorImpl</span><span class="params">(CredentialStorage credentialStorage)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.credentialStorage = credentialStorage;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">auth</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    <span class="type">ApiRequest</span> <span class="variable">apiRequest</span> <span class="operator">=</span> ApiRequest.buildFromUrl(url);</span><br><span class="line">    auth(apiRequest);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">auth</span><span class="params">(ApiRequest apiRequest)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">appId</span> <span class="operator">=</span> apiRequest.getAppId();</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> apiRequest.getToken();</span><br><span class="line">    <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> apiRequest.getTimestamp();</span><br><span class="line">    <span class="type">String</span> <span class="variable">originalUrl</span> <span class="operator">=</span> apiRequest.getOriginalUrl();</span><br><span class="line"></span><br><span class="line">    <span class="type">AuthToken</span> <span class="variable">clientAuthToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthToken</span>(token, timestamp);</span><br><span class="line">    <span class="keyword">if</span> (clientAuthToken.isExpired()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Token is expired.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> credentialStorage.getPasswordByAppId(appId);</span><br><span class="line">    <span class="type">AuthToken</span> <span class="variable">serverAuthToken</span> <span class="operator">=</span> AuthToken.generate(originalUrl, appId, password, timestamp);</span><br><span class="line">    <span class="keyword">if</span> (!serverAuthToken.match(clientAuthToken)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Token verfication failed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
</search>
